
AVRASM ver. 2.2.7  C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm Wed Feb 24 18:13:15 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(26): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\multitask.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(27): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\timer.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(28): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\debug.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(29): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\Global.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(30): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\stepper.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(31): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(8): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\adc.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(9): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\i2c.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(10): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\fir_filter.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(32): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\screen.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(34): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\power.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(35): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\buzzer.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(36): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\eeprom.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(38): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\pid.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(39): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\expiration.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(40): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\trigger.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(41): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\pc_cmv.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(42): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\vc_cmv.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(43): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\psv.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(26): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\multitask.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(27): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\timer.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(28): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\debug.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(29): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\Global.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(30): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\stepper.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(31): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(8): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\adc.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(9): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\i2c.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\sensors.asm(10): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\fir_filter.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(32): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\screen.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(34): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\power.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(35): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\buzzer.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(36): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\eeprom.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(38): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\pid.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(39): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\expiration.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(40): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\trigger.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(41): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\pc_cmv.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(42): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\vc_cmv.asm'
C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\main.asm(43): Including file 'C:\Users\Javier\Documents\Trabajo\Ventilador_Mecanico\firmware\v1.4.4\Masi_Prod_V6\psv.asm'
                                 
                                 ;
                                 
                                 
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;*
                                 ;* Number            : AVR000
                                 ;* File Name         : m4809def.inc
                                 ;* Title             : Register/Bit Definitions for the ATmega4809
                                 ;* Created           : 2018-11-27 09:12
                                 ;* Version           : 1.00
                                 ;* Support e-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega4809
                                 ;*
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal
                                 ;* SRAM is also defined
                                 ;*
                                 ;*************************************************************************
                                 
                                 #ifndef _M4809DEF_INC_
                                 #define _M4809DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device	ATmega4809
                                 
                                 #pragma AVRPART ADMIN PART_NAME ATmega4809
                                 
                                 .equ	SIGNATURE_000	= 0x1E
                                 .equ	SIGNATURE_001	= 0x96
                                 .equ	SIGNATURE_002	= 0x51
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3X
                                 
                                 
                                 ; ***** ABSOLUTE I/O REGISTER LOCATIONS **********************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** AC0 - Analog Comparator
                                 ;*************************************************************************
                                 
                                 .equ AC0_CTRLA = 1664                    ; Control A
                                 .equ AC0_MUXCTRLA = 1666                 ; Mux Control A
                                 .equ AC0_DACREF = 1668                   ; Referance scale control
                                 .equ AC0_INTCTRL = 1670                  ; Interrupt Control
                                 .equ AC0_STATUS = 1671                   ; Status
                                 
                                 ;*************************************************************************
                                 ;** ADC0 - Analog to Digital Converter
                                 ;*************************************************************************
                                 
                                 .equ ADC0_CTRLA = 1536                   ; Control A
                                 .equ ADC0_CTRLB = 1537                   ; Control B
                                 .equ ADC0_CTRLC = 1538                   ; Control C
                                 .equ ADC0_CTRLD = 1539                   ; Control D
                                 .equ ADC0_CTRLE = 1540                   ; Control E
                                 .equ ADC0_SAMPCTRL = 1541                ; Sample Control
                                 .equ ADC0_MUXPOS = 1542                  ; Positive mux input
                                 .equ ADC0_COMMAND = 1544                 ; Command
                                 .equ ADC0_EVCTRL = 1545                  ; Event Control
                                 .equ ADC0_INTCTRL = 1546                 ; Interrupt Control
                                 .equ ADC0_INTFLAGS = 1547                ; Interrupt Flags
                                 .equ ADC0_DBGCTRL = 1548                 ; Debug Control
                                 .equ ADC0_TEMP = 1549                    ; Temporary Data
                                 .equ ADC0_RES = 1552                     ; ADC Accumulator Result
                                 .equ ADC0_RESL = 1552                    ; ADC Accumulator Result low byte
                                 .equ ADC0_RESH = 1553                    ; ADC Accumulator Result hi byte
                                 .equ ADC0_WINLT = 1554                   ; Window comparator low threshold
                                 .equ ADC0_WINLTL = 1554                  ; Window comparator low threshold low byte
                                 .equ ADC0_WINLTH = 1555                  ; Window comparator low threshold hi byte
                                 .equ ADC0_WINHT = 1556                   ; Window comparator high threshold
                                 .equ ADC0_WINHTL = 1556                  ; Window comparator high threshold low byte
                                 .equ ADC0_WINHTH = 1557                  ; Window comparator high threshold hi byte
                                 .equ ADC0_CALIB = 1558                   ; Calibration
                                 
                                 ;*************************************************************************
                                 ;** BOD - Bod interface
                                 ;*************************************************************************
                                 
                                 .equ BOD_CTRLA = 128                     ; Control A
                                 .equ BOD_CTRLB = 129                     ; Control B
                                 .equ BOD_VLMCTRLA = 136                  ; Voltage level monitor Control
                                 .equ BOD_INTCTRL = 137                   ; Voltage level monitor interrupt Control
                                 .equ BOD_INTFLAGS = 138                  ; Voltage level monitor interrupt Flags
                                 .equ BOD_STATUS = 139                    ; Voltage level monitor status
                                 
                                 ;*************************************************************************
                                 ;** CCL - Configurable Custom Logic
                                 ;*************************************************************************
                                 
                                 .equ CCL_CTRLA = 448                     ; Control Register A
                                 .equ CCL_SEQCTRL0 = 449                  ; Sequential Control 0
                                 .equ CCL_SEQCTRL1 = 450                  ; Sequential Control 1
                                 .equ CCL_INTCTRL0 = 453                  ; Interrupt Control 0
                                 .equ CCL_INTFLAGS = 455                  ; Interrupt Flags
                                 .equ CCL_LUT0CTRLA = 456                 ; LUT Control 0 A
                                 .equ CCL_LUT0CTRLB = 457                 ; LUT Control 0 B
                                 .equ CCL_LUT0CTRLC = 458                 ; LUT Control 0 C
                                 .equ CCL_TRUTH0 = 459                    ; Truth 0
                                 .equ CCL_LUT1CTRLA = 460                 ; LUT Control 1 A
                                 .equ CCL_LUT1CTRLB = 461                 ; LUT Control 1 B
                                 .equ CCL_LUT1CTRLC = 462                 ; LUT Control 1 C
                                 .equ CCL_TRUTH1 = 463                    ; Truth 1
                                 .equ CCL_LUT2CTRLA = 464                 ; LUT Control 2 A
                                 .equ CCL_LUT2CTRLB = 465                 ; LUT Control 2 B
                                 .equ CCL_LUT2CTRLC = 466                 ; LUT Control 2 C
                                 .equ CCL_TRUTH2 = 467                    ; Truth 2
                                 .equ CCL_LUT3CTRLA = 468                 ; LUT Control 3 A
                                 .equ CCL_LUT3CTRLB = 469                 ; LUT Control 3 B
                                 .equ CCL_LUT3CTRLC = 470                 ; LUT Control 3 C
                                 .equ CCL_TRUTH3 = 471                    ; Truth 3
                                 
                                 ;*************************************************************************
                                 ;** CLKCTRL - Clock controller
                                 ;*************************************************************************
                                 
                                 .equ CLKCTRL_MCLKCTRLA = 96              ; MCLK Control A
                                 .equ CLKCTRL_MCLKCTRLB = 97              ; MCLK Control B
                                 .equ CLKCTRL_MCLKLOCK = 98               ; MCLK Lock
                                 .equ CLKCTRL_MCLKSTATUS = 99             ; MCLK Status
                                 .equ CLKCTRL_OSC20MCTRLA = 112           ; OSC20M Control A
                                 .equ CLKCTRL_OSC20MCALIBA = 113          ; OSC20M Calibration A
                                 .equ CLKCTRL_OSC20MCALIBB = 114          ; OSC20M Calibration B
                                 .equ CLKCTRL_OSC32KCTRLA = 120           ; OSC32K Control A
                                 .equ CLKCTRL_XOSC32KCTRLA = 124          ; XOSC32K Control A
                                 
                                 ;*************************************************************************
                                 ;** CPU - CPU
                                 ;*************************************************************************
                                 
                                 .equ CPU_CCP = 52                        ; Configuration Change Protection
                                 .equ CPU_SPL = 61                        ; Stack Pointer Low
                                 .equ CPU_SPH = 62                        ; Stack Pointer High
                                 .equ CPU_SREG = 63                       ; Status Register
                                 
                                 ;*************************************************************************
                                 ;** CPUINT - Interrupt Controller
                                 ;*************************************************************************
                                 
                                 .equ CPUINT_CTRLA = 272                  ; Control A
                                 .equ CPUINT_STATUS = 273                 ; Status
                                 .equ CPUINT_LVL0PRI = 274                ; Interrupt Level 0 Priority
                                 .equ CPUINT_LVL1VEC = 275                ; Interrupt Level 1 Priority Vector
                                 
                                 ;*************************************************************************
                                 ;** CRCSCAN - CRCSCAN
                                 ;*************************************************************************
                                 
                                 .equ CRCSCAN_CTRLA = 288                 ; Control A
                                 .equ CRCSCAN_CTRLB = 289                 ; Control B
                                 .equ CRCSCAN_STATUS = 290                ; Status
                                 
                                 ;*************************************************************************
                                 ;** EVSYS - Event System
                                 ;*************************************************************************
                                 
                                 .equ EVSYS_STROBE = 384                  ; Channel Strobe
                                 .equ EVSYS_CHANNEL0 = 400                ; Multiplexer Channel 0
                                 .equ EVSYS_CHANNEL1 = 401                ; Multiplexer Channel 1
                                 .equ EVSYS_CHANNEL2 = 402                ; Multiplexer Channel 2
                                 .equ EVSYS_CHANNEL3 = 403                ; Multiplexer Channel 3
                                 .equ EVSYS_CHANNEL4 = 404                ; Multiplexer Channel 4
                                 .equ EVSYS_CHANNEL5 = 405                ; Multiplexer Channel 5
                                 .equ EVSYS_CHANNEL6 = 406                ; Multiplexer Channel 6
                                 .equ EVSYS_CHANNEL7 = 407                ; Multiplexer Channel 7
                                 .equ EVSYS_USERCCLLUT0A = 416            ; User CCL LUT0 Event A
                                 .equ EVSYS_USERCCLLUT0B = 417            ; User CCL LUT0 Event B
                                 .equ EVSYS_USERCCLLUT1A = 418            ; User CCL LUT1 Event A
                                 .equ EVSYS_USERCCLLUT1B = 419            ; User CCL LUT1 Event B
                                 .equ EVSYS_USERCCLLUT2A = 420            ; User CCL LUT2 Event A
                                 .equ EVSYS_USERCCLLUT2B = 421            ; User CCL LUT2 Event B
                                 .equ EVSYS_USERCCLLUT3A = 422            ; User CCL LUT3 Event A
                                 .equ EVSYS_USERCCLLUT3B = 423            ; User CCL LUT3 Event B
                                 .equ EVSYS_USERADC0 = 424                ; User ADC0
                                 .equ EVSYS_USEREVOUTA = 425              ; User EVOUT Port A
                                 .equ EVSYS_USEREVOUTB = 426              ; User EVOUT Port B
                                 .equ EVSYS_USEREVOUTC = 427              ; User EVOUT Port C
                                 .equ EVSYS_USEREVOUTD = 428              ; User EVOUT Port D
                                 .equ EVSYS_USEREVOUTE = 429              ; User EVOUT Port E
                                 .equ EVSYS_USEREVOUTF = 430              ; User EVOUT Port F
                                 .equ EVSYS_USERUSART0 = 431              ; User USART0
                                 .equ EVSYS_USERUSART1 = 432              ; User USART1
                                 .equ EVSYS_USERUSART2 = 433              ; User USART2
                                 .equ EVSYS_USERUSART3 = 434              ; User USART3
                                 .equ EVSYS_USERTCA0 = 435                ; User TCA0
                                 .equ EVSYS_USERTCB0 = 436                ; User TCB0
                                 .equ EVSYS_USERTCB1 = 437                ; User TCB1
                                 .equ EVSYS_USERTCB2 = 438                ; User TCB2
                                 .equ EVSYS_USERTCB3 = 439                ; User TCB3
                                 
                                 ;*************************************************************************
                                 ;** FUSE - Fuses
                                 ;*************************************************************************
                                 
                                 .equ FUSE_WDTCFG = 4736                  ; Watchdog Configuration
                                 .equ FUSE_BODCFG = 4737                  ; BOD Configuration
                                 .equ FUSE_OSCCFG = 4738                  ; Oscillator Configuration
                                 .equ FUSE_SYSCFG0 = 4741                 ; System Configuration 0
                                 .equ FUSE_SYSCFG1 = 4742                 ; System Configuration 1
                                 .equ FUSE_APPEND = 4743                  ; Application Code Section End
                                 .equ FUSE_BOOTEND = 4744                 ; Boot Section End
                                 
                                 ;*************************************************************************
                                 ;** GPIO - General Purpose IO
                                 ;*************************************************************************
                                 
                                 .equ GPIO_GPIOR0 = 28                    ; General Purpose IO Register 0
                                 .equ GPIO_GPIOR1 = 29                    ; General Purpose IO Register 1
                                 .equ GPIO_GPIOR2 = 30                    ; General Purpose IO Register 2
                                 .equ GPIO_GPIOR3 = 31                    ; General Purpose IO Register 3
                                 
                                 ;*************************************************************************
                                 ;** LOCKBIT - Lockbit
                                 ;*************************************************************************
                                 
                                 .equ LOCKBIT_LOCKBIT = 4746              ; Lock Bits
                                 
                                 ;*************************************************************************
                                 ;** NVMCTRL - Non-volatile Memory Controller
                                 ;*************************************************************************
                                 
                                 .equ NVMCTRL_CTRLA = 4096                ; Control A
                                 .equ NVMCTRL_CTRLB = 4097                ; Control B
                                 .equ NVMCTRL_STATUS = 4098               ; Status
                                 .equ NVMCTRL_INTCTRL = 4099              ; Interrupt Control
                                 .equ NVMCTRL_INTFLAGS = 4100             ; Interrupt Flags
                                 .equ NVMCTRL_DATA = 4102                 ; Data
                                 .equ NVMCTRL_DATAL = 4102                ; Data low byte
                                 .equ NVMCTRL_DATAH = 4103                ; Data hi byte
                                 .equ NVMCTRL_ADDR = 4104                 ; Address
                                 .equ NVMCTRL_ADDRL = 4104                ; Address low byte
                                 .equ NVMCTRL_ADDRH = 4105                ; Address hi byte
                                 
                                 ;*************************************************************************
                                 ;** PORTA - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTA_DIR = 1024                    ; Data Direction
                                 .equ PORTA_DIRSET = 1025                 ; Data Direction Set
                                 .equ PORTA_DIRCLR = 1026                 ; Data Direction Clear
                                 .equ PORTA_DIRTGL = 1027                 ; Data Direction Toggle
                                 .equ PORTA_OUT = 1028                    ; Output Value
                                 .equ PORTA_OUTSET = 1029                 ; Output Value Set
                                 .equ PORTA_OUTCLR = 1030                 ; Output Value Clear
                                 .equ PORTA_OUTTGL = 1031                 ; Output Value Toggle
                                 .equ PORTA_IN = 1032                     ; Input Value
                                 .equ PORTA_INTFLAGS = 1033               ; Interrupt Flags
                                 .equ PORTA_PORTCTRL = 1034               ; Port Control
                                 .equ PORTA_PIN0CTRL = 1040               ; Pin 0 Control
                                 .equ PORTA_PIN1CTRL = 1041               ; Pin 1 Control
                                 .equ PORTA_PIN2CTRL = 1042               ; Pin 2 Control
                                 .equ PORTA_PIN3CTRL = 1043               ; Pin 3 Control
                                 .equ PORTA_PIN4CTRL = 1044               ; Pin 4 Control
                                 .equ PORTA_PIN5CTRL = 1045               ; Pin 5 Control
                                 .equ PORTA_PIN6CTRL = 1046               ; Pin 6 Control
                                 .equ PORTA_PIN7CTRL = 1047               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTB - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTB_DIR = 1056                    ; Data Direction
                                 .equ PORTB_DIRSET = 1057                 ; Data Direction Set
                                 .equ PORTB_DIRCLR = 1058                 ; Data Direction Clear
                                 .equ PORTB_DIRTGL = 1059                 ; Data Direction Toggle
                                 .equ PORTB_OUT = 1060                    ; Output Value
                                 .equ PORTB_OUTSET = 1061                 ; Output Value Set
                                 .equ PORTB_OUTCLR = 1062                 ; Output Value Clear
                                 .equ PORTB_OUTTGL = 1063                 ; Output Value Toggle
                                 .equ PORTB_IN = 1064                     ; Input Value
                                 .equ PORTB_INTFLAGS = 1065               ; Interrupt Flags
                                 .equ PORTB_PORTCTRL = 1066               ; Port Control
                                 .equ PORTB_PIN0CTRL = 1072               ; Pin 0 Control
                                 .equ PORTB_PIN1CTRL = 1073               ; Pin 1 Control
                                 .equ PORTB_PIN2CTRL = 1074               ; Pin 2 Control
                                 .equ PORTB_PIN3CTRL = 1075               ; Pin 3 Control
                                 .equ PORTB_PIN4CTRL = 1076               ; Pin 4 Control
                                 .equ PORTB_PIN5CTRL = 1077               ; Pin 5 Control
                                 .equ PORTB_PIN6CTRL = 1078               ; Pin 6 Control
                                 .equ PORTB_PIN7CTRL = 1079               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTC - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTC_DIR = 1088                    ; Data Direction
                                 .equ PORTC_DIRSET = 1089                 ; Data Direction Set
                                 .equ PORTC_DIRCLR = 1090                 ; Data Direction Clear
                                 .equ PORTC_DIRTGL = 1091                 ; Data Direction Toggle
                                 .equ PORTC_OUT = 1092                    ; Output Value
                                 .equ PORTC_OUTSET = 1093                 ; Output Value Set
                                 .equ PORTC_OUTCLR = 1094                 ; Output Value Clear
                                 .equ PORTC_OUTTGL = 1095                 ; Output Value Toggle
                                 .equ PORTC_IN = 1096                     ; Input Value
                                 .equ PORTC_INTFLAGS = 1097               ; Interrupt Flags
                                 .equ PORTC_PORTCTRL = 1098               ; Port Control
                                 .equ PORTC_PIN0CTRL = 1104               ; Pin 0 Control
                                 .equ PORTC_PIN1CTRL = 1105               ; Pin 1 Control
                                 .equ PORTC_PIN2CTRL = 1106               ; Pin 2 Control
                                 .equ PORTC_PIN3CTRL = 1107               ; Pin 3 Control
                                 .equ PORTC_PIN4CTRL = 1108               ; Pin 4 Control
                                 .equ PORTC_PIN5CTRL = 1109               ; Pin 5 Control
                                 .equ PORTC_PIN6CTRL = 1110               ; Pin 6 Control
                                 .equ PORTC_PIN7CTRL = 1111               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTD - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTD_DIR = 1120                    ; Data Direction
                                 .equ PORTD_DIRSET = 1121                 ; Data Direction Set
                                 .equ PORTD_DIRCLR = 1122                 ; Data Direction Clear
                                 .equ PORTD_DIRTGL = 1123                 ; Data Direction Toggle
                                 .equ PORTD_OUT = 1124                    ; Output Value
                                 .equ PORTD_OUTSET = 1125                 ; Output Value Set
                                 .equ PORTD_OUTCLR = 1126                 ; Output Value Clear
                                 .equ PORTD_OUTTGL = 1127                 ; Output Value Toggle
                                 .equ PORTD_IN = 1128                     ; Input Value
                                 .equ PORTD_INTFLAGS = 1129               ; Interrupt Flags
                                 .equ PORTD_PORTCTRL = 1130               ; Port Control
                                 .equ PORTD_PIN0CTRL = 1136               ; Pin 0 Control
                                 .equ PORTD_PIN1CTRL = 1137               ; Pin 1 Control
                                 .equ PORTD_PIN2CTRL = 1138               ; Pin 2 Control
                                 .equ PORTD_PIN3CTRL = 1139               ; Pin 3 Control
                                 .equ PORTD_PIN4CTRL = 1140               ; Pin 4 Control
                                 .equ PORTD_PIN5CTRL = 1141               ; Pin 5 Control
                                 .equ PORTD_PIN6CTRL = 1142               ; Pin 6 Control
                                 .equ PORTD_PIN7CTRL = 1143               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTE - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTE_DIR = 1152                    ; Data Direction
                                 .equ PORTE_DIRSET = 1153                 ; Data Direction Set
                                 .equ PORTE_DIRCLR = 1154                 ; Data Direction Clear
                                 .equ PORTE_DIRTGL = 1155                 ; Data Direction Toggle
                                 .equ PORTE_OUT = 1156                    ; Output Value
                                 .equ PORTE_OUTSET = 1157                 ; Output Value Set
                                 .equ PORTE_OUTCLR = 1158                 ; Output Value Clear
                                 .equ PORTE_OUTTGL = 1159                 ; Output Value Toggle
                                 .equ PORTE_IN = 1160                     ; Input Value
                                 .equ PORTE_INTFLAGS = 1161               ; Interrupt Flags
                                 .equ PORTE_PORTCTRL = 1162               ; Port Control
                                 .equ PORTE_PIN0CTRL = 1168               ; Pin 0 Control
                                 .equ PORTE_PIN1CTRL = 1169               ; Pin 1 Control
                                 .equ PORTE_PIN2CTRL = 1170               ; Pin 2 Control
                                 .equ PORTE_PIN3CTRL = 1171               ; Pin 3 Control
                                 .equ PORTE_PIN4CTRL = 1172               ; Pin 4 Control
                                 .equ PORTE_PIN5CTRL = 1173               ; Pin 5 Control
                                 .equ PORTE_PIN6CTRL = 1174               ; Pin 6 Control
                                 .equ PORTE_PIN7CTRL = 1175               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTF - I/O Ports
                                 ;*************************************************************************
                                 
                                 .equ PORTF_DIR = 1184                    ; Data Direction
                                 .equ PORTF_DIRSET = 1185                 ; Data Direction Set
                                 .equ PORTF_DIRCLR = 1186                 ; Data Direction Clear
                                 .equ PORTF_DIRTGL = 1187                 ; Data Direction Toggle
                                 .equ PORTF_OUT = 1188                    ; Output Value
                                 .equ PORTF_OUTSET = 1189                 ; Output Value Set
                                 .equ PORTF_OUTCLR = 1190                 ; Output Value Clear
                                 .equ PORTF_OUTTGL = 1191                 ; Output Value Toggle
                                 .equ PORTF_IN = 1192                     ; Input Value
                                 .equ PORTF_INTFLAGS = 1193               ; Interrupt Flags
                                 .equ PORTF_PORTCTRL = 1194               ; Port Control
                                 .equ PORTF_PIN0CTRL = 1200               ; Pin 0 Control
                                 .equ PORTF_PIN1CTRL = 1201               ; Pin 1 Control
                                 .equ PORTF_PIN2CTRL = 1202               ; Pin 2 Control
                                 .equ PORTF_PIN3CTRL = 1203               ; Pin 3 Control
                                 .equ PORTF_PIN4CTRL = 1204               ; Pin 4 Control
                                 .equ PORTF_PIN5CTRL = 1205               ; Pin 5 Control
                                 .equ PORTF_PIN6CTRL = 1206               ; Pin 6 Control
                                 .equ PORTF_PIN7CTRL = 1207               ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTMUX - Port Multiplexer
                                 ;*************************************************************************
                                 
                                 .equ PORTMUX_EVSYSROUTEA = 1504          ; Port Multiplexer EVSYS
                                 .equ PORTMUX_CCLROUTEA = 1505            ; Port Multiplexer CCL
                                 .equ PORTMUX_USARTROUTEA = 1506          ; Port Multiplexer USART register A
                                 .equ PORTMUX_TWISPIROUTEA = 1507         ; Port Multiplexer TWI and SPI
                                 .equ PORTMUX_TCAROUTEA = 1508            ; Port Multiplexer TCA
                                 .equ PORTMUX_TCBROUTEA = 1509            ; Port Multiplexer TCB
                                 
                                 ;*************************************************************************
                                 ;** RSTCTRL - Reset controller
                                 ;*************************************************************************
                                 
                                 .equ RSTCTRL_RSTFR = 64                  ; Reset Flags
                                 .equ RSTCTRL_SWRR = 65                   ; Software Reset
                                 
                                 ;*************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;*************************************************************************
                                 
                                 .equ RTC_CTRLA = 320                     ; Control A
                                 .equ RTC_STATUS = 321                    ; Status
                                 .equ RTC_INTCTRL = 322                   ; Interrupt Control
                                 .equ RTC_INTFLAGS = 323                  ; Interrupt Flags
                                 .equ RTC_TEMP = 324                      ; Temporary
                                 .equ RTC_DBGCTRL = 325                   ; Debug control
                                 .equ RTC_CALIB = 326                     ; Calibration
                                 .equ RTC_CLKSEL = 327                    ; Clock Select
                                 .equ RTC_CNT = 328                       ; Counter
                                 .equ RTC_CNTL = 328                      ; Counter low byte
                                 .equ RTC_CNTH = 329                      ; Counter hi byte
                                 .equ RTC_PER = 330                       ; Period
                                 .equ RTC_PERL = 330                      ; Period low byte
                                 .equ RTC_PERH = 331                      ; Period hi byte
                                 .equ RTC_CMP = 332                       ; Compare
                                 .equ RTC_CMPL = 332                      ; Compare low byte
                                 .equ RTC_CMPH = 333                      ; Compare hi byte
                                 .equ RTC_PITCTRLA = 336                  ; PIT Control A
                                 .equ RTC_PITSTATUS = 337                 ; PIT Status
                                 .equ RTC_PITINTCTRL = 338                ; PIT Interrupt Control
                                 .equ RTC_PITINTFLAGS = 339               ; PIT Interrupt Flags
                                 .equ RTC_PITDBGCTRL = 341                ; PIT Debug control
                                 
                                 ;*************************************************************************
                                 ;** SIGROW - Signature row
                                 ;*************************************************************************
                                 
                                 .equ SIGROW_DEVICEID0 = 4352             ; Device ID Byte 0
                                 .equ SIGROW_DEVICEID1 = 4353             ; Device ID Byte 1
                                 .equ SIGROW_DEVICEID2 = 4354             ; Device ID Byte 2
                                 .equ SIGROW_SERNUM0 = 4355               ; Serial Number Byte 0
                                 .equ SIGROW_SERNUM1 = 4356               ; Serial Number Byte 1
                                 .equ SIGROW_SERNUM2 = 4357               ; Serial Number Byte 2
                                 .equ SIGROW_SERNUM3 = 4358               ; Serial Number Byte 3
                                 .equ SIGROW_SERNUM4 = 4359               ; Serial Number Byte 4
                                 .equ SIGROW_SERNUM5 = 4360               ; Serial Number Byte 5
                                 .equ SIGROW_SERNUM6 = 4361               ; Serial Number Byte 6
                                 .equ SIGROW_SERNUM7 = 4362               ; Serial Number Byte 7
                                 .equ SIGROW_SERNUM8 = 4363               ; Serial Number Byte 8
                                 .equ SIGROW_SERNUM9 = 4364               ; Serial Number Byte 9
                                 .equ SIGROW_OSCCAL32K = 4372             ; Oscillator Calibration for 32kHz ULP
                                 .equ SIGROW_OSCCAL16M0 = 4376            ; Oscillator Calibration 16 MHz Byte 0
                                 .equ SIGROW_OSCCAL16M1 = 4377            ; Oscillator Calibration 16 MHz Byte 1
                                 .equ SIGROW_OSCCAL20M0 = 4378            ; Oscillator Calibration 20 MHz Byte 0
                                 .equ SIGROW_OSCCAL20M1 = 4379            ; Oscillator Calibration 20 MHz Byte 1
                                 .equ SIGROW_TEMPSENSE0 = 4384            ; Temperature Sensor Calibration Byte 0
                                 .equ SIGROW_TEMPSENSE1 = 4385            ; Temperature Sensor Calibration Byte 1
                                 .equ SIGROW_OSC16ERR3V = 4386            ; OSC16 error at 3V
                                 .equ SIGROW_OSC16ERR5V = 4387            ; OSC16 error at 5V
                                 .equ SIGROW_OSC20ERR3V = 4388            ; OSC20 error at 3V
                                 .equ SIGROW_OSC20ERR5V = 4389            ; OSC20 error at 5V
                                 .equ SIGROW_CHECKSUM1 = 4399             ; CRC Checksum Byte 1
                                 
                                 ;*************************************************************************
                                 ;** SLPCTRL - Sleep Controller
                                 ;*************************************************************************
                                 
                                 .equ SLPCTRL_CTRLA = 80                  ; Control
                                 
                                 ;*************************************************************************
                                 ;** SPI0 - Serial Peripheral Interface
                                 ;*************************************************************************
                                 
                                 .equ SPI0_CTRLA = 2240                   ; Control A
                                 .equ SPI0_CTRLB = 2241                   ; Control B
                                 .equ SPI0_INTCTRL = 2242                 ; Interrupt Control
                                 .equ SPI0_INTFLAGS = 2243                ; Interrupt Flags
                                 .equ SPI0_DATA = 2244                    ; Data
                                 
                                 ;*************************************************************************
                                 ;** SYSCFG - System Configuration Registers
                                 ;*************************************************************************
                                 
                                 .equ SYSCFG_REVID = 3841                 ; Revision ID
                                 .equ SYSCFG_EXTBRK = 3842                ; External Break
                                 .equ SYSCFG_OCDM = 3864                  ; OCD Message Register
                                 .equ SYSCFG_OCDMS = 3865                 ; OCD Message Status
                                 
                                 ;*************************************************************************
                                 ;** TCA0 - 16-bit Timer/Counter Type A
                                 ;*************************************************************************
                                 
                                 .equ TCA0_SINGLE_CTRLA = 2560            ; SINGLE Control A
                                 .equ TCA0_SINGLE_CTRLB = 2561            ; SINGLE Control B
                                 .equ TCA0_SINGLE_CTRLC = 2562            ; SINGLE Control C
                                 .equ TCA0_SINGLE_CTRLD = 2563            ; SINGLE Control D
                                 .equ TCA0_SINGLE_CTRLECLR = 2564         ; SINGLE Control E Clear
                                 .equ TCA0_SINGLE_CTRLESET = 2565         ; SINGLE Control E Set
                                 .equ TCA0_SINGLE_CTRLFCLR = 2566         ; SINGLE Control F Clear
                                 .equ TCA0_SINGLE_CTRLFSET = 2567         ; SINGLE Control F Set
                                 .equ TCA0_SINGLE_EVCTRL = 2569           ; SINGLE Event Control
                                 .equ TCA0_SINGLE_INTCTRL = 2570          ; SINGLE Interrupt Control
                                 .equ TCA0_SINGLE_INTFLAGS = 2571         ; SINGLE Interrupt Flags
                                 .equ TCA0_SINGLE_DBGCTRL = 2574          ; SINGLE Degbug Control
                                 .equ TCA0_SINGLE_TEMP = 2575             ; SINGLE Temporary data for 16-bit Access
                                 .equ TCA0_SINGLE_CNT = 2592              ; SINGLE Count
                                 .equ TCA0_SINGLE_PER = 2598              ; SINGLE Period
                                 .equ TCA0_SINGLE_CMP0 = 2600             ; SINGLE Compare 0
                                 .equ TCA0_SINGLE_CMP1 = 2602             ; SINGLE Compare 1
                                 .equ TCA0_SINGLE_CMP2 = 2604             ; SINGLE Compare 2
                                 .equ TCA0_SINGLE_PERBUF = 2614           ; SINGLE Period Buffer
                                 .equ TCA0_SINGLE_CMP0BUF = 2616          ; SINGLE Compare 0 Buffer
                                 .equ TCA0_SINGLE_CMP1BUF = 2618          ; SINGLE Compare 1 Buffer
                                 .equ TCA0_SINGLE_CMP2BUF = 2620          ; SINGLE Compare 2 Buffer
                                 .equ TCA0_SPLIT_CTRLA = 2560             ; SPLIT Control A
                                 .equ TCA0_SPLIT_CTRLB = 2561             ; SPLIT Control B
                                 .equ TCA0_SPLIT_CTRLC = 2562             ; SPLIT Control C
                                 .equ TCA0_SPLIT_CTRLD = 2563             ; SPLIT Control D
                                 .equ TCA0_SPLIT_CTRLECLR = 2564          ; SPLIT Control E Clear
                                 .equ TCA0_SPLIT_CTRLESET = 2565          ; SPLIT Control E Set
                                 .equ TCA0_SPLIT_INTCTRL = 2570           ; SPLIT Interrupt Control
                                 .equ TCA0_SPLIT_INTFLAGS = 2571          ; SPLIT Interrupt Flags
                                 .equ TCA0_SPLIT_DBGCTRL = 2574           ; SPLIT Degbug Control
                                 .equ TCA0_SPLIT_LCNT = 2592              ; SPLIT Low Count
                                 .equ TCA0_SPLIT_HCNT = 2593              ; SPLIT High Count
                                 .equ TCA0_SPLIT_LPER = 2598              ; SPLIT Low Period
                                 .equ TCA0_SPLIT_HPER = 2599              ; SPLIT High Period
                                 .equ TCA0_SPLIT_LCMP0 = 2600             ; SPLIT Low Compare
                                 .equ TCA0_SPLIT_HCMP0 = 2601             ; SPLIT High Compare
                                 .equ TCA0_SPLIT_LCMP1 = 2602             ; SPLIT Low Compare
                                 .equ TCA0_SPLIT_HCMP1 = 2603             ; SPLIT High Compare
                                 .equ TCA0_SPLIT_LCMP2 = 2604             ; SPLIT Low Compare
                                 .equ TCA0_SPLIT_HCMP2 = 2605             ; SPLIT High Compare
                                 
                                 ;*************************************************************************
                                 ;** TCB0 - 16-bit Timer Type B
                                 ;*************************************************************************
                                 
                                 .equ TCB0_CTRLA = 2688                   ; Control A
                                 .equ TCB0_CTRLB = 2689                   ; Control Register B
                                 .equ TCB0_EVCTRL = 2692                  ; Event Control
                                 .equ TCB0_INTCTRL = 2693                 ; Interrupt Control
                                 .equ TCB0_INTFLAGS = 2694                ; Interrupt Flags
                                 .equ TCB0_STATUS = 2695                  ; Status
                                 .equ TCB0_DBGCTRL = 2696                 ; Debug Control
                                 .equ TCB0_TEMP = 2697                    ; Temporary Value
                                 .equ TCB0_CNT = 2698                     ; Count
                                 .equ TCB0_CNTL = 2698                    ; Count low byte
                                 .equ TCB0_CNTH = 2699                    ; Count hi byte
                                 .equ TCB0_CCMP = 2700                    ; Compare or Capture
                                 .equ TCB0_CCMPL = 2700                   ; Compare or Capture low byte
                                 .equ TCB0_CCMPH = 2701                   ; Compare or Capture hi byte
                                 
                                 ;*************************************************************************
                                 ;** TCB1 - 16-bit Timer Type B
                                 ;*************************************************************************
                                 
                                 .equ TCB1_CTRLA = 2704                   ; Control A
                                 .equ TCB1_CTRLB = 2705                   ; Control Register B
                                 .equ TCB1_EVCTRL = 2708                  ; Event Control
                                 .equ TCB1_INTCTRL = 2709                 ; Interrupt Control
                                 .equ TCB1_INTFLAGS = 2710                ; Interrupt Flags
                                 .equ TCB1_STATUS = 2711                  ; Status
                                 .equ TCB1_DBGCTRL = 2712                 ; Debug Control
                                 .equ TCB1_TEMP = 2713                    ; Temporary Value
                                 .equ TCB1_CNT = 2714                     ; Count
                                 .equ TCB1_CNTL = 2714                    ; Count low byte
                                 .equ TCB1_CNTH = 2715                    ; Count hi byte
                                 .equ TCB1_CCMP = 2716                    ; Compare or Capture
                                 .equ TCB1_CCMPL = 2716                   ; Compare or Capture low byte
                                 .equ TCB1_CCMPH = 2717                   ; Compare or Capture hi byte
                                 
                                 ;*************************************************************************
                                 ;** TCB2 - 16-bit Timer Type B
                                 ;*************************************************************************
                                 
                                 .equ TCB2_CTRLA = 2720                   ; Control A
                                 .equ TCB2_CTRLB = 2721                   ; Control Register B
                                 .equ TCB2_EVCTRL = 2724                  ; Event Control
                                 .equ TCB2_INTCTRL = 2725                 ; Interrupt Control
                                 .equ TCB2_INTFLAGS = 2726                ; Interrupt Flags
                                 .equ TCB2_STATUS = 2727                  ; Status
                                 .equ TCB2_DBGCTRL = 2728                 ; Debug Control
                                 .equ TCB2_TEMP = 2729                    ; Temporary Value
                                 .equ TCB2_CNT = 2730                     ; Count
                                 .equ TCB2_CNTL = 2730                    ; Count low byte
                                 .equ TCB2_CNTH = 2731                    ; Count hi byte
                                 .equ TCB2_CCMP = 2732                    ; Compare or Capture
                                 .equ TCB2_CCMPL = 2732                   ; Compare or Capture low byte
                                 .equ TCB2_CCMPH = 2733                   ; Compare or Capture hi byte
                                 
                                 ;*************************************************************************
                                 ;** TCB3 - 16-bit Timer Type B
                                 ;*************************************************************************
                                 
                                 .equ TCB3_CTRLA = 2736                   ; Control A
                                 .equ TCB3_CTRLB = 2737                   ; Control Register B
                                 .equ TCB3_EVCTRL = 2740                  ; Event Control
                                 .equ TCB3_INTCTRL = 2741                 ; Interrupt Control
                                 .equ TCB3_INTFLAGS = 2742                ; Interrupt Flags
                                 .equ TCB3_STATUS = 2743                  ; Status
                                 .equ TCB3_DBGCTRL = 2744                 ; Debug Control
                                 .equ TCB3_TEMP = 2745                    ; Temporary Value
                                 .equ TCB3_CNT = 2746                     ; Count
                                 .equ TCB3_CNTL = 2746                    ; Count low byte
                                 .equ TCB3_CNTH = 2747                    ; Count hi byte
                                 .equ TCB3_CCMP = 2748                    ; Compare or Capture
                                 .equ TCB3_CCMPL = 2748                   ; Compare or Capture low byte
                                 .equ TCB3_CCMPH = 2749                   ; Compare or Capture hi byte
                                 
                                 ;*************************************************************************
                                 ;** TWI0 - Two-Wire Interface
                                 ;*************************************************************************
                                 
                                 .equ TWI0_CTRLA = 2208                   ; Control A
                                 .equ TWI0_DUALCTRL = 2209                ; Dual Control
                                 .equ TWI0_DBGCTRL = 2210                 ; Debug Control Register
                                 .equ TWI0_MCTRLA = 2211                  ; Master Control A
                                 .equ TWI0_MCTRLB = 2212                  ; Master Control B
                                 .equ TWI0_MSTATUS = 2213                 ; Master Status
                                 .equ TWI0_MBAUD = 2214                   ; Master Baurd Rate Control
                                 .equ TWI0_MADDR = 2215                   ; Master Address
                                 .equ TWI0_MDATA = 2216                   ; Master Data
                                 .equ TWI0_SCTRLA = 2217                  ; Slave Control A
                                 .equ TWI0_SCTRLB = 2218                  ; Slave Control B
                                 .equ TWI0_SSTATUS = 2219                 ; Slave Status
                                 .equ TWI0_SADDR = 2220                   ; Slave Address
                                 .equ TWI0_SDATA = 2221                   ; Slave Data
                                 .equ TWI0_SADDRMASK = 2222               ; Slave Address Mask
                                 
                                 ;*************************************************************************
                                 ;** USART0 - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 
                                 .equ USART0_RXDATAL = 2048               ; Receive Data Low Byte
                                 .equ USART0_RXDATAH = 2049               ; Receive Data High Byte
                                 .equ USART0_TXDATAL = 2050               ; Transmit Data Low Byte
                                 .equ USART0_TXDATAH = 2051               ; Transmit Data High Byte
                                 .equ USART0_STATUS = 2052                ; Status
                                 .equ USART0_CTRLA = 2053                 ; Control A
                                 .equ USART0_CTRLB = 2054                 ; Control B
                                 .equ USART0_CTRLC = 2055                 ; Control C
                                 .equ USART0_BAUD = 2056                  ; Baud Rate
                                 .equ USART0_BAUDL = 2056                 ; Baud Rate low byte
                                 .equ USART0_BAUDH = 2057                 ; Baud Rate hi byte
                                 .equ USART0_CTRLD = 2058                 ; Control D
                                 .equ USART0_DBGCTRL = 2059               ; Debug Control
                                 .equ USART0_EVCTRL = 2060                ; Event Control
                                 .equ USART0_TXPLCTRL = 2061              ; IRCOM Transmitter Pulse Length Control
                                 .equ USART0_RXPLCTRL = 2062              ; IRCOM Receiver Pulse Length Control
                                 
                                 ;*************************************************************************
                                 ;** USART1 - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 
                                 .equ USART1_RXDATAL = 2080               ; Receive Data Low Byte
                                 .equ USART1_RXDATAH = 2081               ; Receive Data High Byte
                                 .equ USART1_TXDATAL = 2082               ; Transmit Data Low Byte
                                 .equ USART1_TXDATAH = 2083               ; Transmit Data High Byte
                                 .equ USART1_STATUS = 2084                ; Status
                                 .equ USART1_CTRLA = 2085                 ; Control A
                                 .equ USART1_CTRLB = 2086                 ; Control B
                                 .equ USART1_CTRLC = 2087                 ; Control C
                                 .equ USART1_BAUD = 2088                  ; Baud Rate
                                 .equ USART1_BAUDL = 2088                 ; Baud Rate low byte
                                 .equ USART1_BAUDH = 2089                 ; Baud Rate hi byte
                                 .equ USART1_CTRLD = 2090                 ; Control D
                                 .equ USART1_DBGCTRL = 2091               ; Debug Control
                                 .equ USART1_EVCTRL = 2092                ; Event Control
                                 .equ USART1_TXPLCTRL = 2093              ; IRCOM Transmitter Pulse Length Control
                                 .equ USART1_RXPLCTRL = 2094              ; IRCOM Receiver Pulse Length Control
                                 
                                 ;*************************************************************************
                                 ;** USART2 - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 
                                 .equ USART2_RXDATAL = 2112               ; Receive Data Low Byte
                                 .equ USART2_RXDATAH = 2113               ; Receive Data High Byte
                                 .equ USART2_TXDATAL = 2114               ; Transmit Data Low Byte
                                 .equ USART2_TXDATAH = 2115               ; Transmit Data High Byte
                                 .equ USART2_STATUS = 2116                ; Status
                                 .equ USART2_CTRLA = 2117                 ; Control A
                                 .equ USART2_CTRLB = 2118                 ; Control B
                                 .equ USART2_CTRLC = 2119                 ; Control C
                                 .equ USART2_BAUD = 2120                  ; Baud Rate
                                 .equ USART2_BAUDL = 2120                 ; Baud Rate low byte
                                 .equ USART2_BAUDH = 2121                 ; Baud Rate hi byte
                                 .equ USART2_CTRLD = 2122                 ; Control D
                                 .equ USART2_DBGCTRL = 2123               ; Debug Control
                                 .equ USART2_EVCTRL = 2124                ; Event Control
                                 .equ USART2_TXPLCTRL = 2125              ; IRCOM Transmitter Pulse Length Control
                                 .equ USART2_RXPLCTRL = 2126              ; IRCOM Receiver Pulse Length Control
                                 
                                 ;*************************************************************************
                                 ;** USART3 - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 
                                 .equ USART3_RXDATAL = 2144               ; Receive Data Low Byte
                                 .equ USART3_RXDATAH = 2145               ; Receive Data High Byte
                                 .equ USART3_TXDATAL = 2146               ; Transmit Data Low Byte
                                 .equ USART3_TXDATAH = 2147               ; Transmit Data High Byte
                                 .equ USART3_STATUS = 2148                ; Status
                                 .equ USART3_CTRLA = 2149                 ; Control A
                                 .equ USART3_CTRLB = 2150                 ; Control B
                                 .equ USART3_CTRLC = 2151                 ; Control C
                                 .equ USART3_BAUD = 2152                  ; Baud Rate
                                 .equ USART3_BAUDL = 2152                 ; Baud Rate low byte
                                 .equ USART3_BAUDH = 2153                 ; Baud Rate hi byte
                                 .equ USART3_CTRLD = 2154                 ; Control D
                                 .equ USART3_DBGCTRL = 2155               ; Debug Control
                                 .equ USART3_EVCTRL = 2156                ; Event Control
                                 .equ USART3_TXPLCTRL = 2157              ; IRCOM Transmitter Pulse Length Control
                                 .equ USART3_RXPLCTRL = 2158              ; IRCOM Receiver Pulse Length Control
                                 
                                 ;*************************************************************************
                                 ;** USERROW - User Row
                                 ;*************************************************************************
                                 
                                 .equ USERROW_USERROW0 = 4864             ; User Row Byte 0
                                 .equ USERROW_USERROW1 = 4865             ; User Row Byte 1
                                 .equ USERROW_USERROW2 = 4866             ; User Row Byte 2
                                 .equ USERROW_USERROW3 = 4867             ; User Row Byte 3
                                 .equ USERROW_USERROW4 = 4868             ; User Row Byte 4
                                 .equ USERROW_USERROW5 = 4869             ; User Row Byte 5
                                 .equ USERROW_USERROW6 = 4870             ; User Row Byte 6
                                 .equ USERROW_USERROW7 = 4871             ; User Row Byte 7
                                 .equ USERROW_USERROW8 = 4872             ; User Row Byte 8
                                 .equ USERROW_USERROW9 = 4873             ; User Row Byte 9
                                 .equ USERROW_USERROW10 = 4874            ; User Row Byte 10
                                 .equ USERROW_USERROW11 = 4875            ; User Row Byte 11
                                 .equ USERROW_USERROW12 = 4876            ; User Row Byte 12
                                 .equ USERROW_USERROW13 = 4877            ; User Row Byte 13
                                 .equ USERROW_USERROW14 = 4878            ; User Row Byte 14
                                 .equ USERROW_USERROW15 = 4879            ; User Row Byte 15
                                 .equ USERROW_USERROW16 = 4880            ; User Row Byte 16
                                 .equ USERROW_USERROW17 = 4881            ; User Row Byte 17
                                 .equ USERROW_USERROW18 = 4882            ; User Row Byte 18
                                 .equ USERROW_USERROW19 = 4883            ; User Row Byte 19
                                 .equ USERROW_USERROW20 = 4884            ; User Row Byte 20
                                 .equ USERROW_USERROW21 = 4885            ; User Row Byte 21
                                 .equ USERROW_USERROW22 = 4886            ; User Row Byte 22
                                 .equ USERROW_USERROW23 = 4887            ; User Row Byte 23
                                 .equ USERROW_USERROW24 = 4888            ; User Row Byte 24
                                 .equ USERROW_USERROW25 = 4889            ; User Row Byte 25
                                 .equ USERROW_USERROW26 = 4890            ; User Row Byte 26
                                 .equ USERROW_USERROW27 = 4891            ; User Row Byte 27
                                 .equ USERROW_USERROW28 = 4892            ; User Row Byte 28
                                 .equ USERROW_USERROW29 = 4893            ; User Row Byte 29
                                 .equ USERROW_USERROW30 = 4894            ; User Row Byte 30
                                 .equ USERROW_USERROW31 = 4895            ; User Row Byte 31
                                 .equ USERROW_USERROW32 = 4896            ; User Row Byte 32
                                 .equ USERROW_USERROW33 = 4897            ; User Row Byte 33
                                 .equ USERROW_USERROW34 = 4898            ; User Row Byte 34
                                 .equ USERROW_USERROW35 = 4899            ; User Row Byte 35
                                 .equ USERROW_USERROW36 = 4900            ; User Row Byte 36
                                 .equ USERROW_USERROW37 = 4901            ; User Row Byte 37
                                 .equ USERROW_USERROW38 = 4902            ; User Row Byte 38
                                 .equ USERROW_USERROW39 = 4903            ; User Row Byte 39
                                 .equ USERROW_USERROW40 = 4904            ; User Row Byte 40
                                 .equ USERROW_USERROW41 = 4905            ; User Row Byte 41
                                 .equ USERROW_USERROW42 = 4906            ; User Row Byte 42
                                 .equ USERROW_USERROW43 = 4907            ; User Row Byte 43
                                 .equ USERROW_USERROW44 = 4908            ; User Row Byte 44
                                 .equ USERROW_USERROW45 = 4909            ; User Row Byte 45
                                 .equ USERROW_USERROW46 = 4910            ; User Row Byte 46
                                 .equ USERROW_USERROW47 = 4911            ; User Row Byte 47
                                 .equ USERROW_USERROW48 = 4912            ; User Row Byte 48
                                 .equ USERROW_USERROW49 = 4913            ; User Row Byte 49
                                 .equ USERROW_USERROW50 = 4914            ; User Row Byte 50
                                 .equ USERROW_USERROW51 = 4915            ; User Row Byte 51
                                 .equ USERROW_USERROW52 = 4916            ; User Row Byte 52
                                 .equ USERROW_USERROW53 = 4917            ; User Row Byte 53
                                 .equ USERROW_USERROW54 = 4918            ; User Row Byte 54
                                 .equ USERROW_USERROW55 = 4919            ; User Row Byte 55
                                 .equ USERROW_USERROW56 = 4920            ; User Row Byte 56
                                 .equ USERROW_USERROW57 = 4921            ; User Row Byte 57
                                 .equ USERROW_USERROW58 = 4922            ; User Row Byte 58
                                 .equ USERROW_USERROW59 = 4923            ; User Row Byte 59
                                 .equ USERROW_USERROW60 = 4924            ; User Row Byte 60
                                 .equ USERROW_USERROW61 = 4925            ; User Row Byte 61
                                 .equ USERROW_USERROW62 = 4926            ; User Row Byte 62
                                 .equ USERROW_USERROW63 = 4927            ; User Row Byte 63
                                 
                                 ;*************************************************************************
                                 ;** VPORTA - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTA_DIR = 0                      ; Data Direction
                                 .equ VPORTA_OUT = 1                      ; Output Value
                                 .equ VPORTA_IN = 2                       ; Input Value
                                 .equ VPORTA_INTFLAGS = 3                 ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VPORTB - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTB_DIR = 4                      ; Data Direction
                                 .equ VPORTB_OUT = 5                      ; Output Value
                                 .equ VPORTB_IN = 6                       ; Input Value
                                 .equ VPORTB_INTFLAGS = 7                 ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VPORTC - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTC_DIR = 8                      ; Data Direction
                                 .equ VPORTC_OUT = 9                      ; Output Value
                                 .equ VPORTC_IN = 10                      ; Input Value
                                 .equ VPORTC_INTFLAGS = 11                ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VPORTD - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTD_DIR = 12                     ; Data Direction
                                 .equ VPORTD_OUT = 13                     ; Output Value
                                 .equ VPORTD_IN = 14                      ; Input Value
                                 .equ VPORTD_INTFLAGS = 15                ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VPORTE - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTE_DIR = 16                     ; Data Direction
                                 .equ VPORTE_OUT = 17                     ; Output Value
                                 .equ VPORTE_IN = 18                      ; Input Value
                                 .equ VPORTE_INTFLAGS = 19                ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VPORTF - Virtual Ports
                                 ;*************************************************************************
                                 
                                 .equ VPORTF_DIR = 20                     ; Data Direction
                                 .equ VPORTF_OUT = 21                     ; Output Value
                                 .equ VPORTF_IN = 22                      ; Input Value
                                 .equ VPORTF_INTFLAGS = 23                ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VREF - Voltage reference
                                 ;*************************************************************************
                                 
                                 .equ VREF_CTRLA = 160                    ; Control A
                                 .equ VREF_CTRLB = 161                    ; Control B
                                 
                                 ;*************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;*************************************************************************
                                 
                                 .equ WDT_CTRLA = 256                     ; Control A
                                 .equ WDT_STATUS = 257                    ; Status
                                 
                                 
                                 ; ***** ALL MODULE BASE ADRESSES *****************************************
                                 
                                 .equ AC0_base = 0x0680                   ; Analog Comparator
                                 .equ ADC0_base = 0x0600                  ; Analog to Digital Converter
                                 .equ BOD_base = 0x0080                   ; Bod interface
                                 .equ CCL_base = 0x01C0                   ; Configurable Custom Logic
                                 .equ CLKCTRL_base = 0x0060               ; Clock controller
                                 .equ CPU_base = 0x0030                   ; CPU
                                 .equ CPUINT_base = 0x0110                ; Interrupt Controller
                                 .equ CRCSCAN_base = 0x0120               ; CRCSCAN
                                 .equ EVSYS_base = 0x0180                 ; Event System
                                 .equ FUSE_base = 0x1280                  ; Fuses
                                 .equ GPIO_base = 0x001C                  ; General Purpose IO
                                 .equ LOCKBIT_base = 0x128A               ; Lockbit
                                 .equ NVMCTRL_base = 0x1000               ; Non-volatile Memory Controller
                                 .equ PORTA_base = 0x0400                 ; I/O Ports
                                 .equ PORTB_base = 0x0420                 ; I/O Ports
                                 .equ PORTC_base = 0x0440                 ; I/O Ports
                                 .equ PORTD_base = 0x0460                 ; I/O Ports
                                 .equ PORTE_base = 0x0480                 ; I/O Ports
                                 .equ PORTF_base = 0x04A0                 ; I/O Ports
                                 .equ PORTMUX_base = 0x05E0               ; Port Multiplexer
                                 .equ RSTCTRL_base = 0x0040               ; Reset controller
                                 .equ RTC_base = 0x0140                   ; Real-Time Counter
                                 .equ SIGROW_base = 0x1100                ; Signature row
                                 .equ SLPCTRL_base = 0x0050               ; Sleep Controller
                                 .equ SPI0_base = 0x08C0                  ; Serial Peripheral Interface
                                 .equ SYSCFG_base = 0x0F00                ; System Configuration Registers
                                 .equ TCA0_base = 0x0A00                  ; 16-bit Timer/Counter Type A
                                 .equ TCB0_base = 0x0A80                  ; 16-bit Timer Type B
                                 .equ TCB1_base = 0x0A90                  ; 16-bit Timer Type B
                                 .equ TCB2_base = 0x0AA0                  ; 16-bit Timer Type B
                                 .equ TCB3_base = 0x0AB0                  ; 16-bit Timer Type B
                                 .equ TWI0_base = 0x08A0                  ; Two-Wire Interface
                                 .equ USART0_base = 0x0800                ; Universal Synchronous and Asynchronous Receiver and Transmitter
                                 .equ USART1_base = 0x0820                ; Universal Synchronous and Asynchronous Receiver and Transmitter
                                 .equ USART2_base = 0x0840                ; Universal Synchronous and Asynchronous Receiver and Transmitter
                                 .equ USART3_base = 0x0860                ; Universal Synchronous and Asynchronous Receiver and Transmitter
                                 .equ USERROW_base = 0x1300               ; User Row
                                 .equ VPORTA_base = 0x0000                ; Virtual Ports
                                 .equ VPORTB_base = 0x0004                ; Virtual Ports
                                 .equ VPORTC_base = 0x0008                ; Virtual Ports
                                 .equ VPORTD_base = 0x000C                ; Virtual Ports
                                 .equ VPORTE_base = 0x0010                ; Virtual Ports
                                 .equ VPORTF_base = 0x0014                ; Virtual Ports
                                 .equ VREF_base = 0x00A0                  ; Voltage reference
                                 .equ WDT_base = 0x0100                   ; Watch-Dog Timer
                                 
                                 
                                 ; ***** IO REGISTER OFFSETS **********************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** AC - Analog Comparator
                                 ;*************************************************************************
                                 .equ AC_CTRLA_offset = 0x00              ; Control A
                                 .equ AC_MUXCTRLA_offset = 0x02           ; Mux Control A
                                 .equ AC_DACREF_offset = 0x04             ; Referance scale control
                                 .equ AC_INTCTRL_offset = 0x06            ; Interrupt Control
                                 .equ AC_STATUS_offset = 0x07             ; Status
                                 
                                 ;*************************************************************************
                                 ;** ADC - Analog to Digital Converter
                                 ;*************************************************************************
                                 .equ ADC_CTRLA_offset = 0x00             ; Control A
                                 .equ ADC_CTRLB_offset = 0x01             ; Control B
                                 .equ ADC_CTRLC_offset = 0x02             ; Control C
                                 .equ ADC_CTRLD_offset = 0x03             ; Control D
                                 .equ ADC_CTRLE_offset = 0x04             ; Control E
                                 .equ ADC_SAMPCTRL_offset = 0x05          ; Sample Control
                                 .equ ADC_MUXPOS_offset = 0x06            ; Positive mux input
                                 .equ ADC_COMMAND_offset = 0x08           ; Command
                                 .equ ADC_EVCTRL_offset = 0x09            ; Event Control
                                 .equ ADC_INTCTRL_offset = 0x0A           ; Interrupt Control
                                 .equ ADC_INTFLAGS_offset = 0x0B          ; Interrupt Flags
                                 .equ ADC_DBGCTRL_offset = 0x0C           ; Debug Control
                                 .equ ADC_TEMP_offset = 0x0D              ; Temporary Data
                                 .equ ADC_RES_offset = 0x10               ; ADC Accumulator Result
                                 .equ ADC_WINLT_offset = 0x12             ; Window comparator low threshold
                                 .equ ADC_WINHT_offset = 0x14             ; Window comparator high threshold
                                 .equ ADC_CALIB_offset = 0x16             ; Calibration
                                 
                                 ;*************************************************************************
                                 ;** BOD - Bod interface
                                 ;*************************************************************************
                                 .equ BOD_CTRLA_offset = 0x00             ; Control A
                                 .equ BOD_CTRLB_offset = 0x01             ; Control B
                                 .equ BOD_VLMCTRLA_offset = 0x08          ; Voltage level monitor Control
                                 .equ BOD_INTCTRL_offset = 0x09           ; Voltage level monitor interrupt Control
                                 .equ BOD_INTFLAGS_offset = 0x0A          ; Voltage level monitor interrupt Flags
                                 .equ BOD_STATUS_offset = 0x0B            ; Voltage level monitor status
                                 
                                 ;*************************************************************************
                                 ;** CCL - Configurable Custom Logic
                                 ;*************************************************************************
                                 .equ CCL_CTRLA_offset = 0x00             ; Control Register A
                                 .equ CCL_SEQCTRL0_offset = 0x01          ; Sequential Control 0
                                 .equ CCL_SEQCTRL1_offset = 0x02          ; Sequential Control 1
                                 .equ CCL_INTCTRL0_offset = 0x05          ; Interrupt Control 0
                                 .equ CCL_INTFLAGS_offset = 0x07          ; Interrupt Flags
                                 .equ CCL_LUT0CTRLA_offset = 0x08         ; LUT Control 0 A
                                 .equ CCL_LUT0CTRLB_offset = 0x09         ; LUT Control 0 B
                                 .equ CCL_LUT0CTRLC_offset = 0x0A         ; LUT Control 0 C
                                 .equ CCL_TRUTH0_offset = 0x0B            ; Truth 0
                                 .equ CCL_LUT1CTRLA_offset = 0x0C         ; LUT Control 1 A
                                 .equ CCL_LUT1CTRLB_offset = 0x0D         ; LUT Control 1 B
                                 .equ CCL_LUT1CTRLC_offset = 0x0E         ; LUT Control 1 C
                                 .equ CCL_TRUTH1_offset = 0x0F            ; Truth 1
                                 .equ CCL_LUT2CTRLA_offset = 0x10         ; LUT Control 2 A
                                 .equ CCL_LUT2CTRLB_offset = 0x11         ; LUT Control 2 B
                                 .equ CCL_LUT2CTRLC_offset = 0x12         ; LUT Control 2 C
                                 .equ CCL_TRUTH2_offset = 0x13            ; Truth 2
                                 .equ CCL_LUT3CTRLA_offset = 0x14         ; LUT Control 3 A
                                 .equ CCL_LUT3CTRLB_offset = 0x15         ; LUT Control 3 B
                                 .equ CCL_LUT3CTRLC_offset = 0x16         ; LUT Control 3 C
                                 .equ CCL_TRUTH3_offset = 0x17            ; Truth 3
                                 
                                 ;*************************************************************************
                                 ;** CLKCTRL - Clock controller
                                 ;*************************************************************************
                                 .equ CLKCTRL_MCLKCTRLA_offset = 0x00     ; MCLK Control A
                                 .equ CLKCTRL_MCLKCTRLB_offset = 0x01     ; MCLK Control B
                                 .equ CLKCTRL_MCLKLOCK_offset = 0x02      ; MCLK Lock
                                 .equ CLKCTRL_MCLKSTATUS_offset = 0x03    ; MCLK Status
                                 .equ CLKCTRL_OSC20MCTRLA_offset = 0x10   ; OSC20M Control A
                                 .equ CLKCTRL_OSC20MCALIBA_offset = 0x11  ; OSC20M Calibration A
                                 .equ CLKCTRL_OSC20MCALIBB_offset = 0x12  ; OSC20M Calibration B
                                 .equ CLKCTRL_OSC32KCTRLA_offset = 0x18   ; OSC32K Control A
                                 .equ CLKCTRL_XOSC32KCTRLA_offset = 0x1C  ; XOSC32K Control A
                                 
                                 ;*************************************************************************
                                 ;** CPU - CPU
                                 ;*************************************************************************
                                 .equ CPU_CCP_offset = 0x04               ; Configuration Change Protection
                                 .equ CPU_SPL_offset = 0x0D               ; Stack Pointer Low
                                 .equ CPU_SPH_offset = 0x0E               ; Stack Pointer High
                                 .equ CPU_SREG_offset = 0x0F              ; Status Register
                                 
                                 ;*************************************************************************
                                 ;** CPUINT - Interrupt Controller
                                 ;*************************************************************************
                                 .equ CPUINT_CTRLA_offset = 0x00          ; Control A
                                 .equ CPUINT_STATUS_offset = 0x01         ; Status
                                 .equ CPUINT_LVL0PRI_offset = 0x02        ; Interrupt Level 0 Priority
                                 .equ CPUINT_LVL1VEC_offset = 0x03        ; Interrupt Level 1 Priority Vector
                                 
                                 ;*************************************************************************
                                 ;** CRCSCAN - CRCSCAN
                                 ;*************************************************************************
                                 .equ CRCSCAN_CTRLA_offset = 0x00         ; Control A
                                 .equ CRCSCAN_CTRLB_offset = 0x01         ; Control B
                                 .equ CRCSCAN_STATUS_offset = 0x02        ; Status
                                 
                                 ;*************************************************************************
                                 ;** EVSYS - Event System
                                 ;*************************************************************************
                                 .equ EVSYS_STROBE_offset = 0x00          ; Channel Strobe
                                 .equ EVSYS_CHANNEL0_offset = 0x10        ; Multiplexer Channel 0
                                 .equ EVSYS_CHANNEL1_offset = 0x11        ; Multiplexer Channel 1
                                 .equ EVSYS_CHANNEL2_offset = 0x12        ; Multiplexer Channel 2
                                 .equ EVSYS_CHANNEL3_offset = 0x13        ; Multiplexer Channel 3
                                 .equ EVSYS_CHANNEL4_offset = 0x14        ; Multiplexer Channel 4
                                 .equ EVSYS_CHANNEL5_offset = 0x15        ; Multiplexer Channel 5
                                 .equ EVSYS_CHANNEL6_offset = 0x16        ; Multiplexer Channel 6
                                 .equ EVSYS_CHANNEL7_offset = 0x17        ; Multiplexer Channel 7
                                 .equ EVSYS_USERCCLLUT0A_offset = 0x20    ; User CCL LUT0 Event A
                                 .equ EVSYS_USERCCLLUT0B_offset = 0x21    ; User CCL LUT0 Event B
                                 .equ EVSYS_USERCCLLUT1A_offset = 0x22    ; User CCL LUT1 Event A
                                 .equ EVSYS_USERCCLLUT1B_offset = 0x23    ; User CCL LUT1 Event B
                                 .equ EVSYS_USERCCLLUT2A_offset = 0x24    ; User CCL LUT2 Event A
                                 .equ EVSYS_USERCCLLUT2B_offset = 0x25    ; User CCL LUT2 Event B
                                 .equ EVSYS_USERCCLLUT3A_offset = 0x26    ; User CCL LUT3 Event A
                                 .equ EVSYS_USERCCLLUT3B_offset = 0x27    ; User CCL LUT3 Event B
                                 .equ EVSYS_USERADC0_offset = 0x28        ; User ADC0
                                 .equ EVSYS_USEREVOUTA_offset = 0x29      ; User EVOUT Port A
                                 .equ EVSYS_USEREVOUTB_offset = 0x2A      ; User EVOUT Port B
                                 .equ EVSYS_USEREVOUTC_offset = 0x2B      ; User EVOUT Port C
                                 .equ EVSYS_USEREVOUTD_offset = 0x2C      ; User EVOUT Port D
                                 .equ EVSYS_USEREVOUTE_offset = 0x2D      ; User EVOUT Port E
                                 .equ EVSYS_USEREVOUTF_offset = 0x2E      ; User EVOUT Port F
                                 .equ EVSYS_USERUSART0_offset = 0x2F      ; User USART0
                                 .equ EVSYS_USERUSART1_offset = 0x30      ; User USART1
                                 .equ EVSYS_USERUSART2_offset = 0x31      ; User USART2
                                 .equ EVSYS_USERUSART3_offset = 0x32      ; User USART3
                                 .equ EVSYS_USERTCA0_offset = 0x33        ; User TCA0
                                 .equ EVSYS_USERTCB0_offset = 0x34        ; User TCB0
                                 .equ EVSYS_USERTCB1_offset = 0x35        ; User TCB1
                                 .equ EVSYS_USERTCB2_offset = 0x36        ; User TCB2
                                 .equ EVSYS_USERTCB3_offset = 0x37        ; User TCB3
                                 
                                 ;*************************************************************************
                                 ;** FUSE - Fuses
                                 ;*************************************************************************
                                 .equ FUSE_WDTCFG_offset = 0x00           ; Watchdog Configuration
                                 .equ FUSE_BODCFG_offset = 0x01           ; BOD Configuration
                                 .equ FUSE_OSCCFG_offset = 0x02           ; Oscillator Configuration
                                 .equ FUSE_SYSCFG0_offset = 0x05          ; System Configuration 0
                                 .equ FUSE_SYSCFG1_offset = 0x06          ; System Configuration 1
                                 .equ FUSE_APPEND_offset = 0x07           ; Application Code Section End
                                 .equ FUSE_BOOTEND_offset = 0x08          ; Boot Section End
                                 
                                 ;*************************************************************************
                                 ;** GPIO - General Purpose IO
                                 ;*************************************************************************
                                 .equ GPIO_GPIOR0_offset = 0x00           ; General Purpose IO Register 0
                                 .equ GPIO_GPIOR1_offset = 0x01           ; General Purpose IO Register 1
                                 .equ GPIO_GPIOR2_offset = 0x02           ; General Purpose IO Register 2
                                 .equ GPIO_GPIOR3_offset = 0x03           ; General Purpose IO Register 3
                                 
                                 ;*************************************************************************
                                 ;** LOCKBIT - Lockbit
                                 ;*************************************************************************
                                 .equ LOCKBIT_LOCKBIT_offset = 0x00       ; Lock Bits
                                 
                                 ;*************************************************************************
                                 ;** NVMCTRL - Non-volatile Memory Controller
                                 ;*************************************************************************
                                 .equ NVMCTRL_CTRLA_offset = 0x00         ; Control A
                                 .equ NVMCTRL_CTRLB_offset = 0x01         ; Control B
                                 .equ NVMCTRL_STATUS_offset = 0x02        ; Status
                                 .equ NVMCTRL_INTCTRL_offset = 0x03       ; Interrupt Control
                                 .equ NVMCTRL_INTFLAGS_offset = 0x04      ; Interrupt Flags
                                 .equ NVMCTRL_DATA_offset = 0x06          ; Data
                                 .equ NVMCTRL_ADDR_offset = 0x08          ; Address
                                 
                                 ;*************************************************************************
                                 ;** PORT - I/O Ports
                                 ;*************************************************************************
                                 .equ PORT_DIR_offset = 0x00              ; Data Direction
                                 .equ PORT_DIRSET_offset = 0x01           ; Data Direction Set
                                 .equ PORT_DIRCLR_offset = 0x02           ; Data Direction Clear
                                 .equ PORT_DIRTGL_offset = 0x03           ; Data Direction Toggle
                                 .equ PORT_OUT_offset = 0x04              ; Output Value
                                 .equ PORT_OUTSET_offset = 0x05           ; Output Value Set
                                 .equ PORT_OUTCLR_offset = 0x06           ; Output Value Clear
                                 .equ PORT_OUTTGL_offset = 0x07           ; Output Value Toggle
                                 .equ PORT_IN_offset = 0x08               ; Input Value
                                 .equ PORT_INTFLAGS_offset = 0x09         ; Interrupt Flags
                                 .equ PORT_PORTCTRL_offset = 0x0A         ; Port Control
                                 .equ PORT_PIN0CTRL_offset = 0x10         ; Pin 0 Control
                                 .equ PORT_PIN1CTRL_offset = 0x11         ; Pin 1 Control
                                 .equ PORT_PIN2CTRL_offset = 0x12         ; Pin 2 Control
                                 .equ PORT_PIN3CTRL_offset = 0x13         ; Pin 3 Control
                                 .equ PORT_PIN4CTRL_offset = 0x14         ; Pin 4 Control
                                 .equ PORT_PIN5CTRL_offset = 0x15         ; Pin 5 Control
                                 .equ PORT_PIN6CTRL_offset = 0x16         ; Pin 6 Control
                                 .equ PORT_PIN7CTRL_offset = 0x17         ; Pin 7 Control
                                 
                                 ;*************************************************************************
                                 ;** PORTMUX - Port Multiplexer
                                 ;*************************************************************************
                                 .equ PORTMUX_EVSYSROUTEA_offset = 0x00   ; Port Multiplexer EVSYS
                                 .equ PORTMUX_CCLROUTEA_offset = 0x01     ; Port Multiplexer CCL
                                 .equ PORTMUX_USARTROUTEA_offset = 0x02   ; Port Multiplexer USART register A
                                 .equ PORTMUX_TWISPIROUTEA_offset = 0x03  ; Port Multiplexer TWI and SPI
                                 .equ PORTMUX_TCAROUTEA_offset = 0x04     ; Port Multiplexer TCA
                                 .equ PORTMUX_TCBROUTEA_offset = 0x05     ; Port Multiplexer TCB
                                 
                                 ;*************************************************************************
                                 ;** RSTCTRL - Reset controller
                                 ;*************************************************************************
                                 .equ RSTCTRL_RSTFR_offset = 0x00         ; Reset Flags
                                 .equ RSTCTRL_SWRR_offset = 0x01          ; Software Reset
                                 
                                 ;*************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;*************************************************************************
                                 .equ RTC_CTRLA_offset = 0x00             ; Control A
                                 .equ RTC_STATUS_offset = 0x01            ; Status
                                 .equ RTC_INTCTRL_offset = 0x02           ; Interrupt Control
                                 .equ RTC_INTFLAGS_offset = 0x03          ; Interrupt Flags
                                 .equ RTC_TEMP_offset = 0x04              ; Temporary
                                 .equ RTC_DBGCTRL_offset = 0x05           ; Debug control
                                 .equ RTC_CALIB_offset = 0x06             ; Calibration
                                 .equ RTC_CLKSEL_offset = 0x07            ; Clock Select
                                 .equ RTC_CNT_offset = 0x08               ; Counter
                                 .equ RTC_PER_offset = 0x0A               ; Period
                                 .equ RTC_CMP_offset = 0x0C               ; Compare
                                 .equ RTC_PITCTRLA_offset = 0x10          ; PIT Control A
                                 .equ RTC_PITSTATUS_offset = 0x11         ; PIT Status
                                 .equ RTC_PITINTCTRL_offset = 0x12        ; PIT Interrupt Control
                                 .equ RTC_PITINTFLAGS_offset = 0x13       ; PIT Interrupt Flags
                                 .equ RTC_PITDBGCTRL_offset = 0x15        ; PIT Debug control
                                 
                                 ;*************************************************************************
                                 ;** SIGROW - Signature row
                                 ;*************************************************************************
                                 .equ SIGROW_DEVICEID0_offset = 0x00      ; Device ID Byte 0
                                 .equ SIGROW_DEVICEID1_offset = 0x01      ; Device ID Byte 1
                                 .equ SIGROW_DEVICEID2_offset = 0x02      ; Device ID Byte 2
                                 .equ SIGROW_SERNUM0_offset = 0x03        ; Serial Number Byte 0
                                 .equ SIGROW_SERNUM1_offset = 0x04        ; Serial Number Byte 1
                                 .equ SIGROW_SERNUM2_offset = 0x05        ; Serial Number Byte 2
                                 .equ SIGROW_SERNUM3_offset = 0x06        ; Serial Number Byte 3
                                 .equ SIGROW_SERNUM4_offset = 0x07        ; Serial Number Byte 4
                                 .equ SIGROW_SERNUM5_offset = 0x08        ; Serial Number Byte 5
                                 .equ SIGROW_SERNUM6_offset = 0x09        ; Serial Number Byte 6
                                 .equ SIGROW_SERNUM7_offset = 0x0A        ; Serial Number Byte 7
                                 .equ SIGROW_SERNUM8_offset = 0x0B        ; Serial Number Byte 8
                                 .equ SIGROW_SERNUM9_offset = 0x0C        ; Serial Number Byte 9
                                 .equ SIGROW_OSCCAL32K_offset = 0x14      ; Oscillator Calibration for 32kHz ULP
                                 .equ SIGROW_OSCCAL16M0_offset = 0x18     ; Oscillator Calibration 16 MHz Byte 0
                                 .equ SIGROW_OSCCAL16M1_offset = 0x19     ; Oscillator Calibration 16 MHz Byte 1
                                 .equ SIGROW_OSCCAL20M0_offset = 0x1A     ; Oscillator Calibration 20 MHz Byte 0
                                 .equ SIGROW_OSCCAL20M1_offset = 0x1B     ; Oscillator Calibration 20 MHz Byte 1
                                 .equ SIGROW_TEMPSENSE0_offset = 0x20     ; Temperature Sensor Calibration Byte 0
                                 .equ SIGROW_TEMPSENSE1_offset = 0x21     ; Temperature Sensor Calibration Byte 1
                                 .equ SIGROW_OSC16ERR3V_offset = 0x22     ; OSC16 error at 3V
                                 .equ SIGROW_OSC16ERR5V_offset = 0x23     ; OSC16 error at 5V
                                 .equ SIGROW_OSC20ERR3V_offset = 0x24     ; OSC20 error at 3V
                                 .equ SIGROW_OSC20ERR5V_offset = 0x25     ; OSC20 error at 5V
                                 .equ SIGROW_CHECKSUM1_offset = 0x2F      ; CRC Checksum Byte 1
                                 
                                 ;*************************************************************************
                                 ;** SLPCTRL - Sleep Controller
                                 ;*************************************************************************
                                 .equ SLPCTRL_CTRLA_offset = 0x00         ; Control
                                 
                                 ;*************************************************************************
                                 ;** SPI - Serial Peripheral Interface
                                 ;*************************************************************************
                                 .equ SPI_CTRLA_offset = 0x00             ; Control A
                                 .equ SPI_CTRLB_offset = 0x01             ; Control B
                                 .equ SPI_INTCTRL_offset = 0x02           ; Interrupt Control
                                 .equ SPI_INTFLAGS_offset = 0x03          ; Interrupt Flags
                                 .equ SPI_DATA_offset = 0x04              ; Data
                                 
                                 ;*************************************************************************
                                 ;** SYSCFG - System Configuration Registers
                                 ;*************************************************************************
                                 .equ SYSCFG_REVID_offset = 0x01          ; Revision ID
                                 .equ SYSCFG_EXTBRK_offset = 0x02         ; External Break
                                 .equ SYSCFG_OCDM_offset = 0x18           ; OCD Message Register
                                 .equ SYSCFG_OCDMS_offset = 0x19          ; OCD Message Status
                                 
                                 ;*************************************************************************
                                 ;** TCA - 16-bit Timer/Counter Type A
                                 ;*************************************************************************
                                 .equ TCA_SINGLE_CTRLA_offset = 0x00      ; Control A
                                 .equ TCA_SINGLE_CTRLB_offset = 0x01      ; Control B
                                 .equ TCA_SINGLE_CTRLC_offset = 0x02      ; Control C
                                 .equ TCA_SINGLE_CTRLD_offset = 0x03      ; Control D
                                 .equ TCA_SINGLE_CTRLECLR_offset = 0x04   ; Control E Clear
                                 .equ TCA_SINGLE_CTRLESET_offset = 0x05   ; Control E Set
                                 .equ TCA_SINGLE_CTRLFCLR_offset = 0x06   ; Control F Clear
                                 .equ TCA_SINGLE_CTRLFSET_offset = 0x07   ; Control F Set
                                 .equ TCA_SINGLE_EVCTRL_offset = 0x09     ; Event Control
                                 .equ TCA_SINGLE_INTCTRL_offset = 0x0A    ; Interrupt Control
                                 .equ TCA_SINGLE_INTFLAGS_offset = 0x0B   ; Interrupt Flags
                                 .equ TCA_SINGLE_DBGCTRL_offset = 0x0E    ; Degbug Control
                                 .equ TCA_SINGLE_TEMP_offset = 0x0F       ; Temporary data for 16-bit Access
                                 .equ TCA_SINGLE_CNT_offset = 0x20        ; Count
                                 .equ TCA_SINGLE_PER_offset = 0x26        ; Period
                                 .equ TCA_SINGLE_CMP0_offset = 0x28       ; Compare 0
                                 .equ TCA_SINGLE_CMP1_offset = 0x2A       ; Compare 1
                                 .equ TCA_SINGLE_CMP2_offset = 0x2C       ; Compare 2
                                 .equ TCA_SINGLE_PERBUF_offset = 0x36     ; Period Buffer
                                 .equ TCA_SINGLE_CMP0BUF_offset = 0x38    ; Compare 0 Buffer
                                 .equ TCA_SINGLE_CMP1BUF_offset = 0x3A    ; Compare 1 Buffer
                                 .equ TCA_SINGLE_CMP2BUF_offset = 0x3C    ; Compare 2 Buffer
                                 .equ TCA_SPLIT_CTRLA_offset = 0x00       ; Control A
                                 .equ TCA_SPLIT_CTRLB_offset = 0x01       ; Control B
                                 .equ TCA_SPLIT_CTRLC_offset = 0x02       ; Control C
                                 .equ TCA_SPLIT_CTRLD_offset = 0x03       ; Control D
                                 .equ TCA_SPLIT_CTRLECLR_offset = 0x04    ; Control E Clear
                                 .equ TCA_SPLIT_CTRLESET_offset = 0x05    ; Control E Set
                                 .equ TCA_SPLIT_INTCTRL_offset = 0x0A     ; Interrupt Control
                                 .equ TCA_SPLIT_INTFLAGS_offset = 0x0B    ; Interrupt Flags
                                 .equ TCA_SPLIT_DBGCTRL_offset = 0x0E     ; Degbug Control
                                 .equ TCA_SPLIT_LCNT_offset = 0x20        ; Low Count
                                 .equ TCA_SPLIT_HCNT_offset = 0x21        ; High Count
                                 .equ TCA_SPLIT_LPER_offset = 0x26        ; Low Period
                                 .equ TCA_SPLIT_HPER_offset = 0x27        ; High Period
                                 .equ TCA_SPLIT_LCMP0_offset = 0x28       ; Low Compare
                                 .equ TCA_SPLIT_HCMP0_offset = 0x29       ; High Compare
                                 .equ TCA_SPLIT_LCMP1_offset = 0x2A       ; Low Compare
                                 .equ TCA_SPLIT_HCMP1_offset = 0x2B       ; High Compare
                                 .equ TCA_SPLIT_LCMP2_offset = 0x2C       ; Low Compare
                                 .equ TCA_SPLIT_HCMP2_offset = 0x2D       ; High Compare
                                 .equ TCA_SINGLE_offset = 0x00            ; 
                                 .equ TCA_SPLIT_offset = 0x00             ; 
                                 
                                 ;*************************************************************************
                                 ;** TCB - 16-bit Timer Type B
                                 ;*************************************************************************
                                 .equ TCB_CTRLA_offset = 0x00             ; Control A
                                 .equ TCB_CTRLB_offset = 0x01             ; Control Register B
                                 .equ TCB_EVCTRL_offset = 0x04            ; Event Control
                                 .equ TCB_INTCTRL_offset = 0x05           ; Interrupt Control
                                 .equ TCB_INTFLAGS_offset = 0x06          ; Interrupt Flags
                                 .equ TCB_STATUS_offset = 0x07            ; Status
                                 .equ TCB_DBGCTRL_offset = 0x08           ; Debug Control
                                 .equ TCB_TEMP_offset = 0x09              ; Temporary Value
                                 .equ TCB_CNT_offset = 0x0A               ; Count
                                 .equ TCB_CCMP_offset = 0x0C              ; Compare or Capture
                                 
                                 ;*************************************************************************
                                 ;** TWI - Two-Wire Interface
                                 ;*************************************************************************
                                 .equ TWI_CTRLA_offset = 0x00             ; Control A
                                 .equ TWI_DUALCTRL_offset = 0x01          ; Dual Control
                                 .equ TWI_DBGCTRL_offset = 0x02           ; Debug Control Register
                                 .equ TWI_MCTRLA_offset = 0x03            ; Master Control A
                                 .equ TWI_MCTRLB_offset = 0x04            ; Master Control B
                                 .equ TWI_MSTATUS_offset = 0x05           ; Master Status
                                 .equ TWI_MBAUD_offset = 0x06             ; Master Baurd Rate Control
                                 .equ TWI_MADDR_offset = 0x07             ; Master Address
                                 .equ TWI_MDATA_offset = 0x08             ; Master Data
                                 .equ TWI_SCTRLA_offset = 0x09            ; Slave Control A
                                 .equ TWI_SCTRLB_offset = 0x0A            ; Slave Control B
                                 .equ TWI_SSTATUS_offset = 0x0B           ; Slave Status
                                 .equ TWI_SADDR_offset = 0x0C             ; Slave Address
                                 .equ TWI_SDATA_offset = 0x0D             ; Slave Data
                                 .equ TWI_SADDRMASK_offset = 0x0E         ; Slave Address Mask
                                 
                                 ;*************************************************************************
                                 ;** USART - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 .equ USART_RXDATAL_offset = 0x00         ; Receive Data Low Byte
                                 .equ USART_RXDATAH_offset = 0x01         ; Receive Data High Byte
                                 .equ USART_TXDATAL_offset = 0x02         ; Transmit Data Low Byte
                                 .equ USART_TXDATAH_offset = 0x03         ; Transmit Data High Byte
                                 .equ USART_STATUS_offset = 0x04          ; Status
                                 .equ USART_CTRLA_offset = 0x05           ; Control A
                                 .equ USART_CTRLB_offset = 0x06           ; Control B
                                 .equ USART_CTRLC_offset = 0x07           ; Control C
                                 .equ USART_BAUD_offset = 0x08            ; Baud Rate
                                 .equ USART_CTRLD_offset = 0x0A           ; Control D
                                 .equ USART_DBGCTRL_offset = 0x0B         ; Debug Control
                                 .equ USART_EVCTRL_offset = 0x0C          ; Event Control
                                 .equ USART_TXPLCTRL_offset = 0x0D        ; IRCOM Transmitter Pulse Length Control
                                 .equ USART_RXPLCTRL_offset = 0x0E        ; IRCOM Receiver Pulse Length Control
                                 
                                 ;*************************************************************************
                                 ;** USERROW - User Row
                                 ;*************************************************************************
                                 .equ USERROW_USERROW0_offset = 0x00      ; User Row Byte 0
                                 .equ USERROW_USERROW1_offset = 0x01      ; User Row Byte 1
                                 .equ USERROW_USERROW2_offset = 0x02      ; User Row Byte 2
                                 .equ USERROW_USERROW3_offset = 0x03      ; User Row Byte 3
                                 .equ USERROW_USERROW4_offset = 0x04      ; User Row Byte 4
                                 .equ USERROW_USERROW5_offset = 0x05      ; User Row Byte 5
                                 .equ USERROW_USERROW6_offset = 0x06      ; User Row Byte 6
                                 .equ USERROW_USERROW7_offset = 0x07      ; User Row Byte 7
                                 .equ USERROW_USERROW8_offset = 0x08      ; User Row Byte 8
                                 .equ USERROW_USERROW9_offset = 0x09      ; User Row Byte 9
                                 .equ USERROW_USERROW10_offset = 0x0A     ; User Row Byte 10
                                 .equ USERROW_USERROW11_offset = 0x0B     ; User Row Byte 11
                                 .equ USERROW_USERROW12_offset = 0x0C     ; User Row Byte 12
                                 .equ USERROW_USERROW13_offset = 0x0D     ; User Row Byte 13
                                 .equ USERROW_USERROW14_offset = 0x0E     ; User Row Byte 14
                                 .equ USERROW_USERROW15_offset = 0x0F     ; User Row Byte 15
                                 .equ USERROW_USERROW16_offset = 0x10     ; User Row Byte 16
                                 .equ USERROW_USERROW17_offset = 0x11     ; User Row Byte 17
                                 .equ USERROW_USERROW18_offset = 0x12     ; User Row Byte 18
                                 .equ USERROW_USERROW19_offset = 0x13     ; User Row Byte 19
                                 .equ USERROW_USERROW20_offset = 0x14     ; User Row Byte 20
                                 .equ USERROW_USERROW21_offset = 0x15     ; User Row Byte 21
                                 .equ USERROW_USERROW22_offset = 0x16     ; User Row Byte 22
                                 .equ USERROW_USERROW23_offset = 0x17     ; User Row Byte 23
                                 .equ USERROW_USERROW24_offset = 0x18     ; User Row Byte 24
                                 .equ USERROW_USERROW25_offset = 0x19     ; User Row Byte 25
                                 .equ USERROW_USERROW26_offset = 0x1A     ; User Row Byte 26
                                 .equ USERROW_USERROW27_offset = 0x1B     ; User Row Byte 27
                                 .equ USERROW_USERROW28_offset = 0x1C     ; User Row Byte 28
                                 .equ USERROW_USERROW29_offset = 0x1D     ; User Row Byte 29
                                 .equ USERROW_USERROW30_offset = 0x1E     ; User Row Byte 30
                                 .equ USERROW_USERROW31_offset = 0x1F     ; User Row Byte 31
                                 .equ USERROW_USERROW32_offset = 0x20     ; User Row Byte 32
                                 .equ USERROW_USERROW33_offset = 0x21     ; User Row Byte 33
                                 .equ USERROW_USERROW34_offset = 0x22     ; User Row Byte 34
                                 .equ USERROW_USERROW35_offset = 0x23     ; User Row Byte 35
                                 .equ USERROW_USERROW36_offset = 0x24     ; User Row Byte 36
                                 .equ USERROW_USERROW37_offset = 0x25     ; User Row Byte 37
                                 .equ USERROW_USERROW38_offset = 0x26     ; User Row Byte 38
                                 .equ USERROW_USERROW39_offset = 0x27     ; User Row Byte 39
                                 .equ USERROW_USERROW40_offset = 0x28     ; User Row Byte 40
                                 .equ USERROW_USERROW41_offset = 0x29     ; User Row Byte 41
                                 .equ USERROW_USERROW42_offset = 0x2A     ; User Row Byte 42
                                 .equ USERROW_USERROW43_offset = 0x2B     ; User Row Byte 43
                                 .equ USERROW_USERROW44_offset = 0x2C     ; User Row Byte 44
                                 .equ USERROW_USERROW45_offset = 0x2D     ; User Row Byte 45
                                 .equ USERROW_USERROW46_offset = 0x2E     ; User Row Byte 46
                                 .equ USERROW_USERROW47_offset = 0x2F     ; User Row Byte 47
                                 .equ USERROW_USERROW48_offset = 0x30     ; User Row Byte 48
                                 .equ USERROW_USERROW49_offset = 0x31     ; User Row Byte 49
                                 .equ USERROW_USERROW50_offset = 0x32     ; User Row Byte 50
                                 .equ USERROW_USERROW51_offset = 0x33     ; User Row Byte 51
                                 .equ USERROW_USERROW52_offset = 0x34     ; User Row Byte 52
                                 .equ USERROW_USERROW53_offset = 0x35     ; User Row Byte 53
                                 .equ USERROW_USERROW54_offset = 0x36     ; User Row Byte 54
                                 .equ USERROW_USERROW55_offset = 0x37     ; User Row Byte 55
                                 .equ USERROW_USERROW56_offset = 0x38     ; User Row Byte 56
                                 .equ USERROW_USERROW57_offset = 0x39     ; User Row Byte 57
                                 .equ USERROW_USERROW58_offset = 0x3A     ; User Row Byte 58
                                 .equ USERROW_USERROW59_offset = 0x3B     ; User Row Byte 59
                                 .equ USERROW_USERROW60_offset = 0x3C     ; User Row Byte 60
                                 .equ USERROW_USERROW61_offset = 0x3D     ; User Row Byte 61
                                 .equ USERROW_USERROW62_offset = 0x3E     ; User Row Byte 62
                                 .equ USERROW_USERROW63_offset = 0x3F     ; User Row Byte 63
                                 
                                 ;*************************************************************************
                                 ;** VPORT - Virtual Ports
                                 ;*************************************************************************
                                 .equ VPORT_DIR_offset = 0x00             ; Data Direction
                                 .equ VPORT_OUT_offset = 0x01             ; Output Value
                                 .equ VPORT_IN_offset = 0x02              ; Input Value
                                 .equ VPORT_INTFLAGS_offset = 0x03        ; Interrupt Flags
                                 
                                 ;*************************************************************************
                                 ;** VREF - Voltage reference
                                 ;*************************************************************************
                                 .equ VREF_CTRLA_offset = 0x00            ; Control A
                                 .equ VREF_CTRLB_offset = 0x01            ; Control B
                                 
                                 ;*************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;*************************************************************************
                                 .equ WDT_CTRLA_offset = 0x00             ; Control A
                                 .equ WDT_STATUS_offset = 0x01            ; Status
                                 
                                 
                                 ; ***** LOCKBIT REGISTER LOCATIONS ***************************************
                                 
                                 
                                 
                                 
                                 ; ***** FUSE REGISTER LOCATIONS ******************************************
                                 
                                 
                                 
                                 
                                 ; ***** BIT AND VALUE DEFINITIONS ****************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** AC - Analog Comparator
                                 ;*************************************************************************
                                 
                                 ; AC_CTRLA masks
                                 .equ AC_ENABLE_bm = 0x01                 ; Enable bit mask
                                 .equ AC_ENABLE_bp = 0                    ; Enable bit position
                                 .equ AC_HYSMODE_gm = 0x06                ; Hysteresis Mode group mask
                                 .equ AC_HYSMODE_gp = 1                   ; Hysteresis Mode group position
                                 .equ AC_HYSMODE0_bm = (1<<1)             ; Hysteresis Mode bit 0 mask
                                 .equ AC_HYSMODE0_bp = 1                  ; Hysteresis Mode bit 0 position
                                 .equ AC_HYSMODE1_bm = (1<<2)             ; Hysteresis Mode bit 1 mask
                                 .equ AC_HYSMODE1_bp = 2                  ; Hysteresis Mode bit 1 position
                                 .equ AC_INTMODE_gm = 0x30                ; Interrupt Mode group mask
                                 .equ AC_INTMODE_gp = 4                   ; Interrupt Mode group position
                                 .equ AC_INTMODE0_bm = (1<<4)             ; Interrupt Mode bit 0 mask
                                 .equ AC_INTMODE0_bp = 4                  ; Interrupt Mode bit 0 position
                                 .equ AC_INTMODE1_bm = (1<<5)             ; Interrupt Mode bit 1 mask
                                 .equ AC_INTMODE1_bp = 5                  ; Interrupt Mode bit 1 position
                                 .equ AC_LPMODE_bm = 0x08                 ; Low Power Mode bit mask
                                 .equ AC_LPMODE_bp = 3                    ; Low Power Mode bit position
                                 .equ AC_OUTEN_bm = 0x40                  ; Output Buffer Enable bit mask
                                 .equ AC_OUTEN_bp = 6                     ; Output Buffer Enable bit position
                                 .equ AC_RUNSTDBY_bm = 0x80               ; Run in Standby Mode bit mask
                                 .equ AC_RUNSTDBY_bp = 7                  ; Run in Standby Mode bit position
                                 
                                 ; AC_DACREF masks
                                 .equ AC_DATA_gm = 0xFF                   ; DAC voltage reference group mask
                                 .equ AC_DATA_gp = 0                      ; DAC voltage reference group position
                                 .equ AC_DATA0_bm = (1<<0)                ; DAC voltage reference bit 0 mask
                                 .equ AC_DATA0_bp = 0                     ; DAC voltage reference bit 0 position
                                 .equ AC_DATA1_bm = (1<<1)                ; DAC voltage reference bit 1 mask
                                 .equ AC_DATA1_bp = 1                     ; DAC voltage reference bit 1 position
                                 .equ AC_DATA2_bm = (1<<2)                ; DAC voltage reference bit 2 mask
                                 .equ AC_DATA2_bp = 2                     ; DAC voltage reference bit 2 position
                                 .equ AC_DATA3_bm = (1<<3)                ; DAC voltage reference bit 3 mask
                                 .equ AC_DATA3_bp = 3                     ; DAC voltage reference bit 3 position
                                 .equ AC_DATA4_bm = (1<<4)                ; DAC voltage reference bit 4 mask
                                 .equ AC_DATA4_bp = 4                     ; DAC voltage reference bit 4 position
                                 .equ AC_DATA5_bm = (1<<5)                ; DAC voltage reference bit 5 mask
                                 .equ AC_DATA5_bp = 5                     ; DAC voltage reference bit 5 position
                                 .equ AC_DATA6_bm = (1<<6)                ; DAC voltage reference bit 6 mask
                                 .equ AC_DATA6_bp = 6                     ; DAC voltage reference bit 6 position
                                 .equ AC_DATA7_bm = (1<<7)                ; DAC voltage reference bit 7 mask
                                 .equ AC_DATA7_bp = 7                     ; DAC voltage reference bit 7 position
                                 
                                 ; AC_INTCTRL masks
                                 .equ AC_CMP_bm = 0x01                    ; Analog Comparator 0 Interrupt Enable bit mask
                                 .equ AC_CMP_bp = 0                       ; Analog Comparator 0 Interrupt Enable bit position
                                 
                                 ; AC_MUXCTRLA masks
                                 .equ AC_INVERT_bm = 0x80                 ; Invert AC Output bit mask
                                 .equ AC_INVERT_bp = 7                    ; Invert AC Output bit position
                                 .equ AC_MUXNEG_gm = 0x03                 ; Negative Input MUX Selection group mask
                                 .equ AC_MUXNEG_gp = 0                    ; Negative Input MUX Selection group position
                                 .equ AC_MUXNEG0_bm = (1<<0)              ; Negative Input MUX Selection bit 0 mask
                                 .equ AC_MUXNEG0_bp = 0                   ; Negative Input MUX Selection bit 0 position
                                 .equ AC_MUXNEG1_bm = (1<<1)              ; Negative Input MUX Selection bit 1 mask
                                 .equ AC_MUXNEG1_bp = 1                   ; Negative Input MUX Selection bit 1 position
                                 .equ AC_MUXPOS_gm = 0x18                 ; Positive Input MUX Selection group mask
                                 .equ AC_MUXPOS_gp = 3                    ; Positive Input MUX Selection group position
                                 .equ AC_MUXPOS0_bm = (1<<3)              ; Positive Input MUX Selection bit 0 mask
                                 .equ AC_MUXPOS0_bp = 3                   ; Positive Input MUX Selection bit 0 position
                                 .equ AC_MUXPOS1_bm = (1<<4)              ; Positive Input MUX Selection bit 1 mask
                                 .equ AC_MUXPOS1_bp = 4                   ; Positive Input MUX Selection bit 1 position
                                 
                                 ; AC_STATUS masks
                                 ; Masks for AC_CMP already defined
                                 .equ AC_STATE_bm = 0x10                  ; Analog Comparator State bit mask
                                 .equ AC_STATE_bp = 4                     ; Analog Comparator State bit position
                                 
                                 ; Hysteresis Mode select
                                 .equ AC_HYSMODE_OFF_gc = (0x00<<1)       ; No hysteresis
                                 .equ AC_HYSMODE_10mV_gc = (0x01<<1)      ; 10mV hysteresis
                                 .equ AC_HYSMODE_25mV_gc = (0x02<<1)      ; 25mV hysteresis
                                 .equ AC_HYSMODE_50mV_gc = (0x03<<1)      ; 50mV hysteresis
                                 
                                 ; Interrupt Mode select
                                 .equ AC_INTMODE_BOTHEDGE_gc = (0x00<<4)  ; Any Edge
                                 .equ AC_INTMODE_NEGEDGE_gc = (0x02<<4)   ; Negative Edge
                                 .equ AC_INTMODE_POSEDGE_gc = (0x03<<4)   ; Positive Edge
                                 
                                 ; Low Power Mode select
                                 .equ AC_LPMODE_DIS_gc = (0x00<<3)        ; Low power mode disabled
                                 .equ AC_LPMODE_EN_gc = (0x01<<3)         ; Low power mode enabled
                                 
                                 ; Negative Input MUX Selection select
                                 .equ AC_MUXNEG_PIN0_gc = (0x00<<0)       ; Negative Pin 0
                                 .equ AC_MUXNEG_PIN1_gc = (0x01<<0)       ; Negative Pin 1
                                 .equ AC_MUXNEG_PIN2_gc = (0x02<<0)       ; Negative Pin 2
                                 .equ AC_MUXNEG_DACREF_gc = (0x03<<0)     ; DAC Voltage Reference
                                 
                                 ; Positive Input MUX Selection select
                                 .equ AC_MUXPOS_PIN0_gc = (0x00<<3)       ; Positive Pin 0
                                 .equ AC_MUXPOS_PIN1_gc = (0x01<<3)       ; Positive Pin 1
                                 .equ AC_MUXPOS_PIN2_gc = (0x02<<3)       ; Positive Pin 2
                                 .equ AC_MUXPOS_PIN3_gc = (0x03<<3)       ; Positive Pin 3
                                 
                                 
                                 ;*************************************************************************
                                 ;** ADC - Analog to Digital Converter
                                 ;*************************************************************************
                                 
                                 ; ADC_CALIB masks
                                 .equ ADC_DUTYCYC_bm = 0x01               ; Duty Cycle bit mask
                                 .equ ADC_DUTYCYC_bp = 0                  ; Duty Cycle bit position
                                 
                                 ; ADC_COMMAND masks
                                 .equ ADC_STCONV_bm = 0x01                ; Start Conversion Operation bit mask
                                 .equ ADC_STCONV_bp = 0                   ; Start Conversion Operation bit position
                                 
                                 ; ADC_CTRLA masks
                                 .equ ADC_ENABLE_bm = 0x01                ; ADC Enable bit mask
                                 .equ ADC_ENABLE_bp = 0                   ; ADC Enable bit position
                                 .equ ADC_FREERUN_bm = 0x02               ; ADC Freerun mode bit mask
                                 .equ ADC_FREERUN_bp = 1                  ; ADC Freerun mode bit position
                                 .equ ADC_RESSEL_bm = 0x04                ; ADC Resolution bit mask
                                 .equ ADC_RESSEL_bp = 2                   ; ADC Resolution bit position
                                 .equ ADC_RUNSTBY_bm = 0x80               ; Run standby mode bit mask
                                 .equ ADC_RUNSTBY_bp = 7                  ; Run standby mode bit position
                                 
                                 ; ADC_CTRLB masks
                                 .equ ADC_SAMPNUM_gm = 0x07               ; Accumulation Samples group mask
                                 .equ ADC_SAMPNUM_gp = 0                  ; Accumulation Samples group position
                                 .equ ADC_SAMPNUM0_bm = (1<<0)            ; Accumulation Samples bit 0 mask
                                 .equ ADC_SAMPNUM0_bp = 0                 ; Accumulation Samples bit 0 position
                                 .equ ADC_SAMPNUM1_bm = (1<<1)            ; Accumulation Samples bit 1 mask
                                 .equ ADC_SAMPNUM1_bp = 1                 ; Accumulation Samples bit 1 position
                                 .equ ADC_SAMPNUM2_bm = (1<<2)            ; Accumulation Samples bit 2 mask
                                 .equ ADC_SAMPNUM2_bp = 2                 ; Accumulation Samples bit 2 position
                                 
                                 ; ADC_CTRLC masks
                                 .equ ADC_PRESC_gm = 0x07                 ; Clock Pre-scaler group mask
                                 .equ ADC_PRESC_gp = 0                    ; Clock Pre-scaler group position
                                 .equ ADC_PRESC0_bm = (1<<0)              ; Clock Pre-scaler bit 0 mask
                                 .equ ADC_PRESC0_bp = 0                   ; Clock Pre-scaler bit 0 position
                                 .equ ADC_PRESC1_bm = (1<<1)              ; Clock Pre-scaler bit 1 mask
                                 .equ ADC_PRESC1_bp = 1                   ; Clock Pre-scaler bit 1 position
                                 .equ ADC_PRESC2_bm = (1<<2)              ; Clock Pre-scaler bit 2 mask
                                 .equ ADC_PRESC2_bp = 2                   ; Clock Pre-scaler bit 2 position
                                 .equ ADC_REFSEL_gm = 0x30                ; Reference Selection group mask
                                 .equ ADC_REFSEL_gp = 4                   ; Reference Selection group position
                                 .equ ADC_REFSEL0_bm = (1<<4)             ; Reference Selection bit 0 mask
                                 .equ ADC_REFSEL0_bp = 4                  ; Reference Selection bit 0 position
                                 .equ ADC_REFSEL1_bm = (1<<5)             ; Reference Selection bit 1 mask
                                 .equ ADC_REFSEL1_bp = 5                  ; Reference Selection bit 1 position
                                 .equ ADC_SAMPCAP_bm = 0x40               ; Sample Capacitance Selection bit mask
                                 .equ ADC_SAMPCAP_bp = 6                  ; Sample Capacitance Selection bit position
                                 
                                 ; ADC_CTRLD masks
                                 .equ ADC_ASDV_bm = 0x10                  ; Automatic Sampling Delay Variation bit mask
                                 .equ ADC_ASDV_bp = 4                     ; Automatic Sampling Delay Variation bit position
                                 .equ ADC_INITDLY_gm = 0xE0               ; Initial Delay Selection group mask
                                 .equ ADC_INITDLY_gp = 5                  ; Initial Delay Selection group position
                                 .equ ADC_INITDLY0_bm = (1<<5)            ; Initial Delay Selection bit 0 mask
                                 .equ ADC_INITDLY0_bp = 5                 ; Initial Delay Selection bit 0 position
                                 .equ ADC_INITDLY1_bm = (1<<6)            ; Initial Delay Selection bit 1 mask
                                 .equ ADC_INITDLY1_bp = 6                 ; Initial Delay Selection bit 1 position
                                 .equ ADC_INITDLY2_bm = (1<<7)            ; Initial Delay Selection bit 2 mask
                                 .equ ADC_INITDLY2_bp = 7                 ; Initial Delay Selection bit 2 position
                                 .equ ADC_SAMPDLY_gm = 0x0F               ; Sampling Delay Selection group mask
                                 .equ ADC_SAMPDLY_gp = 0                  ; Sampling Delay Selection group position
                                 .equ ADC_SAMPDLY0_bm = (1<<0)            ; Sampling Delay Selection bit 0 mask
                                 .equ ADC_SAMPDLY0_bp = 0                 ; Sampling Delay Selection bit 0 position
                                 .equ ADC_SAMPDLY1_bm = (1<<1)            ; Sampling Delay Selection bit 1 mask
                                 .equ ADC_SAMPDLY1_bp = 1                 ; Sampling Delay Selection bit 1 position
                                 .equ ADC_SAMPDLY2_bm = (1<<2)            ; Sampling Delay Selection bit 2 mask
                                 .equ ADC_SAMPDLY2_bp = 2                 ; Sampling Delay Selection bit 2 position
                                 .equ ADC_SAMPDLY3_bm = (1<<3)            ; Sampling Delay Selection bit 3 mask
                                 .equ ADC_SAMPDLY3_bp = 3                 ; Sampling Delay Selection bit 3 position
                                 
                                 ; ADC_CTRLE masks
                                 .equ ADC_WINCM_gm = 0x07                 ; Window Comparator Mode group mask
                                 .equ ADC_WINCM_gp = 0                    ; Window Comparator Mode group position
                                 .equ ADC_WINCM0_bm = (1<<0)              ; Window Comparator Mode bit 0 mask
                                 .equ ADC_WINCM0_bp = 0                   ; Window Comparator Mode bit 0 position
                                 .equ ADC_WINCM1_bm = (1<<1)              ; Window Comparator Mode bit 1 mask
                                 .equ ADC_WINCM1_bp = 1                   ; Window Comparator Mode bit 1 position
                                 .equ ADC_WINCM2_bm = (1<<2)              ; Window Comparator Mode bit 2 mask
                                 .equ ADC_WINCM2_bp = 2                   ; Window Comparator Mode bit 2 position
                                 
                                 ; ADC_DBGCTRL masks
                                 .equ ADC_DBGRUN_bm = 0x01                ; Debug run bit mask
                                 .equ ADC_DBGRUN_bp = 0                   ; Debug run bit position
                                 
                                 ; ADC_EVCTRL masks
                                 .equ ADC_STARTEI_bm = 0x01               ; Start Event Input Enable bit mask
                                 .equ ADC_STARTEI_bp = 0                  ; Start Event Input Enable bit position
                                 
                                 ; ADC_INTCTRL masks
                                 .equ ADC_RESRDY_bm = 0x01                ; Result Ready Interrupt Enable bit mask
                                 .equ ADC_RESRDY_bp = 0                   ; Result Ready Interrupt Enable bit position
                                 .equ ADC_WCMP_bm = 0x02                  ; Window Comparator Interrupt Enable bit mask
                                 .equ ADC_WCMP_bp = 1                     ; Window Comparator Interrupt Enable bit position
                                 
                                 ; ADC_INTFLAGS masks
                                 ; Masks for ADC_RESRDY already defined
                                 ; Masks for ADC_WCMP already defined
                                 
                                 ; ADC_MUXPOS masks
                                 .equ ADC_MUXPOS_gm = 0x1F                ; Analog Channel Selection Bits group mask
                                 .equ ADC_MUXPOS_gp = 0                   ; Analog Channel Selection Bits group position
                                 .equ ADC_MUXPOS0_bm = (1<<0)             ; Analog Channel Selection Bits bit 0 mask
                                 .equ ADC_MUXPOS0_bp = 0                  ; Analog Channel Selection Bits bit 0 position
                                 .equ ADC_MUXPOS1_bm = (1<<1)             ; Analog Channel Selection Bits bit 1 mask
                                 .equ ADC_MUXPOS1_bp = 1                  ; Analog Channel Selection Bits bit 1 position
                                 .equ ADC_MUXPOS2_bm = (1<<2)             ; Analog Channel Selection Bits bit 2 mask
                                 .equ ADC_MUXPOS2_bp = 2                  ; Analog Channel Selection Bits bit 2 position
                                 .equ ADC_MUXPOS3_bm = (1<<3)             ; Analog Channel Selection Bits bit 3 mask
                                 .equ ADC_MUXPOS3_bp = 3                  ; Analog Channel Selection Bits bit 3 position
                                 .equ ADC_MUXPOS4_bm = (1<<4)             ; Analog Channel Selection Bits bit 4 mask
                                 .equ ADC_MUXPOS4_bp = 4                  ; Analog Channel Selection Bits bit 4 position
                                 
                                 ; ADC_SAMPCTRL masks
                                 .equ ADC_SAMPLEN_gm = 0x1F               ; Sample lenght group mask
                                 .equ ADC_SAMPLEN_gp = 0                  ; Sample lenght group position
                                 .equ ADC_SAMPLEN0_bm = (1<<0)            ; Sample lenght bit 0 mask
                                 .equ ADC_SAMPLEN0_bp = 0                 ; Sample lenght bit 0 position
                                 .equ ADC_SAMPLEN1_bm = (1<<1)            ; Sample lenght bit 1 mask
                                 .equ ADC_SAMPLEN1_bp = 1                 ; Sample lenght bit 1 position
                                 .equ ADC_SAMPLEN2_bm = (1<<2)            ; Sample lenght bit 2 mask
                                 .equ ADC_SAMPLEN2_bp = 2                 ; Sample lenght bit 2 position
                                 .equ ADC_SAMPLEN3_bm = (1<<3)            ; Sample lenght bit 3 mask
                                 .equ ADC_SAMPLEN3_bp = 3                 ; Sample lenght bit 3 position
                                 .equ ADC_SAMPLEN4_bm = (1<<4)            ; Sample lenght bit 4 mask
                                 .equ ADC_SAMPLEN4_bp = 4                 ; Sample lenght bit 4 position
                                 
                                 ; ADC_TEMP masks
                                 .equ ADC_TEMP_gm = 0xFF                  ; Temporary group mask
                                 .equ ADC_TEMP_gp = 0                     ; Temporary group position
                                 .equ ADC_TEMP0_bm = (1<<0)               ; Temporary bit 0 mask
                                 .equ ADC_TEMP0_bp = 0                    ; Temporary bit 0 position
                                 .equ ADC_TEMP1_bm = (1<<1)               ; Temporary bit 1 mask
                                 .equ ADC_TEMP1_bp = 1                    ; Temporary bit 1 position
                                 .equ ADC_TEMP2_bm = (1<<2)               ; Temporary bit 2 mask
                                 .equ ADC_TEMP2_bp = 2                    ; Temporary bit 2 position
                                 .equ ADC_TEMP3_bm = (1<<3)               ; Temporary bit 3 mask
                                 .equ ADC_TEMP3_bp = 3                    ; Temporary bit 3 position
                                 .equ ADC_TEMP4_bm = (1<<4)               ; Temporary bit 4 mask
                                 .equ ADC_TEMP4_bp = 4                    ; Temporary bit 4 position
                                 .equ ADC_TEMP5_bm = (1<<5)               ; Temporary bit 5 mask
                                 .equ ADC_TEMP5_bp = 5                    ; Temporary bit 5 position
                                 .equ ADC_TEMP6_bm = (1<<6)               ; Temporary bit 6 mask
                                 .equ ADC_TEMP6_bp = 6                    ; Temporary bit 6 position
                                 .equ ADC_TEMP7_bm = (1<<7)               ; Temporary bit 7 mask
                                 .equ ADC_TEMP7_bp = 7                    ; Temporary bit 7 position
                                 
                                 ; Duty Cycle select
                                 .equ ADC_DUTYCYC_DUTY50_gc = (0x00<<0)   ; 50% Duty cycle
                                 .equ ADC_DUTYCYC_DUTY25_gc = (0x01<<0)   ; 25% Duty cycle
                                 
                                 ; ADC Resolution select
                                 .equ ADC_RESSEL_10BIT_gc = (0x00<<2)     ; 10-bit mode
                                 .equ ADC_RESSEL_8BIT_gc = (0x01<<2)      ; 8-bit mode
                                 
                                 ; Accumulation Samples select
                                 .equ ADC_SAMPNUM_ACC1_gc = (0x00<<0)     ; 1 ADC sample
                                 .equ ADC_SAMPNUM_ACC2_gc = (0x01<<0)     ; Accumulate 2 samples
                                 .equ ADC_SAMPNUM_ACC4_gc = (0x02<<0)     ; Accumulate 4 samples
                                 .equ ADC_SAMPNUM_ACC8_gc = (0x03<<0)     ; Accumulate 8 samples
                                 .equ ADC_SAMPNUM_ACC16_gc = (0x04<<0)    ; Accumulate 16 samples
                                 .equ ADC_SAMPNUM_ACC32_gc = (0x05<<0)    ; Accumulate 32 samples
                                 .equ ADC_SAMPNUM_ACC64_gc = (0x06<<0)    ; Accumulate 64 samples
                                 
                                 ; Clock Pre-scaler select
                                 .equ ADC_PRESC_DIV2_gc = (0x00<<0)       ; CLK_PER divided by 2
                                 .equ ADC_PRESC_DIV4_gc = (0x01<<0)       ; CLK_PER divided by 4
                                 .equ ADC_PRESC_DIV8_gc = (0x02<<0)       ; CLK_PER divided by 8
                                 .equ ADC_PRESC_DIV16_gc = (0x03<<0)      ; CLK_PER divided by 16
                                 .equ ADC_PRESC_DIV32_gc = (0x04<<0)      ; CLK_PER divided by 32
                                 .equ ADC_PRESC_DIV64_gc = (0x05<<0)      ; CLK_PER divided by 64
                                 .equ ADC_PRESC_DIV128_gc = (0x06<<0)     ; CLK_PER divided by 128
                                 .equ ADC_PRESC_DIV256_gc = (0x07<<0)     ; CLK_PER divided by 256
                                 
                                 ; Reference Selection select
                                 .equ ADC_REFSEL_INTREF_gc = (0x00<<4)    ; Internal reference
                                 .equ ADC_REFSEL_VDDREF_gc = (0x01<<4)    ; VDD
                                 .equ ADC_REFSEL_VREFA_gc = (0x02<<4)     ; External reference
                                 
                                 ; Automatic Sampling Delay Variation select
                                 .equ ADC_ASDV_ASVOFF_gc = (0x00<<4)      ; The Automatic Sampling Delay Variation is disabled
                                 .equ ADC_ASDV_ASVON_gc = (0x01<<4)       ; The Automatic Sampling Delay Variation is enabled
                                 
                                 ; Initial Delay Selection select
                                 .equ ADC_INITDLY_DLY0_gc = (0x00<<5)     ; Delay 0 CLK_ADC cycles
                                 .equ ADC_INITDLY_DLY16_gc = (0x01<<5)    ; Delay 16 CLK_ADC cycles
                                 .equ ADC_INITDLY_DLY32_gc = (0x02<<5)    ; Delay 32 CLK_ADC cycles
                                 .equ ADC_INITDLY_DLY64_gc = (0x03<<5)    ; Delay 64 CLK_ADC cycles
                                 .equ ADC_INITDLY_DLY128_gc = (0x04<<5)   ; Delay 128 CLK_ADC cycles
                                 .equ ADC_INITDLY_DLY256_gc = (0x05<<5)   ; Delay 256 CLK_ADC cycles
                                 
                                 ; Window Comparator Mode select
                                 .equ ADC_WINCM_NONE_gc = (0x00<<0)       ; No Window Comparison
                                 .equ ADC_WINCM_BELOW_gc = (0x01<<0)      ; Below Window
                                 .equ ADC_WINCM_ABOVE_gc = (0x02<<0)      ; Above Window
                                 .equ ADC_WINCM_INSIDE_gc = (0x03<<0)     ; Inside Window
                                 .equ ADC_WINCM_OUTSIDE_gc = (0x04<<0)    ; Outside Window
                                 
                                 ; Analog Channel Selection Bits select
                                 .equ ADC_MUXPOS_AIN0_gc = (0x00<<0)      ; ADC input pin 0
                                 .equ ADC_MUXPOS_AIN1_gc = (0x01<<0)      ; ADC input pin 1
                                 .equ ADC_MUXPOS_AIN2_gc = (0x02<<0)      ; ADC input pin 2
                                 .equ ADC_MUXPOS_AIN3_gc = (0x03<<0)      ; ADC input pin 3
                                 .equ ADC_MUXPOS_AIN4_gc = (0x04<<0)      ; ADC input pin 4
                                 .equ ADC_MUXPOS_AIN5_gc = (0x05<<0)      ; ADC input pin 5
                                 .equ ADC_MUXPOS_AIN6_gc = (0x06<<0)      ; ADC input pin 6
                                 .equ ADC_MUXPOS_AIN7_gc = (0x07<<0)      ; ADC input pin 7
                                 .equ ADC_MUXPOS_AIN8_gc = (0x08<<0)      ; ADC input pin 8
                                 .equ ADC_MUXPOS_AIN9_gc = (0x09<<0)      ; ADC input pin 9
                                 .equ ADC_MUXPOS_AIN10_gc = (0x0A<<0)     ; ADC input pin 10
                                 .equ ADC_MUXPOS_AIN11_gc = (0x0B<<0)     ; ADC input pin 11
                                 .equ ADC_MUXPOS_AIN12_gc = (0x0C<<0)     ; ADC input pin 12
                                 .equ ADC_MUXPOS_AIN13_gc = (0x0D<<0)     ; ADC input pin 13
                                 .equ ADC_MUXPOS_AIN14_gc = (0x0E<<0)     ; ADC input pin 14
                                 .equ ADC_MUXPOS_AIN15_gc = (0x0F<<0)     ; ADC input pin 15
                                 .equ ADC_MUXPOS_DACREF_gc = (0x1C<<0)    ; AC DAC Reference
                                 .equ ADC_MUXPOS_TEMPSENSE_gc = (0x1E<<0) ; Temperature sensor
                                 .equ ADC_MUXPOS_GND_gc = (0x1F<<0)       ; 0V (GND)
                                 
                                 
                                 ;*************************************************************************
                                 ;** BOD - Bod interface
                                 ;*************************************************************************
                                 
                                 ; BOD_CTRLA masks
                                 .equ BOD_ACTIVE_gm = 0x0C                ; Operation in active mode group mask
                                 .equ BOD_ACTIVE_gp = 2                   ; Operation in active mode group position
                                 .equ BOD_ACTIVE0_bm = (1<<2)             ; Operation in active mode bit 0 mask
                                 .equ BOD_ACTIVE0_bp = 2                  ; Operation in active mode bit 0 position
                                 .equ BOD_ACTIVE1_bm = (1<<3)             ; Operation in active mode bit 1 mask
                                 .equ BOD_ACTIVE1_bp = 3                  ; Operation in active mode bit 1 position
                                 .equ BOD_SAMPFREQ_bm = 0x10              ; Sample frequency bit mask
                                 .equ BOD_SAMPFREQ_bp = 4                 ; Sample frequency bit position
                                 .equ BOD_SLEEP_gm = 0x03                 ; Operation in sleep mode group mask
                                 .equ BOD_SLEEP_gp = 0                    ; Operation in sleep mode group position
                                 .equ BOD_SLEEP0_bm = (1<<0)              ; Operation in sleep mode bit 0 mask
                                 .equ BOD_SLEEP0_bp = 0                   ; Operation in sleep mode bit 0 position
                                 .equ BOD_SLEEP1_bm = (1<<1)              ; Operation in sleep mode bit 1 mask
                                 .equ BOD_SLEEP1_bp = 1                   ; Operation in sleep mode bit 1 position
                                 
                                 ; BOD_CTRLB masks
                                 .equ BOD_LVL_gm = 0x07                   ; Bod level group mask
                                 .equ BOD_LVL_gp = 0                      ; Bod level group position
                                 .equ BOD_LVL0_bm = (1<<0)                ; Bod level bit 0 mask
                                 .equ BOD_LVL0_bp = 0                     ; Bod level bit 0 position
                                 .equ BOD_LVL1_bm = (1<<1)                ; Bod level bit 1 mask
                                 .equ BOD_LVL1_bp = 1                     ; Bod level bit 1 position
                                 .equ BOD_LVL2_bm = (1<<2)                ; Bod level bit 2 mask
                                 .equ BOD_LVL2_bp = 2                     ; Bod level bit 2 position
                                 
                                 ; BOD_INTCTRL masks
                                 .equ BOD_VLMCFG_gm = 0x06                ; Configuration group mask
                                 .equ BOD_VLMCFG_gp = 1                   ; Configuration group position
                                 .equ BOD_VLMCFG0_bm = (1<<1)             ; Configuration bit 0 mask
                                 .equ BOD_VLMCFG0_bp = 1                  ; Configuration bit 0 position
                                 .equ BOD_VLMCFG1_bm = (1<<2)             ; Configuration bit 1 mask
                                 .equ BOD_VLMCFG1_bp = 2                  ; Configuration bit 1 position
                                 .equ BOD_VLMIE_bm = 0x01                 ; voltage level monitor interrrupt enable bit mask
                                 .equ BOD_VLMIE_bp = 0                    ; voltage level monitor interrrupt enable bit position
                                 
                                 ; BOD_INTFLAGS masks
                                 .equ BOD_VLMIF_bm = 0x01                 ; Voltage level monitor interrupt flag bit mask
                                 .equ BOD_VLMIF_bp = 0                    ; Voltage level monitor interrupt flag bit position
                                 
                                 ; BOD_STATUS masks
                                 .equ BOD_VLMS_bm = 0x01                  ; Voltage level monitor status bit mask
                                 .equ BOD_VLMS_bp = 0                     ; Voltage level monitor status bit position
                                 
                                 ; BOD_VLMCTRLA masks
                                 .equ BOD_VLMLVL_gm = 0x03                ; voltage level monitor level group mask
                                 .equ BOD_VLMLVL_gp = 0                   ; voltage level monitor level group position
                                 .equ BOD_VLMLVL0_bm = (1<<0)             ; voltage level monitor level bit 0 mask
                                 .equ BOD_VLMLVL0_bp = 0                  ; voltage level monitor level bit 0 position
                                 .equ BOD_VLMLVL1_bm = (1<<1)             ; voltage level monitor level bit 1 mask
                                 .equ BOD_VLMLVL1_bp = 1                  ; voltage level monitor level bit 1 position
                                 
                                 ; Operation in active mode select
                                 .equ BOD_ACTIVE_DIS_gc = (0x00<<2)       ; Disabled
                                 .equ BOD_ACTIVE_ENABLED_gc = (0x01<<2)   ; Enabled
                                 .equ BOD_ACTIVE_SAMPLED_gc = (0x02<<2)   ; Sampled
                                 .equ BOD_ACTIVE_ENWAKE_gc = (0x03<<2)    ; Enabled with wake-up halted until BOD is ready
                                 
                                 ; Sample frequency select
                                 .equ BOD_SAMPFREQ_1KHZ_gc = (0x00<<4)    ; 1kHz sampling frequency
                                 .equ BOD_SAMPFREQ_125HZ_gc = (0x01<<4)   ; 125Hz sampling frequency
                                 
                                 ; Operation in sleep mode select
                                 .equ BOD_SLEEP_DIS_gc = (0x00<<0)        ; Disabled
                                 .equ BOD_SLEEP_ENABLED_gc = (0x01<<0)    ; Enabled
                                 .equ BOD_SLEEP_SAMPLED_gc = (0x02<<0)    ; Sampled
                                 
                                 ; Bod level select
                                 .equ BOD_LVL_BODLEVEL0_gc = (0x00<<0)    ; 1.8 V
                                 .equ BOD_LVL_BODLEVEL1_gc = (0x01<<0)    ; 2.1 V
                                 .equ BOD_LVL_BODLEVEL2_gc = (0x02<<0)    ; 2.6 V
                                 .equ BOD_LVL_BODLEVEL3_gc = (0x03<<0)    ; 2.9 V
                                 .equ BOD_LVL_BODLEVEL4_gc = (0x04<<0)    ; 3.3 V
                                 .equ BOD_LVL_BODLEVEL5_gc = (0x05<<0)    ; 3.7 V
                                 .equ BOD_LVL_BODLEVEL6_gc = (0x06<<0)    ; 4.0 V
                                 .equ BOD_LVL_BODLEVEL7_gc = (0x07<<0)    ; 4.2 V
                                 
                                 ; Configuration select
                                 .equ BOD_VLMCFG_BELOW_gc = (0x00<<1)     ; Interrupt when supply goes below VLM level
                                 .equ BOD_VLMCFG_ABOVE_gc = (0x01<<1)     ; Interrupt when supply goes above VLM level
                                 .equ BOD_VLMCFG_CROSS_gc = (0x02<<1)     ; Interrupt when supply crosses VLM level
                                 
                                 ; voltage level monitor level select
                                 .equ BOD_VLMLVL_5ABOVE_gc = (0x00<<0)    ; VLM threshold 5% above BOD level
                                 .equ BOD_VLMLVL_15ABOVE_gc = (0x01<<0)   ; VLM threshold 15% above BOD level
                                 .equ BOD_VLMLVL_25ABOVE_gc = (0x02<<0)   ; VLM threshold 25% above BOD level
                                 
                                 
                                 ;*************************************************************************
                                 ;** CCL - Configurable Custom Logic
                                 ;*************************************************************************
                                 
                                 ; CCL_CTRLA masks
                                 .equ CCL_ENABLE_bm = 0x01                ; Enable bit mask
                                 .equ CCL_ENABLE_bp = 0                   ; Enable bit position
                                 .equ CCL_RUNSTDBY_bm = 0x40              ; Run in Standby bit mask
                                 .equ CCL_RUNSTDBY_bp = 6                 ; Run in Standby bit position
                                 
                                 ; CCL_INTCTRL0 masks
                                 .equ CCL_INTMODE0_gm = 0x03              ; Interrupt Mode for LUT0 group mask
                                 .equ CCL_INTMODE0_gp = 0                 ; Interrupt Mode for LUT0 group position
                                 .equ CCL_INTMODE00_bm = (1<<0)           ; Interrupt Mode for LUT0 bit 0 mask
                                 .equ CCL_INTMODE00_bp = 0                ; Interrupt Mode for LUT0 bit 0 position
                                 .equ CCL_INTMODE01_bm = (1<<1)           ; Interrupt Mode for LUT0 bit 1 mask
                                 .equ CCL_INTMODE01_bp = 1                ; Interrupt Mode for LUT0 bit 1 position
                                 .equ CCL_INTMODE1_gm = 0x0C              ; Interrupt Mode for LUT1 group mask
                                 .equ CCL_INTMODE1_gp = 2                 ; Interrupt Mode for LUT1 group position
                                 .equ CCL_INTMODE10_bm = (1<<2)           ; Interrupt Mode for LUT1 bit 0 mask
                                 .equ CCL_INTMODE10_bp = 2                ; Interrupt Mode for LUT1 bit 0 position
                                 .equ CCL_INTMODE11_bm = (1<<3)           ; Interrupt Mode for LUT1 bit 1 mask
                                 .equ CCL_INTMODE11_bp = 3                ; Interrupt Mode for LUT1 bit 1 position
                                 .equ CCL_INTMODE2_gm = 0x30              ; Interrupt Mode for LUT2 group mask
                                 .equ CCL_INTMODE2_gp = 4                 ; Interrupt Mode for LUT2 group position
                                 .equ CCL_INTMODE20_bm = (1<<4)           ; Interrupt Mode for LUT2 bit 0 mask
                                 .equ CCL_INTMODE20_bp = 4                ; Interrupt Mode for LUT2 bit 0 position
                                 .equ CCL_INTMODE21_bm = (1<<5)           ; Interrupt Mode for LUT2 bit 1 mask
                                 .equ CCL_INTMODE21_bp = 5                ; Interrupt Mode for LUT2 bit 1 position
                                 .equ CCL_INTMODE3_gm = 0xC0              ; Interrupt Mode for LUT3 group mask
                                 .equ CCL_INTMODE3_gp = 6                 ; Interrupt Mode for LUT3 group position
                                 .equ CCL_INTMODE30_bm = (1<<6)           ; Interrupt Mode for LUT3 bit 0 mask
                                 .equ CCL_INTMODE30_bp = 6                ; Interrupt Mode for LUT3 bit 0 position
                                 .equ CCL_INTMODE31_bm = (1<<7)           ; Interrupt Mode for LUT3 bit 1 mask
                                 .equ CCL_INTMODE31_bp = 7                ; Interrupt Mode for LUT3 bit 1 position
                                 
                                 ; CCL_INTFLAGS masks
                                 .equ CCL_INT_gm = 0x0F                   ; Interrupt Flags group mask
                                 .equ CCL_INT_gp = 0                      ; Interrupt Flags group position
                                 .equ CCL_INT0_bm = (1<<0)                ; Interrupt Flags bit 0 mask
                                 .equ CCL_INT0_bp = 0                     ; Interrupt Flags bit 0 position
                                 .equ CCL_INT1_bm = (1<<1)                ; Interrupt Flags bit 1 mask
                                 .equ CCL_INT1_bp = 1                     ; Interrupt Flags bit 1 position
                                 .equ CCL_INT2_bm = (1<<2)                ; Interrupt Flags bit 2 mask
                                 .equ CCL_INT2_bp = 2                     ; Interrupt Flags bit 2 position
                                 .equ CCL_INT3_bm = (1<<3)                ; Interrupt Flags bit 3 mask
                                 .equ CCL_INT3_bp = 3                     ; Interrupt Flags bit 3 position
                                 
                                 ; CCL_LUT0CTRLA masks
                                 .equ CCL_CLKSRC_gm = 0x0E                ; Clock Source Selection group mask
                                 .equ CCL_CLKSRC_gp = 1                   ; Clock Source Selection group position
                                 .equ CCL_CLKSRC0_bm = (1<<1)             ; Clock Source Selection bit 0 mask
                                 .equ CCL_CLKSRC0_bp = 1                  ; Clock Source Selection bit 0 position
                                 .equ CCL_CLKSRC1_bm = (1<<2)             ; Clock Source Selection bit 1 mask
                                 .equ CCL_CLKSRC1_bp = 2                  ; Clock Source Selection bit 1 position
                                 .equ CCL_CLKSRC2_bm = (1<<3)             ; Clock Source Selection bit 2 mask
                                 .equ CCL_CLKSRC2_bp = 3                  ; Clock Source Selection bit 2 position
                                 .equ CCL_EDGEDET_bm = 0x80               ; Edge Detection Enable bit mask
                                 .equ CCL_EDGEDET_bp = 7                  ; Edge Detection Enable bit position
                                 ; Masks for CCL_ENABLE already defined
                                 .equ CCL_FILTSEL_gm = 0x30               ; Filter Selection group mask
                                 .equ CCL_FILTSEL_gp = 4                  ; Filter Selection group position
                                 .equ CCL_FILTSEL0_bm = (1<<4)            ; Filter Selection bit 0 mask
                                 .equ CCL_FILTSEL0_bp = 4                 ; Filter Selection bit 0 position
                                 .equ CCL_FILTSEL1_bm = (1<<5)            ; Filter Selection bit 1 mask
                                 .equ CCL_FILTSEL1_bp = 5                 ; Filter Selection bit 1 position
                                 .equ CCL_OUTEN_bm = 0x40                 ; Output Enable bit mask
                                 .equ CCL_OUTEN_bp = 6                    ; Output Enable bit position
                                 
                                 ; CCL_LUT0CTRLB masks
                                 .equ CCL_INSEL0_gm = 0x0F                ; LUT Input 0 Source Selection group mask
                                 .equ CCL_INSEL0_gp = 0                   ; LUT Input 0 Source Selection group position
                                 .equ CCL_INSEL00_bm = (1<<0)             ; LUT Input 0 Source Selection bit 0 mask
                                 .equ CCL_INSEL00_bp = 0                  ; LUT Input 0 Source Selection bit 0 position
                                 .equ CCL_INSEL01_bm = (1<<1)             ; LUT Input 0 Source Selection bit 1 mask
                                 .equ CCL_INSEL01_bp = 1                  ; LUT Input 0 Source Selection bit 1 position
                                 .equ CCL_INSEL02_bm = (1<<2)             ; LUT Input 0 Source Selection bit 2 mask
                                 .equ CCL_INSEL02_bp = 2                  ; LUT Input 0 Source Selection bit 2 position
                                 .equ CCL_INSEL03_bm = (1<<3)             ; LUT Input 0 Source Selection bit 3 mask
                                 .equ CCL_INSEL03_bp = 3                  ; LUT Input 0 Source Selection bit 3 position
                                 .equ CCL_INSEL1_gm = 0xF0                ; LUT Input 1 Source Selection group mask
                                 .equ CCL_INSEL1_gp = 4                   ; LUT Input 1 Source Selection group position
                                 .equ CCL_INSEL10_bm = (1<<4)             ; LUT Input 1 Source Selection bit 0 mask
                                 .equ CCL_INSEL10_bp = 4                  ; LUT Input 1 Source Selection bit 0 position
                                 .equ CCL_INSEL11_bm = (1<<5)             ; LUT Input 1 Source Selection bit 1 mask
                                 .equ CCL_INSEL11_bp = 5                  ; LUT Input 1 Source Selection bit 1 position
                                 .equ CCL_INSEL12_bm = (1<<6)             ; LUT Input 1 Source Selection bit 2 mask
                                 .equ CCL_INSEL12_bp = 6                  ; LUT Input 1 Source Selection bit 2 position
                                 .equ CCL_INSEL13_bm = (1<<7)             ; LUT Input 1 Source Selection bit 3 mask
                                 .equ CCL_INSEL13_bp = 7                  ; LUT Input 1 Source Selection bit 3 position
                                 
                                 ; CCL_LUT0CTRLC masks
                                 .equ CCL_INSEL2_gm = 0x0F                ; LUT Input 2 Source Selection group mask
                                 .equ CCL_INSEL2_gp = 0                   ; LUT Input 2 Source Selection group position
                                 .equ CCL_INSEL20_bm = (1<<0)             ; LUT Input 2 Source Selection bit 0 mask
                                 .equ CCL_INSEL20_bp = 0                  ; LUT Input 2 Source Selection bit 0 position
                                 .equ CCL_INSEL21_bm = (1<<1)             ; LUT Input 2 Source Selection bit 1 mask
                                 .equ CCL_INSEL21_bp = 1                  ; LUT Input 2 Source Selection bit 1 position
                                 .equ CCL_INSEL22_bm = (1<<2)             ; LUT Input 2 Source Selection bit 2 mask
                                 .equ CCL_INSEL22_bp = 2                  ; LUT Input 2 Source Selection bit 2 position
                                 .equ CCL_INSEL23_bm = (1<<3)             ; LUT Input 2 Source Selection bit 3 mask
                                 .equ CCL_INSEL23_bp = 3                  ; LUT Input 2 Source Selection bit 3 position
                                 
                                 ; CCL_LUT1CTRLA masks
                                 ; Masks for CCL_CLKSRC already defined
                                 ; Masks for CCL_EDGEDET already defined
                                 ; Masks for CCL_ENABLE already defined
                                 ; Masks for CCL_FILTSEL already defined
                                 ; Masks for CCL_OUTEN already defined
                                 
                                 ; CCL_LUT1CTRLB masks
                                 ; Masks for CCL_INSEL0 already defined
                                 ; Masks for CCL_INSEL1 already defined
                                 
                                 ; CCL_LUT1CTRLC masks
                                 ; Masks for CCL_INSEL2 already defined
                                 
                                 ; CCL_LUT2CTRLA masks
                                 ; Masks for CCL_CLKSRC already defined
                                 ; Masks for CCL_EDGEDET already defined
                                 ; Masks for CCL_ENABLE already defined
                                 ; Masks for CCL_FILTSEL already defined
                                 ; Masks for CCL_OUTEN already defined
                                 
                                 ; CCL_LUT2CTRLB masks
                                 ; Masks for CCL_INSEL0 already defined
                                 ; Masks for CCL_INSEL1 already defined
                                 
                                 ; CCL_LUT2CTRLC masks
                                 ; Masks for CCL_INSEL2 already defined
                                 
                                 ; CCL_LUT3CTRLA masks
                                 ; Masks for CCL_CLKSRC already defined
                                 ; Masks for CCL_EDGEDET already defined
                                 ; Masks for CCL_ENABLE already defined
                                 ; Masks for CCL_FILTSEL already defined
                                 ; Masks for CCL_OUTEN already defined
                                 
                                 ; CCL_LUT3CTRLB masks
                                 ; Masks for CCL_INSEL0 already defined
                                 ; Masks for CCL_INSEL1 already defined
                                 
                                 ; CCL_LUT3CTRLC masks
                                 ; Masks for CCL_INSEL2 already defined
                                 
                                 ; CCL_SEQCTRL0 masks
                                 .equ CCL_SEQSEL0_gm = 0x07               ; Sequential Selection group mask
                                 .equ CCL_SEQSEL0_gp = 0                  ; Sequential Selection group position
                                 .equ CCL_SEQSEL00_bm = (1<<0)            ; Sequential Selection bit 0 mask
                                 .equ CCL_SEQSEL00_bp = 0                 ; Sequential Selection bit 0 position
                                 .equ CCL_SEQSEL01_bm = (1<<1)            ; Sequential Selection bit 1 mask
                                 .equ CCL_SEQSEL01_bp = 1                 ; Sequential Selection bit 1 position
                                 .equ CCL_SEQSEL02_bm = (1<<2)            ; Sequential Selection bit 2 mask
                                 .equ CCL_SEQSEL02_bp = 2                 ; Sequential Selection bit 2 position
                                 
                                 ; CCL_SEQCTRL1 masks
                                 .equ CCL_SEQSEL1_gm = 0x07               ; Sequential Selection group mask
                                 .equ CCL_SEQSEL1_gp = 0                  ; Sequential Selection group position
                                 .equ CCL_SEQSEL10_bm = (1<<0)            ; Sequential Selection bit 0 mask
                                 .equ CCL_SEQSEL10_bp = 0                 ; Sequential Selection bit 0 position
                                 .equ CCL_SEQSEL11_bm = (1<<1)            ; Sequential Selection bit 1 mask
                                 .equ CCL_SEQSEL11_bp = 1                 ; Sequential Selection bit 1 position
                                 .equ CCL_SEQSEL12_bm = (1<<2)            ; Sequential Selection bit 2 mask
                                 .equ CCL_SEQSEL12_bp = 2                 ; Sequential Selection bit 2 position
                                 
                                 ; Interrupt Mode for LUT0 select
                                 .equ CCL_INTMODE0_INTDISABLE_gc = (0x00<<0) ; Interrupt disabled
                                 .equ CCL_INTMODE0_RISING_gc = (0x01<<0)  ; Sense rising edge
                                 .equ CCL_INTMODE0_FALLING_gc = (0x02<<0) ; Sense falling edge
                                 .equ CCL_INTMODE0_BOTH_gc = (0x03<<0)    ; Sense both edges
                                 
                                 ; Interrupt Mode for LUT1 select
                                 .equ CCL_INTMODE1_INTDISABLE_gc = (0x00<<2) ; Interrupt disabled
                                 .equ CCL_INTMODE1_RISING_gc = (0x01<<2)  ; Sense rising edge
                                 .equ CCL_INTMODE1_FALLING_gc = (0x02<<2) ; Sense falling edge
                                 .equ CCL_INTMODE1_BOTH_gc = (0x03<<2)    ; Sense both edges
                                 
                                 ; Interrupt Mode for LUT2 select
                                 .equ CCL_INTMODE2_INTDISABLE_gc = (0x00<<4) ; Interrupt disabled
                                 .equ CCL_INTMODE2_RISING_gc = (0x01<<4)  ; Sense rising edge
                                 .equ CCL_INTMODE2_FALLING_gc = (0x02<<4) ; Sense falling edge
                                 .equ CCL_INTMODE2_BOTH_gc = (0x03<<4)    ; Sense both edges
                                 
                                 ; Interrupt Mode for LUT3 select
                                 .equ CCL_INTMODE3_INTDISABLE_gc = (0x00<<6) ; Interrupt disabled
                                 .equ CCL_INTMODE3_RISING_gc = (0x01<<6)  ; Sense rising edge
                                 .equ CCL_INTMODE3_FALLING_gc = (0x02<<6) ; Sense falling edge
                                 .equ CCL_INTMODE3_BOTH_gc = (0x03<<6)    ; Sense both edges
                                 
                                 ; Clock Source Selection select
                                 .equ CCL_CLKSRC_CLKPER_gc = (0x00<<1)    ; CLK_PER is clocking the LUT
                                 .equ CCL_CLKSRC_IN2_gc = (0x01<<1)       ; IN[2] is clocking the LUT
                                 .equ CCL_CLKSRC_OSC20M_gc = (0x04<<1)    ; 20MHz oscillator before prescaler is clocking the LUT
                                 .equ CCL_CLKSRC_OSCULP32K_gc = (0x05<<1) ; 32kHz oscillator is clocking the LUT
                                 .equ CCL_CLKSRC_OSCULP1K_gc = (0x06<<1)  ; 32kHz oscillator after DIV32 is clocking the LUT
                                 
                                 ; Edge Detection Enable select
                                 .equ CCL_EDGEDET_DIS_gc = (0x00<<7)      ; Edge detector is disabled
                                 .equ CCL_EDGEDET_EN_gc = (0x01<<7)       ; Edge detector is enabled
                                 
                                 ; Filter Selection select
                                 .equ CCL_FILTSEL_DISABLE_gc = (0x00<<4)  ; Filter disabled
                                 .equ CCL_FILTSEL_SYNCH_gc = (0x01<<4)    ; Synchronizer enabled
                                 .equ CCL_FILTSEL_FILTER_gc = (0x02<<4)   ; Filter enabled
                                 
                                 ; LUT Input 0 Source Selection select
                                 .equ CCL_INSEL0_MASK_gc = (0x00<<0)      ; Masked input
                                 .equ CCL_INSEL0_FEEDBACK_gc = (0x01<<0)  ; Feedback input source
                                 .equ CCL_INSEL0_LINK_gc = (0x02<<0)      ; Linked LUT input source
                                 .equ CCL_INSEL0_EVENTA_gc = (0x03<<0)    ; Event input source A
                                 .equ CCL_INSEL0_EVENTB_gc = (0x04<<0)    ; Event input source B
                                 .equ CCL_INSEL0_IO_gc = (0x05<<0)        ; IO pin LUTn-IN0 input source
                                 .equ CCL_INSEL0_AC0_gc = (0x06<<0)       ; AC0 OUT input source
                                 .equ CCL_INSEL0_USART0_gc = (0x08<<0)    ; USART0 TXD input source
                                 .equ CCL_INSEL0_SPI0_gc = (0x09<<0)      ; SPI0 MOSI input source
                                 .equ CCL_INSEL0_TCA0_gc = (0x0A<<0)      ; TCA0 WO0 input source
                                 .equ CCL_INSEL0_TCB0_gc = (0x0C<<0)      ; TCB0 WO input source
                                 
                                 ; LUT Input 1 Source Selection select
                                 .equ CCL_INSEL1_MASK_gc = (0x00<<4)      ; Masked input
                                 .equ CCL_INSEL1_FEEDBACK_gc = (0x01<<4)  ; Feedback input source
                                 .equ CCL_INSEL1_LINK_gc = (0x02<<4)      ; Linked LUT input source
                                 .equ CCL_INSEL1_EVENTA_gc = (0x03<<4)    ; Event input source A
                                 .equ CCL_INSEL1_EVENTB_gc = (0x04<<4)    ; Event input source B
                                 .equ CCL_INSEL1_IO_gc = (0x05<<4)        ; IO pin LUTn-N1 input source
                                 .equ CCL_INSEL1_AC0_gc = (0x06<<4)       ; AC0 OUT input source
                                 .equ CCL_INSEL1_USART1_gc = (0x08<<4)    ; USART1 TXD input source
                                 .equ CCL_INSEL1_SPI0_gc = (0x09<<4)      ; SPI0 MOSI input source
                                 .equ CCL_INSEL1_TCA0_gc = (0x0A<<4)      ; TCA0 WO1 input source
                                 .equ CCL_INSEL1_TCB1_gc = (0x0C<<4)      ; TCB1 WO input source
                                 
                                 ; LUT Input 2 Source Selection select
                                 .equ CCL_INSEL2_MASK_gc = (0x00<<0)      ; Masked input
                                 .equ CCL_INSEL2_FEEDBACK_gc = (0x01<<0)  ; Feedback input source
                                 .equ CCL_INSEL2_LINK_gc = (0x02<<0)      ; Linked LUT input source
                                 .equ CCL_INSEL2_EVENTA_gc = (0x03<<0)    ; Event input source A
                                 .equ CCL_INSEL2_EVENTB_gc = (0x04<<0)    ; Event input source B
                                 .equ CCL_INSEL2_IO_gc = (0x05<<0)        ; IO pin LUTn-IN2 input source
                                 .equ CCL_INSEL2_AC0_gc = (0x06<<0)       ; AC0 OUT input source
                                 .equ CCL_INSEL2_USART2_gc = (0x08<<0)    ; USART2 TXD input source
                                 .equ CCL_INSEL2_SPI0_gc = (0x09<<0)      ; SPI0 SCK input source
                                 .equ CCL_INSEL2_TCA0_gc = (0x0A<<0)      ; TCA0 WO2 input source
                                 .equ CCL_INSEL2_TCB2_gc = (0x0C<<0)      ; TCB2 WO input source
                                 
                                 ; Sequential Selection select
                                 .equ CCL_SEQSEL0_DISABLE_gc = (0x00<<0)  ; Sequential logic disabled
                                 .equ CCL_SEQSEL0_DFF_gc = (0x01<<0)      ; D FlipFlop
                                 .equ CCL_SEQSEL0_JK_gc = (0x02<<0)       ; JK FlipFlop
                                 .equ CCL_SEQSEL0_LATCH_gc = (0x03<<0)    ; D Latch
                                 .equ CCL_SEQSEL0_RS_gc = (0x04<<0)       ; RS Latch
                                 
                                 ; Sequential Selection select
                                 .equ CCL_SEQSEL1_DISABLE_gc = (0x00<<0)  ; Sequential logic disabled
                                 .equ CCL_SEQSEL1_DFF_gc = (0x01<<0)      ; D FlipFlop
                                 .equ CCL_SEQSEL1_JK_gc = (0x02<<0)       ; JK FlipFlop
                                 .equ CCL_SEQSEL1_LATCH_gc = (0x03<<0)    ; D Latch
                                 .equ CCL_SEQSEL1_RS_gc = (0x04<<0)       ; RS Latch
                                 
                                 
                                 ;*************************************************************************
                                 ;** CLKCTRL - Clock controller
                                 ;*************************************************************************
                                 
                                 ; CLKCTRL_MCLKCTRLA masks
                                 .equ CLKCTRL_CLKOUT_bm = 0x80            ; System clock out bit mask
                                 .equ CLKCTRL_CLKOUT_bp = 7               ; System clock out bit position
                                 .equ CLKCTRL_CLKSEL_gm = 0x03            ; clock select group mask
                                 .equ CLKCTRL_CLKSEL_gp = 0               ; clock select group position
                                 .equ CLKCTRL_CLKSEL0_bm = (1<<0)         ; clock select bit 0 mask
                                 .equ CLKCTRL_CLKSEL0_bp = 0              ; clock select bit 0 position
                                 .equ CLKCTRL_CLKSEL1_bm = (1<<1)         ; clock select bit 1 mask
                                 .equ CLKCTRL_CLKSEL1_bp = 1              ; clock select bit 1 position
                                 
                                 ; CLKCTRL_MCLKCTRLB masks
                                 .equ CLKCTRL_PDIV_gm = 0x1E              ; Prescaler division group mask
                                 .equ CLKCTRL_PDIV_gp = 1                 ; Prescaler division group position
                                 .equ CLKCTRL_PDIV0_bm = (1<<1)           ; Prescaler division bit 0 mask
                                 .equ CLKCTRL_PDIV0_bp = 1                ; Prescaler division bit 0 position
                                 .equ CLKCTRL_PDIV1_bm = (1<<2)           ; Prescaler division bit 1 mask
                                 .equ CLKCTRL_PDIV1_bp = 2                ; Prescaler division bit 1 position
                                 .equ CLKCTRL_PDIV2_bm = (1<<3)           ; Prescaler division bit 2 mask
                                 .equ CLKCTRL_PDIV2_bp = 3                ; Prescaler division bit 2 position
                                 .equ CLKCTRL_PDIV3_bm = (1<<4)           ; Prescaler division bit 3 mask
                                 .equ CLKCTRL_PDIV3_bp = 4                ; Prescaler division bit 3 position
                                 .equ CLKCTRL_PEN_bm = 0x01               ; Prescaler enable bit mask
                                 .equ CLKCTRL_PEN_bp = 0                  ; Prescaler enable bit position
                                 
                                 ; CLKCTRL_MCLKLOCK masks
                                 .equ CLKCTRL_LOCKEN_bm = 0x01            ; lock ebable bit mask
                                 .equ CLKCTRL_LOCKEN_bp = 0               ; lock ebable bit position
                                 
                                 ; CLKCTRL_MCLKSTATUS masks
                                 .equ CLKCTRL_EXTS_bm = 0x80              ; External Clock status bit mask
                                 .equ CLKCTRL_EXTS_bp = 7                 ; External Clock status bit position
                                 .equ CLKCTRL_OSC20MS_bm = 0x10           ; 20MHz oscillator status bit mask
                                 .equ CLKCTRL_OSC20MS_bp = 4              ; 20MHz oscillator status bit position
                                 .equ CLKCTRL_OSC32KS_bm = 0x20           ; 32KHz oscillator status bit mask
                                 .equ CLKCTRL_OSC32KS_bp = 5              ; 32KHz oscillator status bit position
                                 .equ CLKCTRL_SOSC_bm = 0x01              ; System Oscillator changing bit mask
                                 .equ CLKCTRL_SOSC_bp = 0                 ; System Oscillator changing bit position
                                 .equ CLKCTRL_XOSC32KS_bm = 0x40          ; 32.768 kHz Crystal Oscillator status bit mask
                                 .equ CLKCTRL_XOSC32KS_bp = 6             ; 32.768 kHz Crystal Oscillator status bit position
                                 
                                 ; CLKCTRL_OSC20MCALIBA masks
                                 .equ CLKCTRL_CAL20M_gm = 0x7F            ; Calibration group mask
                                 .equ CLKCTRL_CAL20M_gp = 0               ; Calibration group position
                                 .equ CLKCTRL_CAL20M0_bm = (1<<0)         ; Calibration bit 0 mask
                                 .equ CLKCTRL_CAL20M0_bp = 0              ; Calibration bit 0 position
                                 .equ CLKCTRL_CAL20M1_bm = (1<<1)         ; Calibration bit 1 mask
                                 .equ CLKCTRL_CAL20M1_bp = 1              ; Calibration bit 1 position
                                 .equ CLKCTRL_CAL20M2_bm = (1<<2)         ; Calibration bit 2 mask
                                 .equ CLKCTRL_CAL20M2_bp = 2              ; Calibration bit 2 position
                                 .equ CLKCTRL_CAL20M3_bm = (1<<3)         ; Calibration bit 3 mask
                                 .equ CLKCTRL_CAL20M3_bp = 3              ; Calibration bit 3 position
                                 .equ CLKCTRL_CAL20M4_bm = (1<<4)         ; Calibration bit 4 mask
                                 .equ CLKCTRL_CAL20M4_bp = 4              ; Calibration bit 4 position
                                 .equ CLKCTRL_CAL20M5_bm = (1<<5)         ; Calibration bit 5 mask
                                 .equ CLKCTRL_CAL20M5_bp = 5              ; Calibration bit 5 position
                                 .equ CLKCTRL_CAL20M6_bm = (1<<6)         ; Calibration bit 6 mask
                                 .equ CLKCTRL_CAL20M6_bp = 6              ; Calibration bit 6 position
                                 
                                 ; CLKCTRL_OSC20MCALIBB masks
                                 .equ CLKCTRL_LOCK_bm = 0x80              ; Lock bit mask
                                 .equ CLKCTRL_LOCK_bp = 7                 ; Lock bit position
                                 .equ CLKCTRL_TEMPCAL20M_gm = 0x0F        ; Oscillator temperature coefficient group mask
                                 .equ CLKCTRL_TEMPCAL20M_gp = 0           ; Oscillator temperature coefficient group position
                                 .equ CLKCTRL_TEMPCAL20M0_bm = (1<<0)     ; Oscillator temperature coefficient bit 0 mask
                                 .equ CLKCTRL_TEMPCAL20M0_bp = 0          ; Oscillator temperature coefficient bit 0 position
                                 .equ CLKCTRL_TEMPCAL20M1_bm = (1<<1)     ; Oscillator temperature coefficient bit 1 mask
                                 .equ CLKCTRL_TEMPCAL20M1_bp = 1          ; Oscillator temperature coefficient bit 1 position
                                 .equ CLKCTRL_TEMPCAL20M2_bm = (1<<2)     ; Oscillator temperature coefficient bit 2 mask
                                 .equ CLKCTRL_TEMPCAL20M2_bp = 2          ; Oscillator temperature coefficient bit 2 position
                                 .equ CLKCTRL_TEMPCAL20M3_bm = (1<<3)     ; Oscillator temperature coefficient bit 3 mask
                                 .equ CLKCTRL_TEMPCAL20M3_bp = 3          ; Oscillator temperature coefficient bit 3 position
                                 
                                 ; CLKCTRL_OSC20MCTRLA masks
                                 .equ CLKCTRL_RUNSTDBY_bm = 0x02          ; Run standby bit mask
                                 .equ CLKCTRL_RUNSTDBY_bp = 1             ; Run standby bit position
                                 
                                 ; CLKCTRL_OSC32KCTRLA masks
                                 ; Masks for CLKCTRL_RUNSTDBY already defined
                                 
                                 ; CLKCTRL_XOSC32KCTRLA masks
                                 .equ CLKCTRL_CSUT_gm = 0x30              ; Crystal startup time group mask
                                 .equ CLKCTRL_CSUT_gp = 4                 ; Crystal startup time group position
                                 .equ CLKCTRL_CSUT0_bm = (1<<4)           ; Crystal startup time bit 0 mask
                                 .equ CLKCTRL_CSUT0_bp = 4                ; Crystal startup time bit 0 position
                                 .equ CLKCTRL_CSUT1_bm = (1<<5)           ; Crystal startup time bit 1 mask
                                 .equ CLKCTRL_CSUT1_bp = 5                ; Crystal startup time bit 1 position
                                 .equ CLKCTRL_ENABLE_bm = 0x01            ; Enable bit mask
                                 .equ CLKCTRL_ENABLE_bp = 0               ; Enable bit position
                                 ; Masks for CLKCTRL_RUNSTDBY already defined
                                 .equ CLKCTRL_SEL_bm = 0x04               ; Select bit mask
                                 .equ CLKCTRL_SEL_bp = 2                  ; Select bit position
                                 
                                 ; clock select select
                                 .equ CLKCTRL_CLKSEL_OSC20M_gc = (0x00<<0) ; 20MHz oscillator
                                 .equ CLKCTRL_CLKSEL_OSCULP32K_gc = (0x01<<0) ; 32KHz oscillator
                                 .equ CLKCTRL_CLKSEL_XOSC32K_gc = (0x02<<0) ; 32.768kHz crystal oscillator
                                 .equ CLKCTRL_CLKSEL_EXTCLK_gc = (0x03<<0) ; External clock
                                 
                                 ; Prescaler division select
                                 .equ CLKCTRL_PDIV_2X_gc = (0x00<<1)      ; 2X
                                 .equ CLKCTRL_PDIV_4X_gc = (0x01<<1)      ; 4X
                                 .equ CLKCTRL_PDIV_8X_gc = (0x02<<1)      ; 8X
                                 .equ CLKCTRL_PDIV_16X_gc = (0x03<<1)     ; 16X
                                 .equ CLKCTRL_PDIV_32X_gc = (0x04<<1)     ; 32X
                                 .equ CLKCTRL_PDIV_64X_gc = (0x05<<1)     ; 64X
                                 .equ CLKCTRL_PDIV_6X_gc = (0x08<<1)      ; 6X
                                 .equ CLKCTRL_PDIV_10X_gc = (0x09<<1)     ; 10X
                                 .equ CLKCTRL_PDIV_12X_gc = (0x0A<<1)     ; 12X
                                 .equ CLKCTRL_PDIV_24X_gc = (0x0B<<1)     ; 24X
                                 .equ CLKCTRL_PDIV_48X_gc = (0x0C<<1)     ; 48X
                                 
                                 ; Crystal startup time select
                                 .equ CLKCTRL_CSUT_1K_gc = (0x00<<4)      ; 1k cycles
                                 .equ CLKCTRL_CSUT_16K_gc = (0x01<<4)     ; 16k cycles
                                 .equ CLKCTRL_CSUT_32K_gc = (0x02<<4)     ; 32k cycles
                                 .equ CLKCTRL_CSUT_64K_gc = (0x03<<4)     ; 64k cycles
                                 
                                 
                                 ;*************************************************************************
                                 ;** CPU - CPU
                                 ;*************************************************************************
                                 
                                 ; CPU_CCP masks
                                 .equ CPU_CCP_gm = 0xFF                   ; CCP signature group mask
                                 .equ CPU_CCP_gp = 0                      ; CCP signature group position
                                 .equ CPU_CCP0_bm = (1<<0)                ; CCP signature bit 0 mask
                                 .equ CPU_CCP0_bp = 0                     ; CCP signature bit 0 position
                                 .equ CPU_CCP1_bm = (1<<1)                ; CCP signature bit 1 mask
                                 .equ CPU_CCP1_bp = 1                     ; CCP signature bit 1 position
                                 .equ CPU_CCP2_bm = (1<<2)                ; CCP signature bit 2 mask
                                 .equ CPU_CCP2_bp = 2                     ; CCP signature bit 2 position
                                 .equ CPU_CCP3_bm = (1<<3)                ; CCP signature bit 3 mask
                                 .equ CPU_CCP3_bp = 3                     ; CCP signature bit 3 position
                                 .equ CPU_CCP4_bm = (1<<4)                ; CCP signature bit 4 mask
                                 .equ CPU_CCP4_bp = 4                     ; CCP signature bit 4 position
                                 .equ CPU_CCP5_bm = (1<<5)                ; CCP signature bit 5 mask
                                 .equ CPU_CCP5_bp = 5                     ; CCP signature bit 5 position
                                 .equ CPU_CCP6_bm = (1<<6)                ; CCP signature bit 6 mask
                                 .equ CPU_CCP6_bp = 6                     ; CCP signature bit 6 position
                                 .equ CPU_CCP7_bm = (1<<7)                ; CCP signature bit 7 mask
                                 .equ CPU_CCP7_bp = 7                     ; CCP signature bit 7 position
                                 
                                 ; CPU_SREG masks
                                 .equ CPU_C_bm = 0x01                     ; Carry Flag bit mask
                                 .equ CPU_C_bp = 0                        ; Carry Flag bit position
                                 .equ CPU_H_bm = 0x20                     ; Half Carry Flag bit mask
                                 .equ CPU_H_bp = 5                        ; Half Carry Flag bit position
                                 .equ CPU_I_bm = 0x80                     ; Global Interrupt Enable Flag bit mask
                                 .equ CPU_I_bp = 7                        ; Global Interrupt Enable Flag bit position
                                 .equ CPU_N_bm = 0x04                     ; Negative Flag bit mask
                                 .equ CPU_N_bp = 2                        ; Negative Flag bit position
                                 .equ CPU_S_bm = 0x10                     ; N Exclusive Or V Flag bit mask
                                 .equ CPU_S_bp = 4                        ; N Exclusive Or V Flag bit position
                                 .equ CPU_T_bm = 0x40                     ; Transfer Bit bit mask
                                 .equ CPU_T_bp = 6                        ; Transfer Bit bit position
                                 .equ CPU_V_bm = 0x08                     ; Two's Complement Overflow Flag bit mask
                                 .equ CPU_V_bp = 3                        ; Two's Complement Overflow Flag bit position
                                 .equ CPU_Z_bm = 0x02                     ; Zero Flag bit mask
                                 .equ CPU_Z_bp = 1                        ; Zero Flag bit position
                                 
                                 ; CCP signature select
                                 .equ CPU_CCP_SPM_gc = (0x9D<<0)          ; SPM Instruction Protection
                                 .equ CPU_CCP_IOREG_gc = (0xD8<<0)        ; IO Register Protection
                                 
                                 
                                 ;*************************************************************************
                                 ;** CPUINT - Interrupt Controller
                                 ;*************************************************************************
                                 
                                 ; CPUINT_CTRLA masks
                                 .equ CPUINT_CVT_bm = 0x20                ; Compact Vector Table bit mask
                                 .equ CPUINT_CVT_bp = 5                   ; Compact Vector Table bit position
                                 .equ CPUINT_IVSEL_bm = 0x40              ; Interrupt Vector Select bit mask
                                 .equ CPUINT_IVSEL_bp = 6                 ; Interrupt Vector Select bit position
                                 .equ CPUINT_LVL0RR_bm = 0x01             ; Round-robin Scheduling Enable bit mask
                                 .equ CPUINT_LVL0RR_bp = 0                ; Round-robin Scheduling Enable bit position
                                 
                                 ; CPUINT_LVL0PRI masks
                                 .equ CPUINT_LVL0PRI_gm = 0xFF            ; Interrupt Level Priority group mask
                                 .equ CPUINT_LVL0PRI_gp = 0               ; Interrupt Level Priority group position
                                 .equ CPUINT_LVL0PRI0_bm = (1<<0)         ; Interrupt Level Priority bit 0 mask
                                 .equ CPUINT_LVL0PRI0_bp = 0              ; Interrupt Level Priority bit 0 position
                                 .equ CPUINT_LVL0PRI1_bm = (1<<1)         ; Interrupt Level Priority bit 1 mask
                                 .equ CPUINT_LVL0PRI1_bp = 1              ; Interrupt Level Priority bit 1 position
                                 .equ CPUINT_LVL0PRI2_bm = (1<<2)         ; Interrupt Level Priority bit 2 mask
                                 .equ CPUINT_LVL0PRI2_bp = 2              ; Interrupt Level Priority bit 2 position
                                 .equ CPUINT_LVL0PRI3_bm = (1<<3)         ; Interrupt Level Priority bit 3 mask
                                 .equ CPUINT_LVL0PRI3_bp = 3              ; Interrupt Level Priority bit 3 position
                                 .equ CPUINT_LVL0PRI4_bm = (1<<4)         ; Interrupt Level Priority bit 4 mask
                                 .equ CPUINT_LVL0PRI4_bp = 4              ; Interrupt Level Priority bit 4 position
                                 .equ CPUINT_LVL0PRI5_bm = (1<<5)         ; Interrupt Level Priority bit 5 mask
                                 .equ CPUINT_LVL0PRI5_bp = 5              ; Interrupt Level Priority bit 5 position
                                 .equ CPUINT_LVL0PRI6_bm = (1<<6)         ; Interrupt Level Priority bit 6 mask
                                 .equ CPUINT_LVL0PRI6_bp = 6              ; Interrupt Level Priority bit 6 position
                                 .equ CPUINT_LVL0PRI7_bm = (1<<7)         ; Interrupt Level Priority bit 7 mask
                                 .equ CPUINT_LVL0PRI7_bp = 7              ; Interrupt Level Priority bit 7 position
                                 
                                 ; CPUINT_LVL1VEC masks
                                 .equ CPUINT_LVL1VEC_gm = 0xFF            ; Interrupt Vector with High Priority group mask
                                 .equ CPUINT_LVL1VEC_gp = 0               ; Interrupt Vector with High Priority group position
                                 .equ CPUINT_LVL1VEC0_bm = (1<<0)         ; Interrupt Vector with High Priority bit 0 mask
                                 .equ CPUINT_LVL1VEC0_bp = 0              ; Interrupt Vector with High Priority bit 0 position
                                 .equ CPUINT_LVL1VEC1_bm = (1<<1)         ; Interrupt Vector with High Priority bit 1 mask
                                 .equ CPUINT_LVL1VEC1_bp = 1              ; Interrupt Vector with High Priority bit 1 position
                                 .equ CPUINT_LVL1VEC2_bm = (1<<2)         ; Interrupt Vector with High Priority bit 2 mask
                                 .equ CPUINT_LVL1VEC2_bp = 2              ; Interrupt Vector with High Priority bit 2 position
                                 .equ CPUINT_LVL1VEC3_bm = (1<<3)         ; Interrupt Vector with High Priority bit 3 mask
                                 .equ CPUINT_LVL1VEC3_bp = 3              ; Interrupt Vector with High Priority bit 3 position
                                 .equ CPUINT_LVL1VEC4_bm = (1<<4)         ; Interrupt Vector with High Priority bit 4 mask
                                 .equ CPUINT_LVL1VEC4_bp = 4              ; Interrupt Vector with High Priority bit 4 position
                                 .equ CPUINT_LVL1VEC5_bm = (1<<5)         ; Interrupt Vector with High Priority bit 5 mask
                                 .equ CPUINT_LVL1VEC5_bp = 5              ; Interrupt Vector with High Priority bit 5 position
                                 .equ CPUINT_LVL1VEC6_bm = (1<<6)         ; Interrupt Vector with High Priority bit 6 mask
                                 .equ CPUINT_LVL1VEC6_bp = 6              ; Interrupt Vector with High Priority bit 6 position
                                 .equ CPUINT_LVL1VEC7_bm = (1<<7)         ; Interrupt Vector with High Priority bit 7 mask
                                 .equ CPUINT_LVL1VEC7_bp = 7              ; Interrupt Vector with High Priority bit 7 position
                                 
                                 ; CPUINT_STATUS masks
                                 .equ CPUINT_LVL0EX_bm = 0x01             ; Level 0 Interrupt Executing bit mask
                                 .equ CPUINT_LVL0EX_bp = 0                ; Level 0 Interrupt Executing bit position
                                 .equ CPUINT_LVL1EX_bm = 0x02             ; Level 1 Interrupt Executing bit mask
                                 .equ CPUINT_LVL1EX_bp = 1                ; Level 1 Interrupt Executing bit position
                                 .equ CPUINT_NMIEX_bm = 0x80              ; Non-maskable Interrupt Executing bit mask
                                 .equ CPUINT_NMIEX_bp = 7                 ; Non-maskable Interrupt Executing bit position
                                 
                                 
                                 ;*************************************************************************
                                 ;** CRCSCAN - CRCSCAN
                                 ;*************************************************************************
                                 
                                 ; CRCSCAN_CTRLA masks
                                 .equ CRCSCAN_ENABLE_bm = 0x01            ; Enable CRC scan bit mask
                                 .equ CRCSCAN_ENABLE_bp = 0               ; Enable CRC scan bit position
                                 .equ CRCSCAN_NMIEN_bm = 0x02             ; Enable NMI Trigger bit mask
                                 .equ CRCSCAN_NMIEN_bp = 1                ; Enable NMI Trigger bit position
                                 .equ CRCSCAN_RESET_bm = 0x80             ; Reset CRC scan bit mask
                                 .equ CRCSCAN_RESET_bp = 7                ; Reset CRC scan bit position
                                 
                                 ; CRCSCAN_CTRLB masks
                                 .equ CRCSCAN_MODE_gm = 0x30              ; CRC Flash Access Mode group mask
                                 .equ CRCSCAN_MODE_gp = 4                 ; CRC Flash Access Mode group position
                                 .equ CRCSCAN_MODE0_bm = (1<<4)           ; CRC Flash Access Mode bit 0 mask
                                 .equ CRCSCAN_MODE0_bp = 4                ; CRC Flash Access Mode bit 0 position
                                 .equ CRCSCAN_MODE1_bm = (1<<5)           ; CRC Flash Access Mode bit 1 mask
                                 .equ CRCSCAN_MODE1_bp = 5                ; CRC Flash Access Mode bit 1 position
                                 .equ CRCSCAN_SRC_gm = 0x03               ; CRC Source group mask
                                 .equ CRCSCAN_SRC_gp = 0                  ; CRC Source group position
                                 .equ CRCSCAN_SRC0_bm = (1<<0)            ; CRC Source bit 0 mask
                                 .equ CRCSCAN_SRC0_bp = 0                 ; CRC Source bit 0 position
                                 .equ CRCSCAN_SRC1_bm = (1<<1)            ; CRC Source bit 1 mask
                                 .equ CRCSCAN_SRC1_bp = 1                 ; CRC Source bit 1 position
                                 
                                 ; CRCSCAN_STATUS masks
                                 .equ CRCSCAN_BUSY_bm = 0x01              ; CRC Busy bit mask
                                 .equ CRCSCAN_BUSY_bp = 0                 ; CRC Busy bit position
                                 .equ CRCSCAN_OK_bm = 0x02                ; CRC Ok bit mask
                                 .equ CRCSCAN_OK_bp = 1                   ; CRC Ok bit position
                                 
                                 ; CRC Flash Access Mode select
                                 .equ CRCSCAN_MODE_PRIORITY_gc = (0x00<<4) ; Priority to flash
                                 .equ CRCSCAN_MODE_RESERVED_gc = (0x01<<4) ; Reserved
                                 .equ CRCSCAN_MODE_BACKGROUND_gc = (0x02<<4) ; Lowest priority to flash
                                 .equ CRCSCAN_MODE_CONTINUOUS_gc = (0x03<<4) ; Continuous checks in background
                                 
                                 ; CRC Source select
                                 .equ CRCSCAN_SRC_FLASH_gc = (0x00<<0)    ; CRC on entire flash
                                 .equ CRCSCAN_SRC_APPLICATION_gc = (0x01<<0) ; CRC on boot and appl section of flash
                                 .equ CRCSCAN_SRC_BOOT_gc = (0x02<<0)     ; CRC on boot section of flash
                                 
                                 
                                 ;*************************************************************************
                                 ;** EVSYS - Event System
                                 ;*************************************************************************
                                 
                                 ; EVSYS_CHANNEL0 masks
                                 .equ EVSYS_GENERATOR_gm = 0xFF           ; Generator selector group mask
                                 .equ EVSYS_GENERATOR_gp = 0              ; Generator selector group position
                                 .equ EVSYS_GENERATOR0_bm = (1<<0)        ; Generator selector bit 0 mask
                                 .equ EVSYS_GENERATOR0_bp = 0             ; Generator selector bit 0 position
                                 .equ EVSYS_GENERATOR1_bm = (1<<1)        ; Generator selector bit 1 mask
                                 .equ EVSYS_GENERATOR1_bp = 1             ; Generator selector bit 1 position
                                 .equ EVSYS_GENERATOR2_bm = (1<<2)        ; Generator selector bit 2 mask
                                 .equ EVSYS_GENERATOR2_bp = 2             ; Generator selector bit 2 position
                                 .equ EVSYS_GENERATOR3_bm = (1<<3)        ; Generator selector bit 3 mask
                                 .equ EVSYS_GENERATOR3_bp = 3             ; Generator selector bit 3 position
                                 .equ EVSYS_GENERATOR4_bm = (1<<4)        ; Generator selector bit 4 mask
                                 .equ EVSYS_GENERATOR4_bp = 4             ; Generator selector bit 4 position
                                 .equ EVSYS_GENERATOR5_bm = (1<<5)        ; Generator selector bit 5 mask
                                 .equ EVSYS_GENERATOR5_bp = 5             ; Generator selector bit 5 position
                                 .equ EVSYS_GENERATOR6_bm = (1<<6)        ; Generator selector bit 6 mask
                                 .equ EVSYS_GENERATOR6_bp = 6             ; Generator selector bit 6 position
                                 .equ EVSYS_GENERATOR7_bm = (1<<7)        ; Generator selector bit 7 mask
                                 .equ EVSYS_GENERATOR7_bp = 7             ; Generator selector bit 7 position
                                 
                                 ; EVSYS_CHANNEL1 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL2 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL3 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL4 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL5 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL6 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_CHANNEL7 masks
                                 ; Masks for EVSYS_GENERATOR already defined
                                 
                                 ; EVSYS_STROBE masks
                                 .equ EVSYS_STROBE0_gm = 0xFF             ; Software event on channels group mask
                                 .equ EVSYS_STROBE0_gp = 0                ; Software event on channels group position
                                 .equ EVSYS_STROBE00_bm = (1<<0)          ; Software event on channels bit 0 mask
                                 .equ EVSYS_STROBE00_bp = 0               ; Software event on channels bit 0 position
                                 .equ EVSYS_STROBE01_bm = (1<<1)          ; Software event on channels bit 1 mask
                                 .equ EVSYS_STROBE01_bp = 1               ; Software event on channels bit 1 position
                                 .equ EVSYS_STROBE02_bm = (1<<2)          ; Software event on channels bit 2 mask
                                 .equ EVSYS_STROBE02_bp = 2               ; Software event on channels bit 2 position
                                 .equ EVSYS_STROBE03_bm = (1<<3)          ; Software event on channels bit 3 mask
                                 .equ EVSYS_STROBE03_bp = 3               ; Software event on channels bit 3 position
                                 .equ EVSYS_STROBE04_bm = (1<<4)          ; Software event on channels bit 4 mask
                                 .equ EVSYS_STROBE04_bp = 4               ; Software event on channels bit 4 position
                                 .equ EVSYS_STROBE05_bm = (1<<5)          ; Software event on channels bit 5 mask
                                 .equ EVSYS_STROBE05_bp = 5               ; Software event on channels bit 5 position
                                 .equ EVSYS_STROBE06_bm = (1<<6)          ; Software event on channels bit 6 mask
                                 .equ EVSYS_STROBE06_bp = 6               ; Software event on channels bit 6 position
                                 .equ EVSYS_STROBE07_bm = (1<<7)          ; Software event on channels bit 7 mask
                                 .equ EVSYS_STROBE07_bp = 7               ; Software event on channels bit 7 position
                                 
                                 ; EVSYS_USERADC0 masks
                                 .equ EVSYS_CHANNEL_gm = 0xFF             ; Channel selector group mask
                                 .equ EVSYS_CHANNEL_gp = 0                ; Channel selector group position
                                 .equ EVSYS_CHANNEL0_bm = (1<<0)          ; Channel selector bit 0 mask
                                 .equ EVSYS_CHANNEL0_bp = 0               ; Channel selector bit 0 position
                                 .equ EVSYS_CHANNEL1_bm = (1<<1)          ; Channel selector bit 1 mask
                                 .equ EVSYS_CHANNEL1_bp = 1               ; Channel selector bit 1 position
                                 .equ EVSYS_CHANNEL2_bm = (1<<2)          ; Channel selector bit 2 mask
                                 .equ EVSYS_CHANNEL2_bp = 2               ; Channel selector bit 2 position
                                 .equ EVSYS_CHANNEL3_bm = (1<<3)          ; Channel selector bit 3 mask
                                 .equ EVSYS_CHANNEL3_bp = 3               ; Channel selector bit 3 position
                                 .equ EVSYS_CHANNEL4_bm = (1<<4)          ; Channel selector bit 4 mask
                                 .equ EVSYS_CHANNEL4_bp = 4               ; Channel selector bit 4 position
                                 .equ EVSYS_CHANNEL5_bm = (1<<5)          ; Channel selector bit 5 mask
                                 .equ EVSYS_CHANNEL5_bp = 5               ; Channel selector bit 5 position
                                 .equ EVSYS_CHANNEL6_bm = (1<<6)          ; Channel selector bit 6 mask
                                 .equ EVSYS_CHANNEL6_bp = 6               ; Channel selector bit 6 position
                                 .equ EVSYS_CHANNEL7_bm = (1<<7)          ; Channel selector bit 7 mask
                                 .equ EVSYS_CHANNEL7_bp = 7               ; Channel selector bit 7 position
                                 
                                 ; EVSYS_USERCCLLUT0A masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT0B masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT1A masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT1B masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT2A masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT2B masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT3A masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERCCLLUT3B masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTA masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTB masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTC masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTD masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTE masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USEREVOUTF masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERTCA0 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERTCB0 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERTCB1 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERTCB2 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERTCB3 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERUSART0 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERUSART1 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERUSART2 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; EVSYS_USERUSART3 masks
                                 ; Masks for EVSYS_CHANNEL already defined
                                 
                                 ; Generator selector select
                                 .equ EVSYS_GENERATOR_OFF_gc = (0x00<<0)  ; Off
                                 .equ EVSYS_GENERATOR_UPDI_gc = (0x01<<0) ; Unified Program and Debug Interface
                                 .equ EVSYS_GENERATOR_RTC_OVF_gc = (0x06<<0) ; Real Time Counter overflow
                                 .equ EVSYS_GENERATOR_RTC_CMP_gc = (0x07<<0) ; Real Time Counter compare
                                 .equ EVSYS_GENERATOR_RTC_PIT0_gc = (0x08<<0) ; Periodic Interrupt Timer output 0
                                 .equ EVSYS_GENERATOR_RTC_PIT1_gc = (0x09<<0) ; Periodic Interrupt Timer output 1
                                 .equ EVSYS_GENERATOR_RTC_PIT2_gc = (0x0A<<0) ; Periodic Interrupt Timer output 2
                                 .equ EVSYS_GENERATOR_RTC_PIT3_gc = (0x0B<<0) ; Periodic Interrupt Timer output 3
                                 .equ EVSYS_GENERATOR_CCL_LUT0_gc = (0x10<<0) ; Configurable Custom Logic LUT0
                                 .equ EVSYS_GENERATOR_CCL_LUT1_gc = (0x11<<0) ; Configurable Custom Logic LUT1
                                 .equ EVSYS_GENERATOR_CCL_LUT2_gc = (0x12<<0) ; Configurable Custom Logic LUT2
                                 .equ EVSYS_GENERATOR_CCL_LUT3_gc = (0x13<<0) ; Configurable Custom Logic LUT3
                                 .equ EVSYS_GENERATOR_AC0_OUT_gc = (0x20<<0) ; Analog Comparator 0 out
                                 .equ EVSYS_GENERATOR_ADC0_COMP_gc = (0x24<<0) ; ADC 0 Comparator Event
                                 .equ EVSYS_GENERATOR_PORT0_PIN0_gc = (0x40<<0) ; Port 0 Pin 0
                                 .equ EVSYS_GENERATOR_PORT0_PIN1_gc = (0x41<<0) ; Port 0 Pin 1
                                 .equ EVSYS_GENERATOR_PORT0_PIN2_gc = (0x42<<0) ; Port 0 Pin 2
                                 .equ EVSYS_GENERATOR_PORT0_PIN3_gc = (0x43<<0) ; Port 0 Pin 3
                                 .equ EVSYS_GENERATOR_PORT0_PIN4_gc = (0x44<<0) ; Port 0 Pin 4
                                 .equ EVSYS_GENERATOR_PORT0_PIN5_gc = (0x45<<0) ; Port 0 Pin 5
                                 .equ EVSYS_GENERATOR_PORT0_PIN6_gc = (0x46<<0) ; Port 0 Pin 6
                                 .equ EVSYS_GENERATOR_PORT0_PIN7_gc = (0x47<<0) ; Port 0 Pin 7
                                 .equ EVSYS_GENERATOR_PORT1_PIN0_gc = (0x48<<0) ; Port 1 Pin 0
                                 .equ EVSYS_GENERATOR_PORT1_PIN1_gc = (0x49<<0) ; Port 1 Pin 1
                                 .equ EVSYS_GENERATOR_PORT1_PIN2_gc = (0x4A<<0) ; Port 1 Pin 2
                                 .equ EVSYS_GENERATOR_PORT1_PIN3_gc = (0x4B<<0) ; Port 1 Pin 3
                                 .equ EVSYS_GENERATOR_PORT1_PIN4_gc = (0x4C<<0) ; Port 1 Pin 4
                                 .equ EVSYS_GENERATOR_PORT1_PIN5_gc = (0x4D<<0) ; Port 1 Pin 5
                                 .equ EVSYS_GENERATOR_PORT1_PIN6_gc = (0x4E<<0) ; Port 1 Pin 6
                                 .equ EVSYS_GENERATOR_PORT1_PIN7_gc = (0x4F<<0) ; Port 1 Pin 7
                                 .equ EVSYS_GENERATOR_USART0_XCK_gc = (0x60<<0) ; USART 0 Xclock
                                 .equ EVSYS_GENERATOR_USART1_XCK_gc = (0x61<<0) ; USART 1 Xclock
                                 .equ EVSYS_GENERATOR_USART2_XCK_gc = (0x62<<0) ; USART 2 Xclock
                                 .equ EVSYS_GENERATOR_USART3_XCK_gc = (0x63<<0) ; USART 3 Xclock
                                 .equ EVSYS_GENERATOR_SPI0_SCK_gc = (0x68<<0) ; SPI 0 Sclock
                                 .equ EVSYS_GENERATOR_TCA0_OVF_LUNF_gc = (0x80<<0) ; Timer/Counter A0 overflow / low byte underflow
                                 .equ EVSYS_GENERATOR_TCA0_HUNF_gc = (0x81<<0) ; Timer/Counter A0 high byte underflow (split mode)
                                 .equ EVSYS_GENERATOR_TCA0_CMP0_gc = (0x84<<0) ; Timer/Counter A0 compare 0
                                 .equ EVSYS_GENERATOR_TCA0_CMP1_gc = (0x85<<0) ; Timer/Counter A0 compare 1
                                 .equ EVSYS_GENERATOR_TCA0_CMP2_gc = (0x86<<0) ; Timer/Counter A0 compare 2
                                 .equ EVSYS_GENERATOR_TCB0_CMP0_gc = (0xA0<<0) ; Timer/Counter B0 compare 0
                                 .equ EVSYS_GENERATOR_TCB1_CMP0_gc = (0xA2<<0) ; Timer/Counter B1 compare 0
                                 .equ EVSYS_GENERATOR_TCB2_CMP0_gc = (0xA4<<0) ; Timer/Counter B2 compare 0
                                 .equ EVSYS_GENERATOR_TCB3_CMP0_gc = (0xA6<<0) ; Timer/Counter B3 compare 0
                                 
                                 ; Software event on channels select
                                 .equ EVSYS_STROBE0_EV_STROBE_CH0_gc = (0x01<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH1_gc = (0x02<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH2_gc = (0x04<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH3_gc = (0x08<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH4_gc = (0x10<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH5_gc = (0x20<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH6_gc = (0x40<<0) ; 
                                 .equ EVSYS_STROBE0_EV_STROBE_CH7_gc = (0x80<<0) ; 
                                 
                                 ; Channel selector select
                                 .equ EVSYS_CHANNEL_OFF_gc = (0x00<<0)    ; Off
                                 .equ EVSYS_CHANNEL_CHANNEL0_gc = (0x01<<0) ; Connect user to event channel 0
                                 .equ EVSYS_CHANNEL_CHANNEL1_gc = (0x02<<0) ; Connect user to event channel 1
                                 .equ EVSYS_CHANNEL_CHANNEL2_gc = (0x03<<0) ; Connect user to event channel 2
                                 .equ EVSYS_CHANNEL_CHANNEL3_gc = (0x04<<0) ; Connect user to event channel 3
                                 .equ EVSYS_CHANNEL_CHANNEL4_gc = (0x05<<0) ; Connect user to event channel 4
                                 .equ EVSYS_CHANNEL_CHANNEL5_gc = (0x06<<0) ; Connect user to event channel 5
                                 .equ EVSYS_CHANNEL_CHANNEL6_gc = (0x07<<0) ; Connect user to event channel 6
                                 .equ EVSYS_CHANNEL_CHANNEL7_gc = (0x08<<0) ; Connect user to event channel 7
                                 
                                 
                                 ;*************************************************************************
                                 ;** FUSE - Fuses
                                 ;*************************************************************************
                                 
                                 ; FUSE_BODCFG masks
                                 .equ FUSE_ACTIVE_gm = 0x0C               ; BOD Operation in Active Mode group mask
                                 .equ FUSE_ACTIVE_gp = 2                  ; BOD Operation in Active Mode group position
                                 .equ FUSE_ACTIVE0_bm = (1<<2)            ; BOD Operation in Active Mode bit 0 mask
                                 .equ FUSE_ACTIVE0_bp = 2                 ; BOD Operation in Active Mode bit 0 position
                                 .equ FUSE_ACTIVE1_bm = (1<<3)            ; BOD Operation in Active Mode bit 1 mask
                                 .equ FUSE_ACTIVE1_bp = 3                 ; BOD Operation in Active Mode bit 1 position
                                 .equ FUSE_LVL_gm = 0xE0                  ; BOD Level group mask
                                 .equ FUSE_LVL_gp = 5                     ; BOD Level group position
                                 .equ FUSE_LVL0_bm = (1<<5)               ; BOD Level bit 0 mask
                                 .equ FUSE_LVL0_bp = 5                    ; BOD Level bit 0 position
                                 .equ FUSE_LVL1_bm = (1<<6)               ; BOD Level bit 1 mask
                                 .equ FUSE_LVL1_bp = 6                    ; BOD Level bit 1 position
                                 .equ FUSE_LVL2_bm = (1<<7)               ; BOD Level bit 2 mask
                                 .equ FUSE_LVL2_bp = 7                    ; BOD Level bit 2 position
                                 .equ FUSE_SAMPFREQ_bm = 0x10             ; BOD Sample Frequency bit mask
                                 .equ FUSE_SAMPFREQ_bp = 4                ; BOD Sample Frequency bit position
                                 .equ FUSE_SLEEP_gm = 0x03                ; BOD Operation in Sleep Mode group mask
                                 .equ FUSE_SLEEP_gp = 0                   ; BOD Operation in Sleep Mode group position
                                 .equ FUSE_SLEEP0_bm = (1<<0)             ; BOD Operation in Sleep Mode bit 0 mask
                                 .equ FUSE_SLEEP0_bp = 0                  ; BOD Operation in Sleep Mode bit 0 position
                                 .equ FUSE_SLEEP1_bm = (1<<1)             ; BOD Operation in Sleep Mode bit 1 mask
                                 .equ FUSE_SLEEP1_bp = 1                  ; BOD Operation in Sleep Mode bit 1 position
                                 
                                 ; FUSE_OSCCFG masks
                                 .equ FUSE_FREQSEL_gm = 0x03              ; Frequency Select group mask
                                 .equ FUSE_FREQSEL_gp = 0                 ; Frequency Select group position
                                 .equ FUSE_FREQSEL0_bm = (1<<0)           ; Frequency Select bit 0 mask
                                 .equ FUSE_FREQSEL0_bp = 0                ; Frequency Select bit 0 position
                                 .equ FUSE_FREQSEL1_bm = (1<<1)           ; Frequency Select bit 1 mask
                                 .equ FUSE_FREQSEL1_bp = 1                ; Frequency Select bit 1 position
                                 .equ FUSE_OSCLOCK_bm = 0x80              ; Oscillator Lock bit mask
                                 .equ FUSE_OSCLOCK_bp = 7                 ; Oscillator Lock bit position
                                 
                                 ; FUSE_SYSCFG0 masks
                                 .equ FUSE_CRCSRC_gm = 0xC0               ; CRC Source group mask
                                 .equ FUSE_CRCSRC_gp = 6                  ; CRC Source group position
                                 .equ FUSE_CRCSRC0_bm = (1<<6)            ; CRC Source bit 0 mask
                                 .equ FUSE_CRCSRC0_bp = 6                 ; CRC Source bit 0 position
                                 .equ FUSE_CRCSRC1_bm = (1<<7)            ; CRC Source bit 1 mask
                                 .equ FUSE_CRCSRC1_bp = 7                 ; CRC Source bit 1 position
                                 .equ FUSE_EESAVE_bm = 0x01               ; EEPROM Save bit mask
                                 .equ FUSE_EESAVE_bp = 0                  ; EEPROM Save bit position
                                 .equ FUSE_RSTPINCFG_bm = 0x08            ; Reset Pin Configuration bit mask
                                 .equ FUSE_RSTPINCFG_bp = 3               ; Reset Pin Configuration bit position
                                 
                                 ; FUSE_SYSCFG1 masks
                                 .equ FUSE_SUT_gm = 0x07                  ; Startup Time group mask
                                 .equ FUSE_SUT_gp = 0                     ; Startup Time group position
                                 .equ FUSE_SUT0_bm = (1<<0)               ; Startup Time bit 0 mask
                                 .equ FUSE_SUT0_bp = 0                    ; Startup Time bit 0 position
                                 .equ FUSE_SUT1_bm = (1<<1)               ; Startup Time bit 1 mask
                                 .equ FUSE_SUT1_bp = 1                    ; Startup Time bit 1 position
                                 .equ FUSE_SUT2_bm = (1<<2)               ; Startup Time bit 2 mask
                                 .equ FUSE_SUT2_bp = 2                    ; Startup Time bit 2 position
                                 
                                 ; FUSE_WDTCFG masks
                                 .equ FUSE_PERIOD_gm = 0x0F               ; Watchdog Timeout Period group mask
                                 .equ FUSE_PERIOD_gp = 0                  ; Watchdog Timeout Period group position
                                 .equ FUSE_PERIOD0_bm = (1<<0)            ; Watchdog Timeout Period bit 0 mask
                                 .equ FUSE_PERIOD0_bp = 0                 ; Watchdog Timeout Period bit 0 position
                                 .equ FUSE_PERIOD1_bm = (1<<1)            ; Watchdog Timeout Period bit 1 mask
                                 .equ FUSE_PERIOD1_bp = 1                 ; Watchdog Timeout Period bit 1 position
                                 .equ FUSE_PERIOD2_bm = (1<<2)            ; Watchdog Timeout Period bit 2 mask
                                 .equ FUSE_PERIOD2_bp = 2                 ; Watchdog Timeout Period bit 2 position
                                 .equ FUSE_PERIOD3_bm = (1<<3)            ; Watchdog Timeout Period bit 3 mask
                                 .equ FUSE_PERIOD3_bp = 3                 ; Watchdog Timeout Period bit 3 position
                                 .equ FUSE_WINDOW_gm = 0xF0               ; Watchdog Window Timeout Period group mask
                                 .equ FUSE_WINDOW_gp = 4                  ; Watchdog Window Timeout Period group position
                                 .equ FUSE_WINDOW0_bm = (1<<4)            ; Watchdog Window Timeout Period bit 0 mask
                                 .equ FUSE_WINDOW0_bp = 4                 ; Watchdog Window Timeout Period bit 0 position
                                 .equ FUSE_WINDOW1_bm = (1<<5)            ; Watchdog Window Timeout Period bit 1 mask
                                 .equ FUSE_WINDOW1_bp = 5                 ; Watchdog Window Timeout Period bit 1 position
                                 .equ FUSE_WINDOW2_bm = (1<<6)            ; Watchdog Window Timeout Period bit 2 mask
                                 .equ FUSE_WINDOW2_bp = 6                 ; Watchdog Window Timeout Period bit 2 position
                                 .equ FUSE_WINDOW3_bm = (1<<7)            ; Watchdog Window Timeout Period bit 3 mask
                                 .equ FUSE_WINDOW3_bp = 7                 ; Watchdog Window Timeout Period bit 3 position
                                 
                                 ; BOD Operation in Active Mode select
                                 .equ FUSE_ACTIVE_DIS_gc = (0x00<<2)      ; Disabled
                                 .equ FUSE_ACTIVE_ENABLED_gc = (0x01<<2)  ; Enabled
                                 .equ FUSE_ACTIVE_SAMPLED_gc = (0x02<<2)  ; Sampled
                                 .equ FUSE_ACTIVE_ENWAKE_gc = (0x03<<2)   ; Enabled with wake-up halted until BOD is ready
                                 
                                 ; BOD Level select
                                 .equ FUSE_LVL_BODLEVEL0_gc = (0x00<<5)   ; 1.8 V
                                 .equ FUSE_LVL_BODLEVEL1_gc = (0x01<<5)   ; 2.1 V
                                 .equ FUSE_LVL_BODLEVEL2_gc = (0x02<<5)   ; 2.6 V
                                 .equ FUSE_LVL_BODLEVEL3_gc = (0x03<<5)   ; 2.9 V
                                 .equ FUSE_LVL_BODLEVEL4_gc = (0x04<<5)   ; 3.3 V
                                 .equ FUSE_LVL_BODLEVEL5_gc = (0x05<<5)   ; 3.7 V
                                 .equ FUSE_LVL_BODLEVEL6_gc = (0x06<<5)   ; 4.0 V
                                 .equ FUSE_LVL_BODLEVEL7_gc = (0x07<<5)   ; 4.2 V
                                 
                                 ; BOD Sample Frequency select
                                 .equ FUSE_SAMPFREQ_1KHZ_gc = (0x00<<4)   ; 1kHz sampling frequency
                                 .equ FUSE_SAMPFREQ_125HZ_gc = (0x01<<4)  ; 125Hz sampling frequency
                                 
                                 ; BOD Operation in Sleep Mode select
                                 .equ FUSE_SLEEP_DIS_gc = (0x00<<0)       ; Disabled
                                 .equ FUSE_SLEEP_ENABLED_gc = (0x01<<0)   ; Enabled
                                 .equ FUSE_SLEEP_SAMPLED_gc = (0x02<<0)   ; Sampled
                                 
                                 ; Frequency Select select
                                 .equ FUSE_FREQSEL_16MHZ_gc = (0x01<<0)   ; 16 MHz
                                 .equ FUSE_FREQSEL_20MHZ_gc = (0x02<<0)   ; 20 MHz
                                 
                                 ; CRC Source select
                                 .equ FUSE_CRCSRC_FLASH_gc = (0x00<<6)    ; The CRC is performed on the entire Flash (boot, application code and application data section).
                                 .equ FUSE_CRCSRC_BOOT_gc = (0x01<<6)     ; The CRC is performed on the boot section of Flash
                                 .equ FUSE_CRCSRC_BOOTAPP_gc = (0x02<<6)  ; The CRC is performed on the boot and application code section of Flash
                                 .equ FUSE_CRCSRC_NOCRC_gc = (0x03<<6)    ; Disable CRC.
                                 
                                 ; Reset Pin Configuration select
                                 .equ FUSE_RSTPINCFG_GPIO_gc = (0x00<<3)  ; GPIO mode
                                 .equ FUSE_RSTPINCFG_RST_gc = (0x01<<3)   ; Reset mode
                                 
                                 ; Startup Time select
                                 .equ FUSE_SUT_0MS_gc = (0x00<<0)         ; 0 ms
                                 .equ FUSE_SUT_1MS_gc = (0x01<<0)         ; 1 ms
                                 .equ FUSE_SUT_2MS_gc = (0x02<<0)         ; 2 ms
                                 .equ FUSE_SUT_4MS_gc = (0x03<<0)         ; 4 ms
                                 .equ FUSE_SUT_8MS_gc = (0x04<<0)         ; 8 ms
                                 .equ FUSE_SUT_16MS_gc = (0x05<<0)        ; 16 ms
                                 .equ FUSE_SUT_32MS_gc = (0x06<<0)        ; 32 ms
                                 .equ FUSE_SUT_64MS_gc = (0x07<<0)        ; 64 ms
                                 
                                 ; Watchdog Timeout Period select
                                 .equ FUSE_PERIOD_OFF_gc = (0x00<<0)      ; Off
                                 .equ FUSE_PERIOD_8CLK_gc = (0x01<<0)     ; 8 cycles (8ms)
                                 .equ FUSE_PERIOD_16CLK_gc = (0x02<<0)    ; 16 cycles (16ms)
                                 .equ FUSE_PERIOD_32CLK_gc = (0x03<<0)    ; 32 cycles (32ms)
                                 .equ FUSE_PERIOD_64CLK_gc = (0x04<<0)    ; 64 cycles (64ms)
                                 .equ FUSE_PERIOD_128CLK_gc = (0x05<<0)   ; 128 cycles (0.128s)
                                 .equ FUSE_PERIOD_256CLK_gc = (0x06<<0)   ; 256 cycles (0.256s)
                                 .equ FUSE_PERIOD_512CLK_gc = (0x07<<0)   ; 512 cycles (0.512s)
                                 .equ FUSE_PERIOD_1KCLK_gc = (0x08<<0)    ; 1K cycles (1.0s)
                                 .equ FUSE_PERIOD_2KCLK_gc = (0x09<<0)    ; 2K cycles (2.0s)
                                 .equ FUSE_PERIOD_4KCLK_gc = (0x0A<<0)    ; 4K cycles (4.1s)
                                 .equ FUSE_PERIOD_8KCLK_gc = (0x0B<<0)    ; 8K cycles (8.2s)
                                 
                                 ; Watchdog Window Timeout Period select
                                 .equ FUSE_WINDOW_OFF_gc = (0x00<<4)      ; Off
                                 .equ FUSE_WINDOW_8CLK_gc = (0x01<<4)     ; 8 cycles (8ms)
                                 .equ FUSE_WINDOW_16CLK_gc = (0x02<<4)    ; 16 cycles (16ms)
                                 .equ FUSE_WINDOW_32CLK_gc = (0x03<<4)    ; 32 cycles (32ms)
                                 .equ FUSE_WINDOW_64CLK_gc = (0x04<<4)    ; 64 cycles (64ms)
                                 .equ FUSE_WINDOW_128CLK_gc = (0x05<<4)   ; 128 cycles (0.128s)
                                 .equ FUSE_WINDOW_256CLK_gc = (0x06<<4)   ; 256 cycles (0.256s)
                                 .equ FUSE_WINDOW_512CLK_gc = (0x07<<4)   ; 512 cycles (0.512s)
                                 .equ FUSE_WINDOW_1KCLK_gc = (0x08<<4)    ; 1K cycles (1.0s)
                                 .equ FUSE_WINDOW_2KCLK_gc = (0x09<<4)    ; 2K cycles (2.0s)
                                 .equ FUSE_WINDOW_4KCLK_gc = (0x0A<<4)    ; 4K cycles (4.1s)
                                 .equ FUSE_WINDOW_8KCLK_gc = (0x0B<<4)    ; 8K cycles (8.2s)
                                 
                                 
                                 ;*************************************************************************
                                 ;** GPIO - General Purpose IO
                                 ;*************************************************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** LOCKBIT - Lockbit
                                 ;*************************************************************************
                                 
                                 ; LOCKBIT_LOCKBIT masks
                                 .equ LOCKBIT_LB_gm = 0xFF                ; Lock Bits group mask
                                 .equ LOCKBIT_LB_gp = 0                   ; Lock Bits group position
                                 .equ LOCKBIT_LB0_bm = (1<<0)             ; Lock Bits bit 0 mask
                                 .equ LOCKBIT_LB0_bp = 0                  ; Lock Bits bit 0 position
                                 .equ LOCKBIT_LB1_bm = (1<<1)             ; Lock Bits bit 1 mask
                                 .equ LOCKBIT_LB1_bp = 1                  ; Lock Bits bit 1 position
                                 .equ LOCKBIT_LB2_bm = (1<<2)             ; Lock Bits bit 2 mask
                                 .equ LOCKBIT_LB2_bp = 2                  ; Lock Bits bit 2 position
                                 .equ LOCKBIT_LB3_bm = (1<<3)             ; Lock Bits bit 3 mask
                                 .equ LOCKBIT_LB3_bp = 3                  ; Lock Bits bit 3 position
                                 .equ LOCKBIT_LB4_bm = (1<<4)             ; Lock Bits bit 4 mask
                                 .equ LOCKBIT_LB4_bp = 4                  ; Lock Bits bit 4 position
                                 .equ LOCKBIT_LB5_bm = (1<<5)             ; Lock Bits bit 5 mask
                                 .equ LOCKBIT_LB5_bp = 5                  ; Lock Bits bit 5 position
                                 .equ LOCKBIT_LB6_bm = (1<<6)             ; Lock Bits bit 6 mask
                                 .equ LOCKBIT_LB6_bp = 6                  ; Lock Bits bit 6 position
                                 .equ LOCKBIT_LB7_bm = (1<<7)             ; Lock Bits bit 7 mask
                                 .equ LOCKBIT_LB7_bp = 7                  ; Lock Bits bit 7 position
                                 
                                 ; Lock Bits select
                                 .equ LOCKBIT_LB_RWLOCK_gc = (0x3A<<0)    ; Read and write lock
                                 .equ LOCKBIT_LB_NOLOCK_gc = (0xC5<<0)    ; No locks
                                 
                                 
                                 ;*************************************************************************
                                 ;** NVMCTRL - Non-volatile Memory Controller
                                 ;*************************************************************************
                                 
                                 ; NVMCTRL_CTRLA masks
                                 .equ NVMCTRL_CMD_gm = 0x07               ; Command group mask
                                 .equ NVMCTRL_CMD_gp = 0                  ; Command group position
                                 .equ NVMCTRL_CMD0_bm = (1<<0)            ; Command bit 0 mask
                                 .equ NVMCTRL_CMD0_bp = 0                 ; Command bit 0 position
                                 .equ NVMCTRL_CMD1_bm = (1<<1)            ; Command bit 1 mask
                                 .equ NVMCTRL_CMD1_bp = 1                 ; Command bit 1 position
                                 .equ NVMCTRL_CMD2_bm = (1<<2)            ; Command bit 2 mask
                                 .equ NVMCTRL_CMD2_bp = 2                 ; Command bit 2 position
                                 
                                 ; NVMCTRL_CTRLB masks
                                 .equ NVMCTRL_APCWP_bm = 0x01             ; Application code write protect bit mask
                                 .equ NVMCTRL_APCWP_bp = 0                ; Application code write protect bit position
                                 .equ NVMCTRL_BOOTLOCK_bm = 0x02          ; Boot Lock bit mask
                                 .equ NVMCTRL_BOOTLOCK_bp = 1             ; Boot Lock bit position
                                 
                                 ; NVMCTRL_INTCTRL masks
                                 .equ NVMCTRL_EEREADY_bm = 0x01           ; EEPROM Ready bit mask
                                 .equ NVMCTRL_EEREADY_bp = 0              ; EEPROM Ready bit position
                                 
                                 ; NVMCTRL_INTFLAGS masks
                                 ; Masks for NVMCTRL_EEREADY already defined
                                 
                                 ; NVMCTRL_STATUS masks
                                 .equ NVMCTRL_EEBUSY_bm = 0x02            ; EEPROM busy bit mask
                                 .equ NVMCTRL_EEBUSY_bp = 1               ; EEPROM busy bit position
                                 .equ NVMCTRL_FBUSY_bm = 0x01             ; Flash busy bit mask
                                 .equ NVMCTRL_FBUSY_bp = 0                ; Flash busy bit position
                                 .equ NVMCTRL_WRERROR_bm = 0x04           ; Write error bit mask
                                 .equ NVMCTRL_WRERROR_bp = 2              ; Write error bit position
                                 
                                 ; Command select
                                 .equ NVMCTRL_CMD_NONE_gc = (0x00<<0)     ; No Command
                                 .equ NVMCTRL_CMD_PAGEWRITE_gc = (0x01<<0) ; Write page
                                 .equ NVMCTRL_CMD_PAGEERASE_gc = (0x02<<0) ; Erase page
                                 .equ NVMCTRL_CMD_PAGEERASEWRITE_gc = (0x03<<0) ; Erase and write page
                                 .equ NVMCTRL_CMD_PAGEBUFCLR_gc = (0x04<<0) ; Page buffer clear
                                 .equ NVMCTRL_CMD_CHIPERASE_gc = (0x05<<0) ; Chip erase
                                 .equ NVMCTRL_CMD_EEERASE_gc = (0x06<<0)  ; EEPROM erase
                                 .equ NVMCTRL_CMD_FUSEWRITE_gc = (0x07<<0) ; Write fuse (PDI only)
                                 
                                 
                                 ;*************************************************************************
                                 ;** PORT - I/O Ports
                                 ;*************************************************************************
                                 
                                 ; PORT_INTFLAGS masks
                                 .equ PORT_INT_gm = 0xFF                  ; Pin Interrupt group mask
                                 .equ PORT_INT_gp = 0                     ; Pin Interrupt group position
                                 .equ PORT_INT0_bm = (1<<0)               ; Pin Interrupt bit 0 mask
                                 .equ PORT_INT0_bp = 0                    ; Pin Interrupt bit 0 position
                                 .equ PORT_INT1_bm = (1<<1)               ; Pin Interrupt bit 1 mask
                                 .equ PORT_INT1_bp = 1                    ; Pin Interrupt bit 1 position
                                 .equ PORT_INT2_bm = (1<<2)               ; Pin Interrupt bit 2 mask
                                 .equ PORT_INT2_bp = 2                    ; Pin Interrupt bit 2 position
                                 .equ PORT_INT3_bm = (1<<3)               ; Pin Interrupt bit 3 mask
                                 .equ PORT_INT3_bp = 3                    ; Pin Interrupt bit 3 position
                                 .equ PORT_INT4_bm = (1<<4)               ; Pin Interrupt bit 4 mask
                                 .equ PORT_INT4_bp = 4                    ; Pin Interrupt bit 4 position
                                 .equ PORT_INT5_bm = (1<<5)               ; Pin Interrupt bit 5 mask
                                 .equ PORT_INT5_bp = 5                    ; Pin Interrupt bit 5 position
                                 .equ PORT_INT6_bm = (1<<6)               ; Pin Interrupt bit 6 mask
                                 .equ PORT_INT6_bp = 6                    ; Pin Interrupt bit 6 position
                                 .equ PORT_INT7_bm = (1<<7)               ; Pin Interrupt bit 7 mask
                                 .equ PORT_INT7_bp = 7                    ; Pin Interrupt bit 7 position
                                 
                                 ; PORT_PIN0CTRL masks
                                 .equ PORT_INVEN_bm = 0x80                ; Inverted I/O Enable bit mask
                                 .equ PORT_INVEN_bp = 7                   ; Inverted I/O Enable bit position
                                 .equ PORT_ISC_gm = 0x07                  ; Input/Sense Configuration group mask
                                 .equ PORT_ISC_gp = 0                     ; Input/Sense Configuration group position
                                 .equ PORT_ISC0_bm = (1<<0)               ; Input/Sense Configuration bit 0 mask
                                 .equ PORT_ISC0_bp = 0                    ; Input/Sense Configuration bit 0 position
                                 .equ PORT_ISC1_bm = (1<<1)               ; Input/Sense Configuration bit 1 mask
                                 .equ PORT_ISC1_bp = 1                    ; Input/Sense Configuration bit 1 position
                                 .equ PORT_ISC2_bm = (1<<2)               ; Input/Sense Configuration bit 2 mask
                                 .equ PORT_ISC2_bp = 2                    ; Input/Sense Configuration bit 2 position
                                 .equ PORT_PULLUPEN_bm = 0x08             ; Pullup enable bit mask
                                 .equ PORT_PULLUPEN_bp = 3                ; Pullup enable bit position
                                 
                                 ; PORT_PIN1CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN2CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN3CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN4CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN5CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN6CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PIN7CTRL masks
                                 ; Masks for PORT_INVEN already defined
                                 ; Masks for PORT_ISC already defined
                                 ; Masks for PORT_PULLUPEN already defined
                                 
                                 ; PORT_PORTCTRL masks
                                 .equ PORT_SRL_bm = 0x01                  ; Slew Rate Limit Enable bit mask
                                 .equ PORT_SRL_bp = 0                     ; Slew Rate Limit Enable bit position
                                 
                                 ; Input/Sense Configuration select
                                 .equ PORT_ISC_INTDISABLE_gc = (0x00<<0)  ; Interrupt disabled but input buffer enabled
                                 .equ PORT_ISC_BOTHEDGES_gc = (0x01<<0)   ; Sense Both Edges
                                 .equ PORT_ISC_RISING_gc = (0x02<<0)      ; Sense Rising Edge
                                 .equ PORT_ISC_FALLING_gc = (0x03<<0)     ; Sense Falling Edge
                                 .equ PORT_ISC_INPUT_DISABLE_gc = (0x04<<0) ; Digital Input Buffer disabled
                                 .equ PORT_ISC_LEVEL_gc = (0x05<<0)       ; Sense low Level
                                 
                                 
                                 ;*************************************************************************
                                 ;** PORTMUX - Port Multiplexer
                                 ;*************************************************************************
                                 
                                 ; PORTMUX_CCLROUTEA masks
                                 .equ PORTMUX_LUT0_bm = 0x01              ; CCL LUT0 bit mask
                                 .equ PORTMUX_LUT0_bp = 0                 ; CCL LUT0 bit position
                                 .equ PORTMUX_LUT1_bm = 0x02              ; CCL LUT1 bit mask
                                 .equ PORTMUX_LUT1_bp = 1                 ; CCL LUT1 bit position
                                 .equ PORTMUX_LUT2_bm = 0x04              ; CCL LUT2 bit mask
                                 .equ PORTMUX_LUT2_bp = 2                 ; CCL LUT2 bit position
                                 .equ PORTMUX_LUT3_bm = 0x08              ; CCL LUT3 bit mask
                                 .equ PORTMUX_LUT3_bp = 3                 ; CCL LUT3 bit position
                                 
                                 ; PORTMUX_EVSYSROUTEA masks
                                 .equ PORTMUX_EVOUT0_bm = 0x01            ; Event Output 0 bit mask
                                 .equ PORTMUX_EVOUT0_bp = 0               ; Event Output 0 bit position
                                 .equ PORTMUX_EVOUT1_bm = 0x02            ; Event Output 1 bit mask
                                 .equ PORTMUX_EVOUT1_bp = 1               ; Event Output 1 bit position
                                 .equ PORTMUX_EVOUT2_bm = 0x04            ; Event Output 2 bit mask
                                 .equ PORTMUX_EVOUT2_bp = 2               ; Event Output 2 bit position
                                 .equ PORTMUX_EVOUT3_bm = 0x08            ; Event Output 3 bit mask
                                 .equ PORTMUX_EVOUT3_bp = 3               ; Event Output 3 bit position
                                 .equ PORTMUX_EVOUT4_bm = 0x10            ; Event Output 4 bit mask
                                 .equ PORTMUX_EVOUT4_bp = 4               ; Event Output 4 bit position
                                 .equ PORTMUX_EVOUT5_bm = 0x20            ; Event Output 5 bit mask
                                 .equ PORTMUX_EVOUT5_bp = 5               ; Event Output 5 bit position
                                 
                                 ; PORTMUX_TCAROUTEA masks
                                 .equ PORTMUX_TCA0_gm = 0x07              ; Port Multiplexer TCA0 group mask
                                 .equ PORTMUX_TCA0_gp = 0                 ; Port Multiplexer TCA0 group position
                                 .equ PORTMUX_TCA00_bm = (1<<0)           ; Port Multiplexer TCA0 bit 0 mask
                                 .equ PORTMUX_TCA00_bp = 0                ; Port Multiplexer TCA0 bit 0 position
                                 .equ PORTMUX_TCA01_bm = (1<<1)           ; Port Multiplexer TCA0 bit 1 mask
                                 .equ PORTMUX_TCA01_bp = 1                ; Port Multiplexer TCA0 bit 1 position
                                 .equ PORTMUX_TCA02_bm = (1<<2)           ; Port Multiplexer TCA0 bit 2 mask
                                 .equ PORTMUX_TCA02_bp = 2                ; Port Multiplexer TCA0 bit 2 position
                                 
                                 ; PORTMUX_TCBROUTEA masks
                                 .equ PORTMUX_TCB0_bm = 0x01              ; Port Multiplexer TCB0 bit mask
                                 .equ PORTMUX_TCB0_bp = 0                 ; Port Multiplexer TCB0 bit position
                                 .equ PORTMUX_TCB1_bm = 0x02              ; Port Multiplexer TCB1 bit mask
                                 .equ PORTMUX_TCB1_bp = 1                 ; Port Multiplexer TCB1 bit position
                                 .equ PORTMUX_TCB2_bm = 0x04              ; Port Multiplexer TCB2 bit mask
                                 .equ PORTMUX_TCB2_bp = 2                 ; Port Multiplexer TCB2 bit position
                                 .equ PORTMUX_TCB3_bm = 0x08              ; Port Multiplexer TCB3 bit mask
                                 .equ PORTMUX_TCB3_bp = 3                 ; Port Multiplexer TCB3 bit position
                                 
                                 ; PORTMUX_TWISPIROUTEA masks
                                 .equ PORTMUX_SPI0_gm = 0x03              ; Port Multiplexer SPI0 group mask
                                 .equ PORTMUX_SPI0_gp = 0                 ; Port Multiplexer SPI0 group position
                                 .equ PORTMUX_SPI00_bm = (1<<0)           ; Port Multiplexer SPI0 bit 0 mask
                                 .equ PORTMUX_SPI00_bp = 0                ; Port Multiplexer SPI0 bit 0 position
                                 .equ PORTMUX_SPI01_bm = (1<<1)           ; Port Multiplexer SPI0 bit 1 mask
                                 .equ PORTMUX_SPI01_bp = 1                ; Port Multiplexer SPI0 bit 1 position
                                 .equ PORTMUX_TWI0_gm = 0x30              ; Port Multiplexer TWI0 group mask
                                 .equ PORTMUX_TWI0_gp = 4                 ; Port Multiplexer TWI0 group position
                                 .equ PORTMUX_TWI00_bm = (1<<4)           ; Port Multiplexer TWI0 bit 0 mask
                                 .equ PORTMUX_TWI00_bp = 4                ; Port Multiplexer TWI0 bit 0 position
                                 .equ PORTMUX_TWI01_bm = (1<<5)           ; Port Multiplexer TWI0 bit 1 mask
                                 .equ PORTMUX_TWI01_bp = 5                ; Port Multiplexer TWI0 bit 1 position
                                 
                                 ; PORTMUX_USARTROUTEA masks
                                 .equ PORTMUX_USART0_gm = 0x03            ; Port Multiplexer USART0 group mask
                                 .equ PORTMUX_USART0_gp = 0               ; Port Multiplexer USART0 group position
                                 .equ PORTMUX_USART00_bm = (1<<0)         ; Port Multiplexer USART0 bit 0 mask
                                 .equ PORTMUX_USART00_bp = 0              ; Port Multiplexer USART0 bit 0 position
                                 .equ PORTMUX_USART01_bm = (1<<1)         ; Port Multiplexer USART0 bit 1 mask
                                 .equ PORTMUX_USART01_bp = 1              ; Port Multiplexer USART0 bit 1 position
                                 .equ PORTMUX_USART1_gm = 0x0C            ; Port Multiplexer USART1 group mask
                                 .equ PORTMUX_USART1_gp = 2               ; Port Multiplexer USART1 group position
                                 .equ PORTMUX_USART10_bm = (1<<2)         ; Port Multiplexer USART1 bit 0 mask
                                 .equ PORTMUX_USART10_bp = 2              ; Port Multiplexer USART1 bit 0 position
                                 .equ PORTMUX_USART11_bm = (1<<3)         ; Port Multiplexer USART1 bit 1 mask
                                 .equ PORTMUX_USART11_bp = 3              ; Port Multiplexer USART1 bit 1 position
                                 .equ PORTMUX_USART2_gm = 0x30            ; Port Multiplexer USART2 group mask
                                 .equ PORTMUX_USART2_gp = 4               ; Port Multiplexer USART2 group position
                                 .equ PORTMUX_USART20_bm = (1<<4)         ; Port Multiplexer USART2 bit 0 mask
                                 .equ PORTMUX_USART20_bp = 4              ; Port Multiplexer USART2 bit 0 position
                                 .equ PORTMUX_USART21_bm = (1<<5)         ; Port Multiplexer USART2 bit 1 mask
                                 .equ PORTMUX_USART21_bp = 5              ; Port Multiplexer USART2 bit 1 position
                                 .equ PORTMUX_USART3_gm = 0xC0            ; Port Multiplexer USART3 group mask
                                 .equ PORTMUX_USART3_gp = 6               ; Port Multiplexer USART3 group position
                                 .equ PORTMUX_USART30_bm = (1<<6)         ; Port Multiplexer USART3 bit 0 mask
                                 .equ PORTMUX_USART30_bp = 6              ; Port Multiplexer USART3 bit 0 position
                                 .equ PORTMUX_USART31_bm = (1<<7)         ; Port Multiplexer USART3 bit 1 mask
                                 .equ PORTMUX_USART31_bp = 7              ; Port Multiplexer USART3 bit 1 position
                                 
                                 ; Port Multiplexer TCA0 select
                                 .equ PORTMUX_TCA0_PORTA_gc = (0x00<<0)   ; TCA0 pins on PA[5:0]
                                 .equ PORTMUX_TCA0_PORTB_gc = (0x01<<0)   ; TCA0 pins on PB[5:0]
                                 .equ PORTMUX_TCA0_PORTC_gc = (0x02<<0)   ; TCA0 pins on PC[5:0]
                                 .equ PORTMUX_TCA0_PORTD_gc = (0x03<<0)   ; TCA0 pins on PD[5:0]
                                 .equ PORTMUX_TCA0_PORTE_gc = (0x04<<0)   ; TCA0 pins on PE[5:0]
                                 .equ PORTMUX_TCA0_PORTF_gc = (0x05<<0)   ; TCA0 pins on PF[5:0]
                                 
                                 ; Port Multiplexer SPI0 select
                                 .equ PORTMUX_SPI0_DEFAULT_gc = (0x00<<0) ; SPI0 on PA[7:4]
                                 .equ PORTMUX_SPI0_ALT1_gc = (0x01<<0)    ; SPI0 on PC[3:0]
                                 .equ PORTMUX_SPI0_ALT2_gc = (0x02<<0)    ; SPI0 on PE[3:0]
                                 .equ PORTMUX_SPI0_NONE_gc = (0x03<<0)    ; Not connected to any pins
                                 
                                 ; Port Multiplexer TWI0 select
                                 .equ PORTMUX_TWI0_DEFAULT_gc = (0x00<<4) ; SCL/SDA on PA[3:2], Slave mode on PC[3:2] in dual TWI mode
                                 .equ PORTMUX_TWI0_ALT1_gc = (0x01<<4)    ; SCL/SDA on PA[3:2], Slave mode on PF[3:2] in dual TWI mode
                                 .equ PORTMUX_TWI0_ALT2_gc = (0x02<<4)    ; SCL/SDA on PC[3:2], Slave mode on PF[3:2] in dual TWI mode
                                 .equ PORTMUX_TWI0_NONE_gc = (0x03<<4)    ; Not connected to any pins
                                 
                                 ; Port Multiplexer USART0 select
                                 .equ PORTMUX_USART0_DEFAULT_gc = (0x00<<0) ; USART0 on PA[3:0]
                                 .equ PORTMUX_USART0_ALT1_gc = (0x01<<0)  ; USART0 on PA[7:4]
                                 .equ PORTMUX_USART0_NONE_gc = (0x03<<0)  ; Not connected to any pins
                                 
                                 ; Port Multiplexer USART1 select
                                 .equ PORTMUX_USART1_DEFAULT_gc = (0x00<<2) ; USART1 on PC[3:0]
                                 .equ PORTMUX_USART1_ALT1_gc = (0x01<<2)  ; USART1 on PC[7:4]
                                 .equ PORTMUX_USART1_NONE_gc = (0x03<<2)  ; Not connected to any pins
                                 
                                 ; Port Multiplexer USART2 select
                                 .equ PORTMUX_USART2_DEFAULT_gc = (0x00<<4) ; USART2 on PF[3:0]
                                 .equ PORTMUX_USART2_ALT1_gc = (0x01<<4)  ; USART2 on PF[6:4]
                                 .equ PORTMUX_USART2_NONE_gc = (0x03<<4)  ; Not connected to any pins
                                 
                                 ; Port Multiplexer USART3 select
                                 .equ PORTMUX_USART3_DEFAULT_gc = (0x00<<6) ; USART3 on PB[3:0]
                                 .equ PORTMUX_USART3_ALT1_gc = (0x01<<6)  ; USART3 on PB[5:4]
                                 .equ PORTMUX_USART3_NONE_gc = (0x03<<6)  ; Not connected to any pins
                                 
                                 
                                 ;*************************************************************************
                                 ;** RSTCTRL - Reset controller
                                 ;*************************************************************************
                                 
                                 ; RSTCTRL_RSTFR masks
                                 .equ RSTCTRL_BORF_bm = 0x02              ; Brown out detector Reset flag bit mask
                                 .equ RSTCTRL_BORF_bp = 1                 ; Brown out detector Reset flag bit position
                                 .equ RSTCTRL_EXTRF_bm = 0x04             ; External Reset flag bit mask
                                 .equ RSTCTRL_EXTRF_bp = 2                ; External Reset flag bit position
                                 .equ RSTCTRL_PORF_bm = 0x01              ; Power on Reset flag bit mask
                                 .equ RSTCTRL_PORF_bp = 0                 ; Power on Reset flag bit position
                                 .equ RSTCTRL_SWRF_bm = 0x10              ; Software Reset flag bit mask
                                 .equ RSTCTRL_SWRF_bp = 4                 ; Software Reset flag bit position
                                 .equ RSTCTRL_UPDIRF_bm = 0x20            ; UPDI Reset flag bit mask
                                 .equ RSTCTRL_UPDIRF_bp = 5               ; UPDI Reset flag bit position
                                 .equ RSTCTRL_WDRF_bm = 0x08              ; Watch dog Reset flag bit mask
                                 .equ RSTCTRL_WDRF_bp = 3                 ; Watch dog Reset flag bit position
                                 
                                 ; RSTCTRL_SWRR masks
                                 .equ RSTCTRL_SWRE_bm = 0x01              ; Software reset enable bit mask
                                 .equ RSTCTRL_SWRE_bp = 0                 ; Software reset enable bit position
                                 
                                 
                                 ;*************************************************************************
                                 ;** RTC - Real-Time Counter
                                 ;*************************************************************************
                                 
                                 ; RTC_CALIB masks
                                 .equ RTC_ERROR_gm = 0x7F                 ; Error Correction Value group mask
                                 .equ RTC_ERROR_gp = 0                    ; Error Correction Value group position
                                 .equ RTC_ERROR0_bm = (1<<0)              ; Error Correction Value bit 0 mask
                                 .equ RTC_ERROR0_bp = 0                   ; Error Correction Value bit 0 position
                                 .equ RTC_ERROR1_bm = (1<<1)              ; Error Correction Value bit 1 mask
                                 .equ RTC_ERROR1_bp = 1                   ; Error Correction Value bit 1 position
                                 .equ RTC_ERROR2_bm = (1<<2)              ; Error Correction Value bit 2 mask
                                 .equ RTC_ERROR2_bp = 2                   ; Error Correction Value bit 2 position
                                 .equ RTC_ERROR3_bm = (1<<3)              ; Error Correction Value bit 3 mask
                                 .equ RTC_ERROR3_bp = 3                   ; Error Correction Value bit 3 position
                                 .equ RTC_ERROR4_bm = (1<<4)              ; Error Correction Value bit 4 mask
                                 .equ RTC_ERROR4_bp = 4                   ; Error Correction Value bit 4 position
                                 .equ RTC_ERROR5_bm = (1<<5)              ; Error Correction Value bit 5 mask
                                 .equ RTC_ERROR5_bp = 5                   ; Error Correction Value bit 5 position
                                 .equ RTC_ERROR6_bm = (1<<6)              ; Error Correction Value bit 6 mask
                                 .equ RTC_ERROR6_bp = 6                   ; Error Correction Value bit 6 position
                                 .equ RTC_SIGN_bm = 0x80                  ; Error Correction Sign Bit bit mask
                                 .equ RTC_SIGN_bp = 7                     ; Error Correction Sign Bit bit position
                                 
                                 ; RTC_CLKSEL masks
                                 .equ RTC_CLKSEL_gm = 0x03                ; Clock Select group mask
                                 .equ RTC_CLKSEL_gp = 0                   ; Clock Select group position
                                 .equ RTC_CLKSEL0_bm = (1<<0)             ; Clock Select bit 0 mask
                                 .equ RTC_CLKSEL0_bp = 0                  ; Clock Select bit 0 position
                                 .equ RTC_CLKSEL1_bm = (1<<1)             ; Clock Select bit 1 mask
                                 .equ RTC_CLKSEL1_bp = 1                  ; Clock Select bit 1 position
                                 
                                 ; RTC_CTRLA masks
                                 .equ RTC_PRESCALER_gm = 0x78             ; Prescaling Factor group mask
                                 .equ RTC_PRESCALER_gp = 3                ; Prescaling Factor group position
                                 .equ RTC_PRESCALER0_bm = (1<<3)          ; Prescaling Factor bit 0 mask
                                 .equ RTC_PRESCALER0_bp = 3               ; Prescaling Factor bit 0 position
                                 .equ RTC_PRESCALER1_bm = (1<<4)          ; Prescaling Factor bit 1 mask
                                 .equ RTC_PRESCALER1_bp = 4               ; Prescaling Factor bit 1 position
                                 .equ RTC_PRESCALER2_bm = (1<<5)          ; Prescaling Factor bit 2 mask
                                 .equ RTC_PRESCALER2_bp = 5               ; Prescaling Factor bit 2 position
                                 .equ RTC_PRESCALER3_bm = (1<<6)          ; Prescaling Factor bit 3 mask
                                 .equ RTC_PRESCALER3_bp = 6               ; Prescaling Factor bit 3 position
                                 .equ RTC_RTCEN_bm = 0x01                 ; Enable bit mask
                                 .equ RTC_RTCEN_bp = 0                    ; Enable bit position
                                 .equ RTC_RUNSTDBY_bm = 0x80              ; Run In Standby bit mask
                                 .equ RTC_RUNSTDBY_bp = 7                 ; Run In Standby bit position
                                 
                                 ; RTC_DBGCTRL masks
                                 .equ RTC_DBGRUN_bm = 0x01                ; Run in debug bit mask
                                 .equ RTC_DBGRUN_bp = 0                   ; Run in debug bit position
                                 
                                 ; RTC_INTCTRL masks
                                 .equ RTC_CMP_bm = 0x02                   ; Compare Match Interrupt enable bit mask
                                 .equ RTC_CMP_bp = 1                      ; Compare Match Interrupt enable bit position
                                 .equ RTC_OVF_bm = 0x01                   ; Overflow Interrupt enable bit mask
                                 .equ RTC_OVF_bp = 0                      ; Overflow Interrupt enable bit position
                                 
                                 ; RTC_INTFLAGS masks
                                 ; Masks for RTC_CMP already defined
                                 ; Masks for RTC_OVF already defined
                                 
                                 ; RTC_PITCTRLA masks
                                 .equ RTC_PERIOD_gm = 0x78                ; Period group mask
                                 .equ RTC_PERIOD_gp = 3                   ; Period group position
                                 .equ RTC_PERIOD0_bm = (1<<3)             ; Period bit 0 mask
                                 .equ RTC_PERIOD0_bp = 3                  ; Period bit 0 position
                                 .equ RTC_PERIOD1_bm = (1<<4)             ; Period bit 1 mask
                                 .equ RTC_PERIOD1_bp = 4                  ; Period bit 1 position
                                 .equ RTC_PERIOD2_bm = (1<<5)             ; Period bit 2 mask
                                 .equ RTC_PERIOD2_bp = 5                  ; Period bit 2 position
                                 .equ RTC_PERIOD3_bm = (1<<6)             ; Period bit 3 mask
                                 .equ RTC_PERIOD3_bp = 6                  ; Period bit 3 position
                                 .equ RTC_PITEN_bm = 0x01                 ; Enable bit mask
                                 .equ RTC_PITEN_bp = 0                    ; Enable bit position
                                 
                                 ; RTC_PITDBGCTRL masks
                                 ; Masks for RTC_DBGRUN already defined
                                 
                                 ; RTC_PITINTCTRL masks
                                 .equ RTC_PI_bm = 0x01                    ; Periodic Interrupt bit mask
                                 .equ RTC_PI_bp = 0                       ; Periodic Interrupt bit position
                                 
                                 ; RTC_PITINTFLAGS masks
                                 ; Masks for RTC_PI already defined
                                 
                                 ; RTC_PITSTATUS masks
                                 .equ RTC_CTRLBUSY_bm = 0x01              ; CTRLA Synchronization Busy Flag bit mask
                                 .equ RTC_CTRLBUSY_bp = 0                 ; CTRLA Synchronization Busy Flag bit position
                                 
                                 ; RTC_STATUS masks
                                 .equ RTC_CMPBUSY_bm = 0x08               ; Comparator Synchronization Busy Flag bit mask
                                 .equ RTC_CMPBUSY_bp = 3                  ; Comparator Synchronization Busy Flag bit position
                                 .equ RTC_CNTBUSY_bm = 0x02               ; Count Synchronization Busy Flag bit mask
                                 .equ RTC_CNTBUSY_bp = 1                  ; Count Synchronization Busy Flag bit position
                                 .equ RTC_CTRLABUSY_bm = 0x01             ; CTRLA Synchronization Busy Flag bit mask
                                 .equ RTC_CTRLABUSY_bp = 0                ; CTRLA Synchronization Busy Flag bit position
                                 .equ RTC_PERBUSY_bm = 0x04               ; Period Synchronization Busy Flag bit mask
                                 .equ RTC_PERBUSY_bp = 2                  ; Period Synchronization Busy Flag bit position
                                 
                                 ; Clock Select select
                                 .equ RTC_CLKSEL_INT32K_gc = (0x00<<0)    ; Internal 32kHz OSC
                                 .equ RTC_CLKSEL_INT1K_gc = (0x01<<0)     ; Internal 1kHz OSC
                                 .equ RTC_CLKSEL_TOSC32K_gc = (0x02<<0)   ; 32KHz Crystal OSC
                                 .equ RTC_CLKSEL_EXTCLK_gc = (0x03<<0)    ; External Clock
                                 
                                 ; Prescaling Factor select
                                 .equ RTC_PRESCALER_DIV1_gc = (0x00<<3)   ; RTC Clock / 1
                                 .equ RTC_PRESCALER_DIV2_gc = (0x01<<3)   ; RTC Clock / 2
                                 .equ RTC_PRESCALER_DIV4_gc = (0x02<<3)   ; RTC Clock / 4
                                 .equ RTC_PRESCALER_DIV8_gc = (0x03<<3)   ; RTC Clock / 8
                                 .equ RTC_PRESCALER_DIV16_gc = (0x04<<3)  ; RTC Clock / 16
                                 .equ RTC_PRESCALER_DIV32_gc = (0x05<<3)  ; RTC Clock / 32
                                 .equ RTC_PRESCALER_DIV64_gc = (0x06<<3)  ; RTC Clock / 64
                                 .equ RTC_PRESCALER_DIV128_gc = (0x07<<3) ; RTC Clock / 128
                                 .equ RTC_PRESCALER_DIV256_gc = (0x08<<3) ; RTC Clock / 256
                                 .equ RTC_PRESCALER_DIV512_gc = (0x09<<3) ; RTC Clock / 512
                                 .equ RTC_PRESCALER_DIV1024_gc = (0x0A<<3) ; RTC Clock / 1024
                                 .equ RTC_PRESCALER_DIV2048_gc = (0x0B<<3) ; RTC Clock / 2048
                                 .equ RTC_PRESCALER_DIV4096_gc = (0x0C<<3) ; RTC Clock / 4096
                                 .equ RTC_PRESCALER_DIV8192_gc = (0x0D<<3) ; RTC Clock / 8192
                                 .equ RTC_PRESCALER_DIV16384_gc = (0x0E<<3) ; RTC Clock / 16384
                                 .equ RTC_PRESCALER_DIV32768_gc = (0x0F<<3) ; RTC Clock / 32768
                                 
                                 ; Period select
                                 .equ RTC_PERIOD_OFF_gc = (0x00<<3)       ; Off
                                 .equ RTC_PERIOD_CYC4_gc = (0x01<<3)      ; RTC Clock Cycles 4
                                 .equ RTC_PERIOD_CYC8_gc = (0x02<<3)      ; RTC Clock Cycles 8
                                 .equ RTC_PERIOD_CYC16_gc = (0x03<<3)     ; RTC Clock Cycles 16
                                 .equ RTC_PERIOD_CYC32_gc = (0x04<<3)     ; RTC Clock Cycles 32
                                 .equ RTC_PERIOD_CYC64_gc = (0x05<<3)     ; RTC Clock Cycles 64
                                 .equ RTC_PERIOD_CYC128_gc = (0x06<<3)    ; RTC Clock Cycles 128
                                 .equ RTC_PERIOD_CYC256_gc = (0x07<<3)    ; RTC Clock Cycles 256
                                 .equ RTC_PERIOD_CYC512_gc = (0x08<<3)    ; RTC Clock Cycles 512
                                 .equ RTC_PERIOD_CYC1024_gc = (0x09<<3)   ; RTC Clock Cycles 1024
                                 .equ RTC_PERIOD_CYC2048_gc = (0x0A<<3)   ; RTC Clock Cycles 2048
                                 .equ RTC_PERIOD_CYC4096_gc = (0x0B<<3)   ; RTC Clock Cycles 4096
                                 .equ RTC_PERIOD_CYC8192_gc = (0x0C<<3)   ; RTC Clock Cycles 8192
                                 .equ RTC_PERIOD_CYC16384_gc = (0x0D<<3)  ; RTC Clock Cycles 16384
                                 .equ RTC_PERIOD_CYC32768_gc = (0x0E<<3)  ; RTC Clock Cycles 32768
                                 
                                 
                                 ;*************************************************************************
                                 ;** SIGROW - Signature row
                                 ;*************************************************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** SLPCTRL - Sleep Controller
                                 ;*************************************************************************
                                 
                                 ; SLPCTRL_CTRLA masks
                                 .equ SLPCTRL_SEN_bm = 0x01               ; Sleep enable bit mask
                                 .equ SLPCTRL_SEN_bp = 0                  ; Sleep enable bit position
                                 .equ SLPCTRL_SMODE_gm = 0x06             ; Sleep mode group mask
                                 .equ SLPCTRL_SMODE_gp = 1                ; Sleep mode group position
                                 .equ SLPCTRL_SMODE0_bm = (1<<1)          ; Sleep mode bit 0 mask
                                 .equ SLPCTRL_SMODE0_bp = 1               ; Sleep mode bit 0 position
                                 .equ SLPCTRL_SMODE1_bm = (1<<2)          ; Sleep mode bit 1 mask
                                 .equ SLPCTRL_SMODE1_bp = 2               ; Sleep mode bit 1 position
                                 
                                 ; Sleep mode select
                                 .equ SLPCTRL_SMODE_IDLE_gc = (0x00<<1)   ; Idle mode
                                 .equ SLPCTRL_SMODE_STDBY_gc = (0x01<<1)  ; Standby Mode
                                 .equ SLPCTRL_SMODE_PDOWN_gc = (0x02<<1)  ; Power-down Mode
                                 
                                 
                                 ;*************************************************************************
                                 ;** SPI - Serial Peripheral Interface
                                 ;*************************************************************************
                                 
                                 ; SPI_CTRLA masks
                                 .equ SPI_CLK2X_bm = 0x10                 ; Enable Double Speed bit mask
                                 .equ SPI_CLK2X_bp = 4                    ; Enable Double Speed bit position
                                 .equ SPI_DORD_bm = 0x40                  ; Data Order Setting bit mask
                                 .equ SPI_DORD_bp = 6                     ; Data Order Setting bit position
                                 .equ SPI_ENABLE_bm = 0x01                ; Enable Module bit mask
                                 .equ SPI_ENABLE_bp = 0                   ; Enable Module bit position
                                 .equ SPI_MASTER_bm = 0x20                ; Master Operation Enable bit mask
                                 .equ SPI_MASTER_bp = 5                   ; Master Operation Enable bit position
                                 .equ SPI_PRESC_gm = 0x06                 ; Prescaler group mask
                                 .equ SPI_PRESC_gp = 1                    ; Prescaler group position
                                 .equ SPI_PRESC0_bm = (1<<1)              ; Prescaler bit 0 mask
                                 .equ SPI_PRESC0_bp = 1                   ; Prescaler bit 0 position
                                 .equ SPI_PRESC1_bm = (1<<2)              ; Prescaler bit 1 mask
                                 .equ SPI_PRESC1_bp = 2                   ; Prescaler bit 1 position
                                 
                                 ; SPI_CTRLB masks
                                 .equ SPI_BUFEN_bm = 0x80                 ; Buffer Mode Enable bit mask
                                 .equ SPI_BUFEN_bp = 7                    ; Buffer Mode Enable bit position
                                 .equ SPI_BUFWR_bm = 0x40                 ; Buffer Write Mode bit mask
                                 .equ SPI_BUFWR_bp = 6                    ; Buffer Write Mode bit position
                                 .equ SPI_MODE_gm = 0x03                  ; SPI Mode group mask
                                 .equ SPI_MODE_gp = 0                     ; SPI Mode group position
                                 .equ SPI_MODE0_bm = (1<<0)               ; SPI Mode bit 0 mask
                                 .equ SPI_MODE0_bp = 0                    ; SPI Mode bit 0 position
                                 .equ SPI_MODE1_bm = (1<<1)               ; SPI Mode bit 1 mask
                                 .equ SPI_MODE1_bp = 1                    ; SPI Mode bit 1 position
                                 .equ SPI_SSD_bm = 0x04                   ; Slave Select Disable bit mask
                                 .equ SPI_SSD_bp = 2                      ; Slave Select Disable bit position
                                 
                                 ; SPI_INTCTRL masks
                                 .equ SPI_DREIE_bm = 0x20                 ; Data Register Empty Interrupt Enable bit mask
                                 .equ SPI_DREIE_bp = 5                    ; Data Register Empty Interrupt Enable bit position
                                 .equ SPI_IE_bm = 0x01                    ; Interrupt Enable bit mask
                                 .equ SPI_IE_bp = 0                       ; Interrupt Enable bit position
                                 .equ SPI_RXCIE_bm = 0x80                 ; Receive Complete Interrupt Enable bit mask
                                 .equ SPI_RXCIE_bp = 7                    ; Receive Complete Interrupt Enable bit position
                                 .equ SPI_SSIE_bm = 0x10                  ; Slave Select Trigger Interrupt Enable bit mask
                                 .equ SPI_SSIE_bp = 4                     ; Slave Select Trigger Interrupt Enable bit position
                                 .equ SPI_TXCIE_bm = 0x40                 ; Transfer Complete Interrupt Enable bit mask
                                 .equ SPI_TXCIE_bp = 6                    ; Transfer Complete Interrupt Enable bit position
                                 
                                 ; SPI_INTFLAGS masks
                                 .equ SPI_BUFOVF_bm = 0x01                ; Buffer Overflow bit mask
                                 .equ SPI_BUFOVF_bp = 0                   ; Buffer Overflow bit position
                                 .equ SPI_DREIF_bm = 0x20                 ; Data Register Empty Interrupt Flag bit mask
                                 .equ SPI_DREIF_bp = 5                    ; Data Register Empty Interrupt Flag bit position
                                 .equ SPI_RXCIF_bm = 0x80                 ; Receive Complete Interrupt Flag bit mask
                                 .equ SPI_RXCIF_bp = 7                    ; Receive Complete Interrupt Flag bit position
                                 .equ SPI_SSIF_bm = 0x10                  ; Slave Select Trigger Interrupt Flag bit mask
                                 .equ SPI_SSIF_bp = 4                     ; Slave Select Trigger Interrupt Flag bit position
                                 .equ SPI_TXCIF_bm = 0x40                 ; Transfer Complete Interrupt Flag bit mask
                                 .equ SPI_TXCIF_bp = 6                    ; Transfer Complete Interrupt Flag bit position
                                 .equ SPI_IF_bm = 0x80                    ; Interrupt Flag bit mask
                                 .equ SPI_IF_bp = 7                       ; Interrupt Flag bit position
                                 .equ SPI_WRCOL_bm = 0x40                 ; Write Collision bit mask
                                 .equ SPI_WRCOL_bp = 6                    ; Write Collision bit position
                                 
                                 ; Prescaler select
                                 .equ SPI_PRESC_DIV4_gc = (0x00<<1)       ; System Clock / 4
                                 .equ SPI_PRESC_DIV16_gc = (0x01<<1)      ; System Clock / 16
                                 .equ SPI_PRESC_DIV64_gc = (0x02<<1)      ; System Clock / 64
                                 .equ SPI_PRESC_DIV128_gc = (0x03<<1)     ; System Clock / 128
                                 
                                 ; SPI Mode select
                                 .equ SPI_MODE_0_gc = (0x00<<0)           ; SPI Mode 0
                                 .equ SPI_MODE_1_gc = (0x01<<0)           ; SPI Mode 1
                                 .equ SPI_MODE_2_gc = (0x02<<0)           ; SPI Mode 2
                                 .equ SPI_MODE_3_gc = (0x03<<0)           ; SPI Mode 3
                                 
                                 
                                 ;*************************************************************************
                                 ;** SYSCFG - System Configuration Registers
                                 ;*************************************************************************
                                 
                                 ; SYSCFG_EXTBRK masks
                                 .equ SYSCFG_ENEXTBRK_bm = 0x01           ; External break enable bit mask
                                 .equ SYSCFG_ENEXTBRK_bp = 0              ; External break enable bit position
                                 
                                 ; SYSCFG_OCDMS masks
                                 .equ SYSCFG_OCDMR_bm = 0x01              ; OCD Message Read bit mask
                                 .equ SYSCFG_OCDMR_bp = 0                 ; OCD Message Read bit position
                                 
                                 
                                 ;*************************************************************************
                                 ;** TCA - 16-bit Timer/Counter Type A
                                 ;*************************************************************************
                                 
                                 ; TCA_SINGLE_CTRLA masks
                                 .equ TCA_SINGLE_CLKSEL_gm = 0x0E         ; Clock Selection group mask
                                 .equ TCA_SINGLE_CLKSEL_gp = 1            ; Clock Selection group position
                                 .equ TCA_SINGLE_CLKSEL0_bm = (1<<1)      ; Clock Selection bit 0 mask
                                 .equ TCA_SINGLE_CLKSEL0_bp = 1           ; Clock Selection bit 0 position
                                 .equ TCA_SINGLE_CLKSEL1_bm = (1<<2)      ; Clock Selection bit 1 mask
                                 .equ TCA_SINGLE_CLKSEL1_bp = 2           ; Clock Selection bit 1 position
                                 .equ TCA_SINGLE_CLKSEL2_bm = (1<<3)      ; Clock Selection bit 2 mask
                                 .equ TCA_SINGLE_CLKSEL2_bp = 3           ; Clock Selection bit 2 position
                                 .equ TCA_SINGLE_ENABLE_bm = 0x01         ; Module Enable bit mask
                                 .equ TCA_SINGLE_ENABLE_bp = 0            ; Module Enable bit position
                                 
                                 ; TCA_SINGLE_CTRLB masks
                                 .equ TCA_SINGLE_ALUPD_bm = 0x08          ; Auto Lock Update bit mask
                                 .equ TCA_SINGLE_ALUPD_bp = 3             ; Auto Lock Update bit position
                                 .equ TCA_SINGLE_CMP0EN_bm = 0x10         ; Compare 0 Enable bit mask
                                 .equ TCA_SINGLE_CMP0EN_bp = 4            ; Compare 0 Enable bit position
                                 .equ TCA_SINGLE_CMP1EN_bm = 0x20         ; Compare 1 Enable bit mask
                                 .equ TCA_SINGLE_CMP1EN_bp = 5            ; Compare 1 Enable bit position
                                 .equ TCA_SINGLE_CMP2EN_bm = 0x40         ; Compare 2 Enable bit mask
                                 .equ TCA_SINGLE_CMP2EN_bp = 6            ; Compare 2 Enable bit position
                                 .equ TCA_SINGLE_WGMODE_gm = 0x07         ; Waveform generation mode group mask
                                 .equ TCA_SINGLE_WGMODE_gp = 0            ; Waveform generation mode group position
                                 .equ TCA_SINGLE_WGMODE0_bm = (1<<0)      ; Waveform generation mode bit 0 mask
                                 .equ TCA_SINGLE_WGMODE0_bp = 0           ; Waveform generation mode bit 0 position
                                 .equ TCA_SINGLE_WGMODE1_bm = (1<<1)      ; Waveform generation mode bit 1 mask
                                 .equ TCA_SINGLE_WGMODE1_bp = 1           ; Waveform generation mode bit 1 position
                                 .equ TCA_SINGLE_WGMODE2_bm = (1<<2)      ; Waveform generation mode bit 2 mask
                                 .equ TCA_SINGLE_WGMODE2_bp = 2           ; Waveform generation mode bit 2 position
                                 
                                 ; TCA_SINGLE_CTRLC masks
                                 .equ TCA_SINGLE_CMP0OV_bm = 0x01         ; Compare 0 Waveform Output Value bit mask
                                 .equ TCA_SINGLE_CMP0OV_bp = 0            ; Compare 0 Waveform Output Value bit position
                                 .equ TCA_SINGLE_CMP1OV_bm = 0x02         ; Compare 1 Waveform Output Value bit mask
                                 .equ TCA_SINGLE_CMP1OV_bp = 1            ; Compare 1 Waveform Output Value bit position
                                 .equ TCA_SINGLE_CMP2OV_bm = 0x04         ; Compare 2 Waveform Output Value bit mask
                                 .equ TCA_SINGLE_CMP2OV_bp = 2            ; Compare 2 Waveform Output Value bit position
                                 
                                 ; TCA_SINGLE_CTRLD masks
                                 .equ TCA_SINGLE_SPLITM_bm = 0x01         ; Split Mode Enable bit mask
                                 .equ TCA_SINGLE_SPLITM_bp = 0            ; Split Mode Enable bit position
                                 
                                 ; TCA_SINGLE_CTRLECLR masks
                                 .equ TCA_SINGLE_CMD_gm = 0x0C            ; Command group mask
                                 .equ TCA_SINGLE_CMD_gp = 2               ; Command group position
                                 .equ TCA_SINGLE_CMD0_bm = (1<<2)         ; Command bit 0 mask
                                 .equ TCA_SINGLE_CMD0_bp = 2              ; Command bit 0 position
                                 .equ TCA_SINGLE_CMD1_bm = (1<<3)         ; Command bit 1 mask
                                 .equ TCA_SINGLE_CMD1_bp = 3              ; Command bit 1 position
                                 .equ TCA_SINGLE_DIR_bm = 0x01            ; Direction bit mask
                                 .equ TCA_SINGLE_DIR_bp = 0               ; Direction bit position
                                 .equ TCA_SINGLE_LUPD_bm = 0x02           ; Lock Update bit mask
                                 .equ TCA_SINGLE_LUPD_bp = 1              ; Lock Update bit position
                                 
                                 ; TCA_SINGLE_CTRLESET masks
                                 ; Masks for TCA_SINGLE_CMD already defined
                                 ; Masks for TCA_SINGLE_DIR already defined
                                 ; Masks for TCA_SINGLE_LUPD already defined
                                 
                                 ; TCA_SINGLE_CTRLFCLR masks
                                 .equ TCA_SINGLE_CMP0BV_bm = 0x02         ; Compare 0 Buffer Valid bit mask
                                 .equ TCA_SINGLE_CMP0BV_bp = 1            ; Compare 0 Buffer Valid bit position
                                 .equ TCA_SINGLE_CMP1BV_bm = 0x04         ; Compare 1 Buffer Valid bit mask
                                 .equ TCA_SINGLE_CMP1BV_bp = 2            ; Compare 1 Buffer Valid bit position
                                 .equ TCA_SINGLE_CMP2BV_bm = 0x08         ; Compare 2 Buffer Valid bit mask
                                 .equ TCA_SINGLE_CMP2BV_bp = 3            ; Compare 2 Buffer Valid bit position
                                 .equ TCA_SINGLE_PERBV_bm = 0x01          ; Period Buffer Valid bit mask
                                 .equ TCA_SINGLE_PERBV_bp = 0             ; Period Buffer Valid bit position
                                 
                                 ; TCA_SINGLE_CTRLFSET masks
                                 ; Masks for TCA_SINGLE_CMP0BV already defined
                                 ; Masks for TCA_SINGLE_CMP1BV already defined
                                 ; Masks for TCA_SINGLE_CMP2BV already defined
                                 ; Masks for TCA_SINGLE_PERBV already defined
                                 
                                 ; TCA_SINGLE_DBGCTRL masks
                                 .equ TCA_SINGLE_DBGRUN_bm = 0x01         ; Debug Run bit mask
                                 .equ TCA_SINGLE_DBGRUN_bp = 0            ; Debug Run bit position
                                 
                                 ; TCA_SINGLE_EVCTRL masks
                                 .equ TCA_SINGLE_CNTEI_bm = 0x01          ; Count on Event Input bit mask
                                 .equ TCA_SINGLE_CNTEI_bp = 0             ; Count on Event Input bit position
                                 .equ TCA_SINGLE_EVACT_gm = 0x06          ; Event Action group mask
                                 .equ TCA_SINGLE_EVACT_gp = 1             ; Event Action group position
                                 .equ TCA_SINGLE_EVACT0_bm = (1<<1)       ; Event Action bit 0 mask
                                 .equ TCA_SINGLE_EVACT0_bp = 1            ; Event Action bit 0 position
                                 .equ TCA_SINGLE_EVACT1_bm = (1<<2)       ; Event Action bit 1 mask
                                 .equ TCA_SINGLE_EVACT1_bp = 2            ; Event Action bit 1 position
                                 
                                 ; TCA_SINGLE_INTCTRL masks
                                 .equ TCA_SINGLE_CMP0_bm = 0x10           ; Compare 0 Interrupt bit mask
                                 .equ TCA_SINGLE_CMP0_bp = 4              ; Compare 0 Interrupt bit position
                                 .equ TCA_SINGLE_CMP1_bm = 0x20           ; Compare 1 Interrupt bit mask
                                 .equ TCA_SINGLE_CMP1_bp = 5              ; Compare 1 Interrupt bit position
                                 .equ TCA_SINGLE_CMP2_bm = 0x40           ; Compare 2 Interrupt bit mask
                                 .equ TCA_SINGLE_CMP2_bp = 6              ; Compare 2 Interrupt bit position
                                 .equ TCA_SINGLE_OVF_bm = 0x01            ; Overflow Interrupt bit mask
                                 .equ TCA_SINGLE_OVF_bp = 0               ; Overflow Interrupt bit position
                                 
                                 ; TCA_SINGLE_INTFLAGS masks
                                 ; Masks for TCA_SINGLE_CMP0 already defined
                                 ; Masks for TCA_SINGLE_CMP1 already defined
                                 ; Masks for TCA_SINGLE_CMP2 already defined
                                 ; Masks for TCA_SINGLE_OVF already defined
                                 
                                 ; TCA_SPLIT_CTRLA masks
                                 .equ TCA_SPLIT_CLKSEL_gm = 0x0E          ; Clock Selection group mask
                                 .equ TCA_SPLIT_CLKSEL_gp = 1             ; Clock Selection group position
                                 .equ TCA_SPLIT_CLKSEL0_bm = (1<<1)       ; Clock Selection bit 0 mask
                                 .equ TCA_SPLIT_CLKSEL0_bp = 1            ; Clock Selection bit 0 position
                                 .equ TCA_SPLIT_CLKSEL1_bm = (1<<2)       ; Clock Selection bit 1 mask
                                 .equ TCA_SPLIT_CLKSEL1_bp = 2            ; Clock Selection bit 1 position
                                 .equ TCA_SPLIT_CLKSEL2_bm = (1<<3)       ; Clock Selection bit 2 mask
                                 .equ TCA_SPLIT_CLKSEL2_bp = 3            ; Clock Selection bit 2 position
                                 .equ TCA_SPLIT_ENABLE_bm = 0x01          ; Module Enable bit mask
                                 .equ TCA_SPLIT_ENABLE_bp = 0             ; Module Enable bit position
                                 
                                 ; TCA_SPLIT_CTRLB masks
                                 .equ TCA_SPLIT_HCMP0EN_bm = 0x10         ; High Compare 0 Enable bit mask
                                 .equ TCA_SPLIT_HCMP0EN_bp = 4            ; High Compare 0 Enable bit position
                                 .equ TCA_SPLIT_HCMP1EN_bm = 0x20         ; High Compare 1 Enable bit mask
                                 .equ TCA_SPLIT_HCMP1EN_bp = 5            ; High Compare 1 Enable bit position
                                 .equ TCA_SPLIT_HCMP2EN_bm = 0x40         ; High Compare 2 Enable bit mask
                                 .equ TCA_SPLIT_HCMP2EN_bp = 6            ; High Compare 2 Enable bit position
                                 .equ TCA_SPLIT_LCMP0EN_bm = 0x01         ; Low Compare 0 Enable bit mask
                                 .equ TCA_SPLIT_LCMP0EN_bp = 0            ; Low Compare 0 Enable bit position
                                 .equ TCA_SPLIT_LCMP1EN_bm = 0x02         ; Low Compare 1 Enable bit mask
                                 .equ TCA_SPLIT_LCMP1EN_bp = 1            ; Low Compare 1 Enable bit position
                                 .equ TCA_SPLIT_LCMP2EN_bm = 0x04         ; Low Compare 2 Enable bit mask
                                 .equ TCA_SPLIT_LCMP2EN_bp = 2            ; Low Compare 2 Enable bit position
                                 
                                 ; TCA_SPLIT_CTRLC masks
                                 .equ TCA_SPLIT_HCMP0OV_bm = 0x10         ; High Compare 0 Output Value bit mask
                                 .equ TCA_SPLIT_HCMP0OV_bp = 4            ; High Compare 0 Output Value bit position
                                 .equ TCA_SPLIT_HCMP1OV_bm = 0x20         ; High Compare 1 Output Value bit mask
                                 .equ TCA_SPLIT_HCMP1OV_bp = 5            ; High Compare 1 Output Value bit position
                                 .equ TCA_SPLIT_HCMP2OV_bm = 0x40         ; High Compare 2 Output Value bit mask
                                 .equ TCA_SPLIT_HCMP2OV_bp = 6            ; High Compare 2 Output Value bit position
                                 .equ TCA_SPLIT_LCMP0OV_bm = 0x01         ; Low Compare 0 Output Value bit mask
                                 .equ TCA_SPLIT_LCMP0OV_bp = 0            ; Low Compare 0 Output Value bit position
                                 .equ TCA_SPLIT_LCMP1OV_bm = 0x02         ; Low Compare 1 Output Value bit mask
                                 .equ TCA_SPLIT_LCMP1OV_bp = 1            ; Low Compare 1 Output Value bit position
                                 .equ TCA_SPLIT_LCMP2OV_bm = 0x04         ; Low Compare 2 Output Value bit mask
                                 .equ TCA_SPLIT_LCMP2OV_bp = 2            ; Low Compare 2 Output Value bit position
                                 
                                 ; TCA_SPLIT_CTRLD masks
                                 .equ TCA_SPLIT_SPLITM_bm = 0x01          ; Split Mode Enable bit mask
                                 .equ TCA_SPLIT_SPLITM_bp = 0             ; Split Mode Enable bit position
                                 
                                 ; TCA_SPLIT_CTRLECLR masks
                                 .equ TCA_SPLIT_CMD_gm = 0x0C             ; Command group mask
                                 .equ TCA_SPLIT_CMD_gp = 2                ; Command group position
                                 .equ TCA_SPLIT_CMD0_bm = (1<<2)          ; Command bit 0 mask
                                 .equ TCA_SPLIT_CMD0_bp = 2               ; Command bit 0 position
                                 .equ TCA_SPLIT_CMD1_bm = (1<<3)          ; Command bit 1 mask
                                 .equ TCA_SPLIT_CMD1_bp = 3               ; Command bit 1 position
                                 
                                 ; TCA_SPLIT_CTRLESET masks
                                 ; Masks for TCA_SPLIT_CMD already defined
                                 
                                 ; TCA_SPLIT_DBGCTRL masks
                                 .equ TCA_SPLIT_DBGRUN_bm = 0x01          ; Debug Run bit mask
                                 .equ TCA_SPLIT_DBGRUN_bp = 0             ; Debug Run bit position
                                 
                                 ; TCA_SPLIT_INTCTRL masks
                                 .equ TCA_SPLIT_HUNF_bm = 0x02            ; High Underflow Interrupt Enable bit mask
                                 .equ TCA_SPLIT_HUNF_bp = 1               ; High Underflow Interrupt Enable bit position
                                 .equ TCA_SPLIT_LCMP0_bm = 0x10           ; Low Compare 0 Interrupt Enable bit mask
                                 .equ TCA_SPLIT_LCMP0_bp = 4              ; Low Compare 0 Interrupt Enable bit position
                                 .equ TCA_SPLIT_LCMP1_bm = 0x20           ; Low Compare 1 Interrupt Enable bit mask
                                 .equ TCA_SPLIT_LCMP1_bp = 5              ; Low Compare 1 Interrupt Enable bit position
                                 .equ TCA_SPLIT_LCMP2_bm = 0x40           ; Low Compare 2 Interrupt Enable bit mask
                                 .equ TCA_SPLIT_LCMP2_bp = 6              ; Low Compare 2 Interrupt Enable bit position
                                 .equ TCA_SPLIT_LUNF_bm = 0x01            ; Low Underflow Interrupt Enable bit mask
                                 .equ TCA_SPLIT_LUNF_bp = 0               ; Low Underflow Interrupt Enable bit position
                                 
                                 ; TCA_SPLIT_INTFLAGS masks
                                 ; Masks for TCA_SPLIT_HUNF already defined
                                 ; Masks for TCA_SPLIT_LCMP0 already defined
                                 ; Masks for TCA_SPLIT_LCMP1 already defined
                                 ; Masks for TCA_SPLIT_LCMP2 already defined
                                 ; Masks for TCA_SPLIT_LUNF already defined
                                 
                                 ; Clock Selection select
                                 .equ TCA_SINGLE_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
                                 .equ TCA_SINGLE_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
                                 .equ TCA_SINGLE_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
                                 .equ TCA_SINGLE_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
                                 .equ TCA_SINGLE_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
                                 .equ TCA_SINGLE_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
                                 .equ TCA_SINGLE_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
                                 .equ TCA_SINGLE_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
                                 
                                 ; Waveform generation mode select
                                 .equ TCA_SINGLE_WGMODE_NORMAL_gc = (0x00<<0) ; Normal Mode
                                 .equ TCA_SINGLE_WGMODE_FRQ_gc = (0x01<<0) ; Frequency Generation Mode
                                 .equ TCA_SINGLE_WGMODE_SINGLESLOPE_gc = (0x03<<0) ; Single Slope PWM
                                 .equ TCA_SINGLE_WGMODE_DSTOP_gc = (0x05<<0) ; Dual Slope PWM, overflow on TOP
                                 .equ TCA_SINGLE_WGMODE_DSBOTH_gc = (0x06<<0) ; Dual Slope PWM, overflow on TOP and BOTTOM
                                 .equ TCA_SINGLE_WGMODE_DSBOTTOM_gc = (0x07<<0) ; Dual Slope PWM, overflow on BOTTOM
                                 
                                 ; Command select
                                 .equ TCA_SINGLE_CMD_NONE_gc = (0x00<<2)  ; No Command
                                 .equ TCA_SINGLE_CMD_UPDATE_gc = (0x01<<2) ; Force Update
                                 .equ TCA_SINGLE_CMD_RESTART_gc = (0x02<<2) ; Force Restart
                                 .equ TCA_SINGLE_CMD_RESET_gc = (0x03<<2) ; Force Hard Reset
                                 
                                 ; Direction select
                                 .equ TCA_SINGLE_DIR_UP_gc = (0x00<<0)    ; Count up
                                 .equ TCA_SINGLE_DIR_DOWN_gc = (0x01<<0)  ; Count down
                                 
                                 ; Event Action select
                                 .equ TCA_SINGLE_EVACT_POSEDGE_gc = (0x00<<1) ; Count on positive edge event
                                 .equ TCA_SINGLE_EVACT_ANYEDGE_gc = (0x01<<1) ; Count on any edge event
                                 .equ TCA_SINGLE_EVACT_HIGHLVL_gc = (0x02<<1) ; Count on prescaled clock while event line is 1.
                                 .equ TCA_SINGLE_EVACT_UPDOWN_gc = (0x03<<1) ; Count on prescaled clock. Event controls count direction. Up-count when event line is 0, down-count when event line is 1.
                                 
                                 ; Clock Selection select
                                 .equ TCA_SPLIT_CLKSEL_DIV1_gc = (0x00<<1) ; System Clock
                                 .equ TCA_SPLIT_CLKSEL_DIV2_gc = (0x01<<1) ; System Clock / 2
                                 .equ TCA_SPLIT_CLKSEL_DIV4_gc = (0x02<<1) ; System Clock / 4
                                 .equ TCA_SPLIT_CLKSEL_DIV8_gc = (0x03<<1) ; System Clock / 8
                                 .equ TCA_SPLIT_CLKSEL_DIV16_gc = (0x04<<1) ; System Clock / 16
                                 .equ TCA_SPLIT_CLKSEL_DIV64_gc = (0x05<<1) ; System Clock / 64
                                 .equ TCA_SPLIT_CLKSEL_DIV256_gc = (0x06<<1) ; System Clock / 256
                                 .equ TCA_SPLIT_CLKSEL_DIV1024_gc = (0x07<<1) ; System Clock / 1024
                                 
                                 ; Command select
                                 .equ TCA_SPLIT_CMD_NONE_gc = (0x00<<2)   ; No Command
                                 .equ TCA_SPLIT_CMD_UPDATE_gc = (0x01<<2) ; Force Update
                                 .equ TCA_SPLIT_CMD_RESTART_gc = (0x02<<2) ; Force Restart
                                 .equ TCA_SPLIT_CMD_RESET_gc = (0x03<<2)  ; Force Hard Reset
                                 
                                 
                                 ;*************************************************************************
                                 ;** TCB - 16-bit Timer Type B
                                 ;*************************************************************************
                                 
                                 ; TCB_CTRLA masks
                                 .equ TCB_CLKSEL_gm = 0x06                ; Clock Select group mask
                                 .equ TCB_CLKSEL_gp = 1                   ; Clock Select group position
                                 .equ TCB_CLKSEL0_bm = (1<<1)             ; Clock Select bit 0 mask
                                 .equ TCB_CLKSEL0_bp = 1                  ; Clock Select bit 0 position
                                 .equ TCB_CLKSEL1_bm = (1<<2)             ; Clock Select bit 1 mask
                                 .equ TCB_CLKSEL1_bp = 2                  ; Clock Select bit 1 position
                                 .equ TCB_ENABLE_bm = 0x01                ; Enable bit mask
                                 .equ TCB_ENABLE_bp = 0                   ; Enable bit position
                                 .equ TCB_RUNSTDBY_bm = 0x40              ; Run Standby bit mask
                                 .equ TCB_RUNSTDBY_bp = 6                 ; Run Standby bit position
                                 .equ TCB_SYNCUPD_bm = 0x10               ; Synchronize Update bit mask
                                 .equ TCB_SYNCUPD_bp = 4                  ; Synchronize Update bit position
                                 
                                 ; TCB_CTRLB masks
                                 .equ TCB_ASYNC_bm = 0x40                 ; Asynchronous Enable bit mask
                                 .equ TCB_ASYNC_bp = 6                    ; Asynchronous Enable bit position
                                 .equ TCB_CCMPEN_bm = 0x10                ; Pin Output Enable bit mask
                                 .equ TCB_CCMPEN_bp = 4                   ; Pin Output Enable bit position
                                 .equ TCB_CCMPINIT_bm = 0x20              ; Pin Initial State bit mask
                                 .equ TCB_CCMPINIT_bp = 5                 ; Pin Initial State bit position
                                 .equ TCB_CNTMODE_gm = 0x07               ; Timer Mode group mask
                                 .equ TCB_CNTMODE_gp = 0                  ; Timer Mode group position
                                 .equ TCB_CNTMODE0_bm = (1<<0)            ; Timer Mode bit 0 mask
                                 .equ TCB_CNTMODE0_bp = 0                 ; Timer Mode bit 0 position
                                 .equ TCB_CNTMODE1_bm = (1<<1)            ; Timer Mode bit 1 mask
                                 .equ TCB_CNTMODE1_bp = 1                 ; Timer Mode bit 1 position
                                 .equ TCB_CNTMODE2_bm = (1<<2)            ; Timer Mode bit 2 mask
                                 .equ TCB_CNTMODE2_bp = 2                 ; Timer Mode bit 2 position
                                 
                                 ; TCB_DBGCTRL masks
                                 .equ TCB_DBGRUN_bm = 0x01                ; Debug Run bit mask
                                 .equ TCB_DBGRUN_bp = 0                   ; Debug Run bit position
                                 
                                 ; TCB_EVCTRL masks
                                 .equ TCB_CAPTEI_bm = 0x01                ; Event Input Enable bit mask
                                 .equ TCB_CAPTEI_bp = 0                   ; Event Input Enable bit position
                                 .equ TCB_EDGE_bm = 0x10                  ; Event Edge bit mask
                                 .equ TCB_EDGE_bp = 4                     ; Event Edge bit position
                                 .equ TCB_FILTER_bm = 0x40                ; Input Capture Noise Cancellation Filter bit mask
                                 .equ TCB_FILTER_bp = 6                   ; Input Capture Noise Cancellation Filter bit position
                                 
                                 ; TCB_INTCTRL masks
                                 .equ TCB_CAPT_bm = 0x01                  ; Capture or Timeout bit mask
                                 .equ TCB_CAPT_bp = 0                     ; Capture or Timeout bit position
                                 
                                 ; TCB_INTFLAGS masks
                                 ; Masks for TCB_CAPT already defined
                                 
                                 ; TCB_STATUS masks
                                 .equ TCB_RUN_bm = 0x01                   ; Run bit mask
                                 .equ TCB_RUN_bp = 0                      ; Run bit position
                                 
                                 ; Clock Select select
                                 .equ TCB_CLKSEL_CLKDIV1_gc = (0x00<<1)   ; CLK_PER (No Prescaling)
                                 .equ TCB_CLKSEL_CLKDIV2_gc = (0x01<<1)   ; CLK_PER/2 (From Prescaler)
                                 .equ TCB_CLKSEL_CLKTCA_gc = (0x02<<1)    ; Use Clock from TCA
                                 
                                 ; Timer Mode select
                                 .equ TCB_CNTMODE_INT_gc = (0x00<<0)      ; Periodic Interrupt
                                 .equ TCB_CNTMODE_TIMEOUT_gc = (0x01<<0)  ; Periodic Timeout
                                 .equ TCB_CNTMODE_CAPT_gc = (0x02<<0)     ; Input Capture Event
                                 .equ TCB_CNTMODE_FRQ_gc = (0x03<<0)      ; Input Capture Frequency measurement
                                 .equ TCB_CNTMODE_PW_gc = (0x04<<0)       ; Input Capture Pulse-Width measurement
                                 .equ TCB_CNTMODE_FRQPW_gc = (0x05<<0)    ; Input Capture Frequency and Pulse-Width measurement
                                 .equ TCB_CNTMODE_SINGLE_gc = (0x06<<0)   ; Single Shot
                                 .equ TCB_CNTMODE_PWM8_gc = (0x07<<0)     ; 8-bit PWM
                                 
                                 
                                 ;*************************************************************************
                                 ;** TWI - Two-Wire Interface
                                 ;*************************************************************************
                                 
                                 ; TWI_CTRLA masks
                                 .equ TWI_FMPEN_bm = 0x02                 ; FM Plus Enable bit mask
                                 .equ TWI_FMPEN_bp = 1                    ; FM Plus Enable bit position
                                 .equ TWI_SDAHOLD_gm = 0x0C               ; SDA Hold Time group mask
                                 .equ TWI_SDAHOLD_gp = 2                  ; SDA Hold Time group position
                                 .equ TWI_SDAHOLD0_bm = (1<<2)            ; SDA Hold Time bit 0 mask
                                 .equ TWI_SDAHOLD0_bp = 2                 ; SDA Hold Time bit 0 position
                                 .equ TWI_SDAHOLD1_bm = (1<<3)            ; SDA Hold Time bit 1 mask
                                 .equ TWI_SDAHOLD1_bp = 3                 ; SDA Hold Time bit 1 position
                                 .equ TWI_SDASETUP_bm = 0x10              ; SDA Setup Time bit mask
                                 .equ TWI_SDASETUP_bp = 4                 ; SDA Setup Time bit position
                                 
                                 ; TWI_DBGCTRL masks
                                 .equ TWI_DBGRUN_bm = 0x01                ; Debug Run bit mask
                                 .equ TWI_DBGRUN_bp = 0                   ; Debug Run bit position
                                 
                                 ; TWI_DUALCTRL masks
                                 .equ TWI_ENABLE_bm = 0x01                ; Dual Control Enable bit mask
                                 .equ TWI_ENABLE_bp = 0                   ; Dual Control Enable bit position
                                 ; Masks for TWI_FMPEN already defined
                                 ; Masks for TWI_SDAHOLD already defined
                                 
                                 ; TWI_MCTRLA masks
                                 ; Masks for TWI_ENABLE already defined
                                 .equ TWI_QCEN_bm = 0x10                  ; Quick Command Enable bit mask
                                 .equ TWI_QCEN_bp = 4                     ; Quick Command Enable bit position
                                 .equ TWI_RIEN_bm = 0x80                  ; Read Interrupt Enable bit mask
                                 .equ TWI_RIEN_bp = 7                     ; Read Interrupt Enable bit position
                                 .equ TWI_SMEN_bm = 0x02                  ; Smart Mode Enable bit mask
                                 .equ TWI_SMEN_bp = 1                     ; Smart Mode Enable bit position
                                 .equ TWI_TIMEOUT_gm = 0x0C               ; Inactive Bus Timeout group mask
                                 .equ TWI_TIMEOUT_gp = 2                  ; Inactive Bus Timeout group position
                                 .equ TWI_TIMEOUT0_bm = (1<<2)            ; Inactive Bus Timeout bit 0 mask
                                 .equ TWI_TIMEOUT0_bp = 2                 ; Inactive Bus Timeout bit 0 position
                                 .equ TWI_TIMEOUT1_bm = (1<<3)            ; Inactive Bus Timeout bit 1 mask
                                 .equ TWI_TIMEOUT1_bp = 3                 ; Inactive Bus Timeout bit 1 position
                                 .equ TWI_WIEN_bm = 0x40                  ; Write Interrupt Enable bit mask
                                 .equ TWI_WIEN_bp = 6                     ; Write Interrupt Enable bit position
                                 
                                 ; TWI_MCTRLB masks
                                 .equ TWI_ACKACT_bm = 0x04                ; Acknowledge Action bit mask
                                 .equ TWI_ACKACT_bp = 2                   ; Acknowledge Action bit position
                                 .equ TWI_FLUSH_bm = 0x08                 ; Flush bit mask
                                 .equ TWI_FLUSH_bp = 3                    ; Flush bit position
                                 .equ TWI_MCMD_gm = 0x03                  ; Command group mask
                                 .equ TWI_MCMD_gp = 0                     ; Command group position
                                 .equ TWI_MCMD0_bm = (1<<0)               ; Command bit 0 mask
                                 .equ TWI_MCMD0_bp = 0                    ; Command bit 0 position
                                 .equ TWI_MCMD1_bm = (1<<1)               ; Command bit 1 mask
                                 .equ TWI_MCMD1_bp = 1                    ; Command bit 1 position
                                 
                                 ; TWI_MSTATUS masks
                                 .equ TWI_ARBLOST_bm = 0x08               ; Arbitration Lost bit mask
                                 .equ TWI_ARBLOST_bp = 3                  ; Arbitration Lost bit position
                                 .equ TWI_BUSERR_bm = 0x04                ; Bus Error bit mask
                                 .equ TWI_BUSERR_bp = 2                   ; Bus Error bit position
                                 .equ TWI_BUSSTATE_gm = 0x03              ; Bus State group mask
                                 .equ TWI_BUSSTATE_gp = 0                 ; Bus State group position
                                 .equ TWI_BUSSTATE0_bm = (1<<0)           ; Bus State bit 0 mask
                                 .equ TWI_BUSSTATE0_bp = 0                ; Bus State bit 0 position
                                 .equ TWI_BUSSTATE1_bm = (1<<1)           ; Bus State bit 1 mask
                                 .equ TWI_BUSSTATE1_bp = 1                ; Bus State bit 1 position
                                 .equ TWI_CLKHOLD_bm = 0x20               ; Clock Hold bit mask
                                 .equ TWI_CLKHOLD_bp = 5                  ; Clock Hold bit position
                                 .equ TWI_RIF_bm = 0x80                   ; Read Interrupt Flag bit mask
                                 .equ TWI_RIF_bp = 7                      ; Read Interrupt Flag bit position
                                 .equ TWI_RXACK_bm = 0x10                 ; Received Acknowledge bit mask
                                 .equ TWI_RXACK_bp = 4                    ; Received Acknowledge bit position
                                 .equ TWI_WIF_bm = 0x40                   ; Write Interrupt Flag bit mask
                                 .equ TWI_WIF_bp = 6                      ; Write Interrupt Flag bit position
                                 
                                 ; TWI_SADDRMASK masks
                                 .equ TWI_ADDREN_bm = 0x01                ; Address Enable bit mask
                                 .equ TWI_ADDREN_bp = 0                   ; Address Enable bit position
                                 .equ TWI_ADDRMASK_gm = 0xFE              ; Address Mask group mask
                                 .equ TWI_ADDRMASK_gp = 1                 ; Address Mask group position
                                 .equ TWI_ADDRMASK0_bm = (1<<1)           ; Address Mask bit 0 mask
                                 .equ TWI_ADDRMASK0_bp = 1                ; Address Mask bit 0 position
                                 .equ TWI_ADDRMASK1_bm = (1<<2)           ; Address Mask bit 1 mask
                                 .equ TWI_ADDRMASK1_bp = 2                ; Address Mask bit 1 position
                                 .equ TWI_ADDRMASK2_bm = (1<<3)           ; Address Mask bit 2 mask
                                 .equ TWI_ADDRMASK2_bp = 3                ; Address Mask bit 2 position
                                 .equ TWI_ADDRMASK3_bm = (1<<4)           ; Address Mask bit 3 mask
                                 .equ TWI_ADDRMASK3_bp = 4                ; Address Mask bit 3 position
                                 .equ TWI_ADDRMASK4_bm = (1<<5)           ; Address Mask bit 4 mask
                                 .equ TWI_ADDRMASK4_bp = 5                ; Address Mask bit 4 position
                                 .equ TWI_ADDRMASK5_bm = (1<<6)           ; Address Mask bit 5 mask
                                 .equ TWI_ADDRMASK5_bp = 6                ; Address Mask bit 5 position
                                 .equ TWI_ADDRMASK6_bm = (1<<7)           ; Address Mask bit 6 mask
                                 .equ TWI_ADDRMASK6_bp = 7                ; Address Mask bit 6 position
                                 
                                 ; TWI_SCTRLA masks
                                 .equ TWI_APIEN_bm = 0x40                 ; Address/Stop Interrupt Enable bit mask
                                 .equ TWI_APIEN_bp = 6                    ; Address/Stop Interrupt Enable bit position
                                 .equ TWI_DIEN_bm = 0x80                  ; Data Interrupt Enable bit mask
                                 .equ TWI_DIEN_bp = 7                     ; Data Interrupt Enable bit position
                                 ; Masks for TWI_ENABLE already defined
                                 .equ TWI_PIEN_bm = 0x20                  ; Stop Interrupt Enable bit mask
                                 .equ TWI_PIEN_bp = 5                     ; Stop Interrupt Enable bit position
                                 .equ TWI_PMEN_bm = 0x04                  ; Promiscuous Mode Enable bit mask
                                 .equ TWI_PMEN_bp = 2                     ; Promiscuous Mode Enable bit position
                                 ; Masks for TWI_SMEN already defined
                                 
                                 ; TWI_SCTRLB masks
                                 ; Masks for TWI_ACKACT already defined
                                 .equ TWI_SCMD_gm = 0x03                  ; Command group mask
                                 .equ TWI_SCMD_gp = 0                     ; Command group position
                                 .equ TWI_SCMD0_bm = (1<<0)               ; Command bit 0 mask
                                 .equ TWI_SCMD0_bp = 0                    ; Command bit 0 position
                                 .equ TWI_SCMD1_bm = (1<<1)               ; Command bit 1 mask
                                 .equ TWI_SCMD1_bp = 1                    ; Command bit 1 position
                                 
                                 ; TWI_SSTATUS masks
                                 .equ TWI_AP_bm = 0x01                    ; Slave Address or Stop bit mask
                                 .equ TWI_AP_bp = 0                       ; Slave Address or Stop bit position
                                 .equ TWI_APIF_bm = 0x40                  ; Address/Stop Interrupt Flag bit mask
                                 .equ TWI_APIF_bp = 6                     ; Address/Stop Interrupt Flag bit position
                                 ; Masks for TWI_BUSERR already defined
                                 ; Masks for TWI_CLKHOLD already defined
                                 .equ TWI_COLL_bm = 0x08                  ; Collision bit mask
                                 .equ TWI_COLL_bp = 3                     ; Collision bit position
                                 .equ TWI_DIF_bm = 0x80                   ; Data Interrupt Flag bit mask
                                 .equ TWI_DIF_bp = 7                      ; Data Interrupt Flag bit position
                                 .equ TWI_DIR_bm = 0x02                   ; Read/Write Direction bit mask
                                 .equ TWI_DIR_bp = 1                      ; Read/Write Direction bit position
                                 ; Masks for TWI_RXACK already defined
                                 
                                 ; SDA Hold Time select
                                 .equ TWI_DEFAULT_SDAHOLD_OFF_gc = (0x00<<2) ; SDA hold time off
                                 .equ TWI_DEFAULT_SDAHOLD_50NS_gc = (0x01<<2) ; Typical 50ns hold time
                                 .equ TWI_DEFAULT_SDAHOLD_300NS_gc = (0x02<<2) ; Typical 300ns hold time
                                 .equ TWI_DEFAULT_SDAHOLD_500NS_gc = (0x03<<2) ; Typical 500ns hold time
                                 
                                 ; SDA Setup Time select
                                 .equ TWI_DEFAULT_SDASETUP_4CYC_gc = (0x00<<4) ; SDA setup time is 4 clock cycles
                                 .equ TWI_DEFAULT_SDASETUP_8CYC_gc = (0x01<<4) ; SDA setup time is 8 clock cycles
                                 
                                 ; Inactive Bus Timeout select
                                 .equ TWI_TIMEOUT_DISABLED_gc = (0x00<<2) ; Bus Timeout Disabled
                                 .equ TWI_TIMEOUT_50US_gc = (0x01<<2)     ; 50 Microseconds
                                 .equ TWI_TIMEOUT_100US_gc = (0x02<<2)    ; 100 Microseconds
                                 .equ TWI_TIMEOUT_200US_gc = (0x03<<2)    ; 200 Microseconds
                                 
                                 ; Acknowledge Action select
                                 .equ TWI_ACKACT_ACK_gc = (0x00<<2)       ; Send ACK
                                 .equ TWI_ACKACT_NACK_gc = (0x01<<2)      ; Send NACK
                                 
                                 ; Command select
                                 .equ TWI_MCMD_NOACT_gc = (0x00<<0)       ; No Action
                                 .equ TWI_MCMD_REPSTART_gc = (0x01<<0)    ; Issue Repeated Start Condition
                                 .equ TWI_MCMD_RECVTRANS_gc = (0x02<<0)   ; Receive or Transmit Data, depending on DIR
                                 .equ TWI_MCMD_STOP_gc = (0x03<<0)        ; Issue Stop Condition
                                 
                                 ; Bus State select
                                 .equ TWI_BUSSTATE_UNKNOWN_gc = (0x00<<0) ; Unknown Bus State
                                 .equ TWI_BUSSTATE_IDLE_gc = (0x01<<0)    ; Bus is Idle
                                 .equ TWI_BUSSTATE_OWNER_gc = (0x02<<0)   ; This Module Controls The Bus
                                 .equ TWI_BUSSTATE_BUSY_gc = (0x03<<0)    ; The Bus is Busy
                                 
                                 ; Command select
                                 .equ TWI_SCMD_NOACT_gc = (0x00<<0)       ; No Action
                                 .equ TWI_SCMD_COMPTRANS_gc = (0x02<<0)   ; Used To Complete a Transaction
                                 .equ TWI_SCMD_RESPONSE_gc = (0x03<<0)    ; Used in Response to Address/Data Interrupt
                                 
                                 ; Slave Address or Stop select
                                 .equ TWI_AP_STOP_gc = (0x00<<0)          ; Stop condition generated APIF
                                 .equ TWI_AP_ADR_gc = (0x01<<0)           ; Address detection generated APIF
                                 
                                 
                                 ;*************************************************************************
                                 ;** USART - Universal Synchronous and Asynchronous Receiver and Transmitter
                                 ;*************************************************************************
                                 
                                 ; USART_CTRLA masks
                                 .equ USART_ABEIE_bm = 0x04               ; Auto-baud Error Interrupt Enable bit mask
                                 .equ USART_ABEIE_bp = 2                  ; Auto-baud Error Interrupt Enable bit position
                                 .equ USART_DREIE_bm = 0x20               ; Data Register Empty Interrupt Enable bit mask
                                 .equ USART_DREIE_bp = 5                  ; Data Register Empty Interrupt Enable bit position
                                 .equ USART_LBME_bm = 0x08                ; Loop-back Mode Enable bit mask
                                 .equ USART_LBME_bp = 3                   ; Loop-back Mode Enable bit position
                                 .equ USART_RS485_gm = 0x03               ; RS485 Mode internal transmitter group mask
                                 .equ USART_RS485_gp = 0                  ; RS485 Mode internal transmitter group position
                                 .equ USART_RS4850_bm = (1<<0)            ; RS485 Mode internal transmitter bit 0 mask
                                 .equ USART_RS4850_bp = 0                 ; RS485 Mode internal transmitter bit 0 position
                                 .equ USART_RS4851_bm = (1<<1)            ; RS485 Mode internal transmitter bit 1 mask
                                 .equ USART_RS4851_bp = 1                 ; RS485 Mode internal transmitter bit 1 position
                                 .equ USART_RXCIE_bm = 0x80               ; Receive Complete Interrupt Enable bit mask
                                 .equ USART_RXCIE_bp = 7                  ; Receive Complete Interrupt Enable bit position
                                 .equ USART_RXSIE_bm = 0x10               ; Receiver Start Frame Interrupt Enable bit mask
                                 .equ USART_RXSIE_bp = 4                  ; Receiver Start Frame Interrupt Enable bit position
                                 .equ USART_TXCIE_bm = 0x40               ; Transmit Complete Interrupt Enable bit mask
                                 .equ USART_TXCIE_bp = 6                  ; Transmit Complete Interrupt Enable bit position
                                 
                                 ; USART_CTRLB masks
                                 .equ USART_MPCM_bm = 0x01                ; Multi-processor Communication Mode bit mask
                                 .equ USART_MPCM_bp = 0                   ; Multi-processor Communication Mode bit position
                                 .equ USART_ODME_bm = 0x08                ; Open Drain Mode Enable bit mask
                                 .equ USART_ODME_bp = 3                   ; Open Drain Mode Enable bit position
                                 .equ USART_RXEN_bm = 0x80                ; Reciever enable bit mask
                                 .equ USART_RXEN_bp = 7                   ; Reciever enable bit position
                                 .equ USART_RXMODE_gm = 0x06              ; Receiver Mode group mask
                                 .equ USART_RXMODE_gp = 1                 ; Receiver Mode group position
                                 .equ USART_RXMODE0_bm = (1<<1)           ; Receiver Mode bit 0 mask
                                 .equ USART_RXMODE0_bp = 1                ; Receiver Mode bit 0 position
                                 .equ USART_RXMODE1_bm = (1<<2)           ; Receiver Mode bit 1 mask
                                 .equ USART_RXMODE1_bp = 2                ; Receiver Mode bit 1 position
                                 .equ USART_SFDEN_bm = 0x10               ; Start Frame Detection Enable bit mask
                                 .equ USART_SFDEN_bp = 4                  ; Start Frame Detection Enable bit position
                                 .equ USART_TXEN_bm = 0x40                ; Transmitter Enable bit mask
                                 .equ USART_TXEN_bp = 6                   ; Transmitter Enable bit position
                                 
                                 ; USART_CTRLC masks
                                 .equ USART_CMODE_gm = 0xC0               ; Communication Mode group mask
                                 .equ USART_CMODE_gp = 6                  ; Communication Mode group position
                                 .equ USART_CMODE0_bm = (1<<6)            ; Communication Mode bit 0 mask
                                 .equ USART_CMODE0_bp = 6                 ; Communication Mode bit 0 position
                                 .equ USART_CMODE1_bm = (1<<7)            ; Communication Mode bit 1 mask
                                 .equ USART_CMODE1_bp = 7                 ; Communication Mode bit 1 position
                                 .equ USART_UCPHA_bm = 0x02               ; SPI Master Mode, Clock Phase bit mask
                                 .equ USART_UCPHA_bp = 1                  ; SPI Master Mode, Clock Phase bit position
                                 .equ USART_UDORD_bm = 0x04               ; SPI Master Mode, Data Order bit mask
                                 .equ USART_UDORD_bp = 2                  ; SPI Master Mode, Data Order bit position
                                 .equ USART_CHSIZE_gm = 0x07              ; Character Size group mask
                                 .equ USART_CHSIZE_gp = 0                 ; Character Size group position
                                 .equ USART_CHSIZE0_bm = (1<<0)           ; Character Size bit 0 mask
                                 .equ USART_CHSIZE0_bp = 0                ; Character Size bit 0 position
                                 .equ USART_CHSIZE1_bm = (1<<1)           ; Character Size bit 1 mask
                                 .equ USART_CHSIZE1_bp = 1                ; Character Size bit 1 position
                                 .equ USART_CHSIZE2_bm = (1<<2)           ; Character Size bit 2 mask
                                 .equ USART_CHSIZE2_bp = 2                ; Character Size bit 2 position
                                 .equ USART_PMODE_gm = 0x30               ; Parity Mode group mask
                                 .equ USART_PMODE_gp = 4                  ; Parity Mode group position
                                 .equ USART_PMODE0_bm = (1<<4)            ; Parity Mode bit 0 mask
                                 .equ USART_PMODE0_bp = 4                 ; Parity Mode bit 0 position
                                 .equ USART_PMODE1_bm = (1<<5)            ; Parity Mode bit 1 mask
                                 .equ USART_PMODE1_bp = 5                 ; Parity Mode bit 1 position
                                 .equ USART_SBMODE_bm = 0x08              ; Stop Bit Mode bit mask
                                 .equ USART_SBMODE_bp = 3                 ; Stop Bit Mode bit position
                                 
                                 ; USART_CTRLD masks
                                 .equ USART_ABW_gm = 0xC0                 ; Auto Baud Window group mask
                                 .equ USART_ABW_gp = 6                    ; Auto Baud Window group position
                                 .equ USART_ABW0_bm = (1<<6)              ; Auto Baud Window bit 0 mask
                                 .equ USART_ABW0_bp = 6                   ; Auto Baud Window bit 0 position
                                 .equ USART_ABW1_bm = (1<<7)              ; Auto Baud Window bit 1 mask
                                 .equ USART_ABW1_bp = 7                   ; Auto Baud Window bit 1 position
                                 
                                 ; USART_DBGCTRL masks
                                 .equ USART_ABMBP_bm = 0x80               ; Autobaud majority voter bypass bit mask
                                 .equ USART_ABMBP_bp = 7                  ; Autobaud majority voter bypass bit position
                                 .equ USART_DBGRUN_bm = 0x01              ; Debug Run bit mask
                                 .equ USART_DBGRUN_bp = 0                 ; Debug Run bit position
                                 
                                 ; USART_EVCTRL masks
                                 .equ USART_IREI_bm = 0x01                ; IrDA Event Input Enable bit mask
                                 .equ USART_IREI_bp = 0                   ; IrDA Event Input Enable bit position
                                 
                                 ; USART_RXDATAH masks
                                 .equ USART_BUFOVF_bm = 0x40              ; Buffer Overflow bit mask
                                 .equ USART_BUFOVF_bp = 6                 ; Buffer Overflow bit position
                                 .equ USART_DATA8_bm = 0x01               ; Receiver Data Register bit mask
                                 .equ USART_DATA8_bp = 0                  ; Receiver Data Register bit position
                                 .equ USART_FERR_bm = 0x04                ; Frame Error bit mask
                                 .equ USART_FERR_bp = 2                   ; Frame Error bit position
                                 .equ USART_PERR_bm = 0x02                ; Parity Error bit mask
                                 .equ USART_PERR_bp = 1                   ; Parity Error bit position
                                 .equ USART_RXCIF_bm = 0x80               ; Receive Complete Interrupt Flag bit mask
                                 .equ USART_RXCIF_bp = 7                  ; Receive Complete Interrupt Flag bit position
                                 
                                 ; USART_RXDATAL masks
                                 .equ USART_DATA_gm = 0xFF                ; RX Data group mask
                                 .equ USART_DATA_gp = 0                   ; RX Data group position
                                 .equ USART_DATA0_bm = (1<<0)             ; RX Data bit 0 mask
                                 .equ USART_DATA0_bp = 0                  ; RX Data bit 0 position
                                 .equ USART_DATA1_bm = (1<<1)             ; RX Data bit 1 mask
                                 .equ USART_DATA1_bp = 1                  ; RX Data bit 1 position
                                 .equ USART_DATA2_bm = (1<<2)             ; RX Data bit 2 mask
                                 .equ USART_DATA2_bp = 2                  ; RX Data bit 2 position
                                 .equ USART_DATA3_bm = (1<<3)             ; RX Data bit 3 mask
                                 .equ USART_DATA3_bp = 3                  ; RX Data bit 3 position
                                 .equ USART_DATA4_bm = (1<<4)             ; RX Data bit 4 mask
                                 .equ USART_DATA4_bp = 4                  ; RX Data bit 4 position
                                 .equ USART_DATA5_bm = (1<<5)             ; RX Data bit 5 mask
                                 .equ USART_DATA5_bp = 5                  ; RX Data bit 5 position
                                 .equ USART_DATA6_bm = (1<<6)             ; RX Data bit 6 mask
                                 .equ USART_DATA6_bp = 6                  ; RX Data bit 6 position
                                 .equ USART_DATA7_bm = (1<<7)             ; RX Data bit 7 mask
                                 .equ USART_DATA7_bp = 7                  ; RX Data bit 7 position
                                 
                                 ; USART_RXPLCTRL masks
                                 .equ USART_RXPL_gm = 0x7F                ; Receiver Pulse Lenght group mask
                                 .equ USART_RXPL_gp = 0                   ; Receiver Pulse Lenght group position
                                 .equ USART_RXPL0_bm = (1<<0)             ; Receiver Pulse Lenght bit 0 mask
                                 .equ USART_RXPL0_bp = 0                  ; Receiver Pulse Lenght bit 0 position
                                 .equ USART_RXPL1_bm = (1<<1)             ; Receiver Pulse Lenght bit 1 mask
                                 .equ USART_RXPL1_bp = 1                  ; Receiver Pulse Lenght bit 1 position
                                 .equ USART_RXPL2_bm = (1<<2)             ; Receiver Pulse Lenght bit 2 mask
                                 .equ USART_RXPL2_bp = 2                  ; Receiver Pulse Lenght bit 2 position
                                 .equ USART_RXPL3_bm = (1<<3)             ; Receiver Pulse Lenght bit 3 mask
                                 .equ USART_RXPL3_bp = 3                  ; Receiver Pulse Lenght bit 3 position
                                 .equ USART_RXPL4_bm = (1<<4)             ; Receiver Pulse Lenght bit 4 mask
                                 .equ USART_RXPL4_bp = 4                  ; Receiver Pulse Lenght bit 4 position
                                 .equ USART_RXPL5_bm = (1<<5)             ; Receiver Pulse Lenght bit 5 mask
                                 .equ USART_RXPL5_bp = 5                  ; Receiver Pulse Lenght bit 5 position
                                 .equ USART_RXPL6_bm = (1<<6)             ; Receiver Pulse Lenght bit 6 mask
                                 .equ USART_RXPL6_bp = 6                  ; Receiver Pulse Lenght bit 6 position
                                 
                                 ; USART_STATUS masks
                                 .equ USART_BDF_bm = 0x02                 ; Break Detected Flag bit mask
                                 .equ USART_BDF_bp = 1                    ; Break Detected Flag bit position
                                 .equ USART_DREIF_bm = 0x20               ; Data Register Empty Flag bit mask
                                 .equ USART_DREIF_bp = 5                  ; Data Register Empty Flag bit position
                                 .equ USART_ISFIF_bm = 0x08               ; Inconsistent Sync Field Interrupt Flag bit mask
                                 .equ USART_ISFIF_bp = 3                  ; Inconsistent Sync Field Interrupt Flag bit position
                                 ; Masks for USART_RXCIF already defined
                                 .equ USART_RXSIF_bm = 0x10               ; Receive Start Interrupt bit mask
                                 .equ USART_RXSIF_bp = 4                  ; Receive Start Interrupt bit position
                                 .equ USART_TXCIF_bm = 0x40               ; Transmit Interrupt Flag bit mask
                                 .equ USART_TXCIF_bp = 6                  ; Transmit Interrupt Flag bit position
                                 .equ USART_WFB_bm = 0x01                 ; Wait For Break bit mask
                                 .equ USART_WFB_bp = 0                    ; Wait For Break bit position
                                 
                                 ; USART_TXDATAH masks
                                 ; Masks for USART_DATA8 already defined
                                 
                                 ; USART_TXDATAL masks
                                 ; Masks for USART_DATA already defined
                                 
                                 ; USART_TXPLCTRL masks
                                 .equ USART_TXPL_gm = 0xFF                ; Transmit pulse length group mask
                                 .equ USART_TXPL_gp = 0                   ; Transmit pulse length group position
                                 .equ USART_TXPL0_bm = (1<<0)             ; Transmit pulse length bit 0 mask
                                 .equ USART_TXPL0_bp = 0                  ; Transmit pulse length bit 0 position
                                 .equ USART_TXPL1_bm = (1<<1)             ; Transmit pulse length bit 1 mask
                                 .equ USART_TXPL1_bp = 1                  ; Transmit pulse length bit 1 position
                                 .equ USART_TXPL2_bm = (1<<2)             ; Transmit pulse length bit 2 mask
                                 .equ USART_TXPL2_bp = 2                  ; Transmit pulse length bit 2 position
                                 .equ USART_TXPL3_bm = (1<<3)             ; Transmit pulse length bit 3 mask
                                 .equ USART_TXPL3_bp = 3                  ; Transmit pulse length bit 3 position
                                 .equ USART_TXPL4_bm = (1<<4)             ; Transmit pulse length bit 4 mask
                                 .equ USART_TXPL4_bp = 4                  ; Transmit pulse length bit 4 position
                                 .equ USART_TXPL5_bm = (1<<5)             ; Transmit pulse length bit 5 mask
                                 .equ USART_TXPL5_bp = 5                  ; Transmit pulse length bit 5 position
                                 .equ USART_TXPL6_bm = (1<<6)             ; Transmit pulse length bit 6 mask
                                 .equ USART_TXPL6_bp = 6                  ; Transmit pulse length bit 6 position
                                 .equ USART_TXPL7_bm = (1<<7)             ; Transmit pulse length bit 7 mask
                                 .equ USART_TXPL7_bp = 7                  ; Transmit pulse length bit 7 position
                                 
                                 ; RS485 Mode internal transmitter select
                                 .equ USART_RS485_OFF_gc = (0x00<<0)      ; RS485 Mode disabled
                                 .equ USART_RS485_EXT_gc = (0x01<<0)      ; RS485 Mode External drive
                                 .equ USART_RS485_INT_gc = (0x02<<0)      ; RS485 Mode Internal drive
                                 
                                 ; Receiver Mode select
                                 .equ USART_RXMODE_NORMAL_gc = (0x00<<1)  ; Normal mode
                                 .equ USART_RXMODE_CLK2X_gc = (0x01<<1)   ; CLK2x mode
                                 .equ USART_RXMODE_GENAUTO_gc = (0x02<<1) ; Generic autobaud mode
                                 .equ USART_RXMODE_LINAUTO_gc = (0x03<<1) ; LIN constrained autobaud mode
                                 
                                 ; Communication Mode select
                                 .equ USART_MSPI_CMODE_ASYNCHRONOUS_gc = (0x00<<6) ; Asynchronous Mode
                                 .equ USART_MSPI_CMODE_SYNCHRONOUS_gc = (0x01<<6) ; Synchronous Mode
                                 .equ USART_MSPI_CMODE_IRCOM_gc = (0x02<<6) ; Infrared Communication
                                 .equ USART_MSPI_CMODE_MSPI_gc = (0x03<<6) ; Master SPI Mode
                                 
                                 ; Character Size select
                                 .equ USART_NORMAL_CHSIZE_5BIT_gc = (0x00<<0) ; Character size: 5 bit
                                 .equ USART_NORMAL_CHSIZE_6BIT_gc = (0x01<<0) ; Character size: 6 bit
                                 .equ USART_NORMAL_CHSIZE_7BIT_gc = (0x02<<0) ; Character size: 7 bit
                                 .equ USART_NORMAL_CHSIZE_8BIT_gc = (0x03<<0) ; Character size: 8 bit
                                 .equ USART_NORMAL_CHSIZE_9BITL_gc = (0x06<<0) ; Character size: 9 bit read low byte first
                                 .equ USART_NORMAL_CHSIZE_9BITH_gc = (0x07<<0) ; Character size: 9 bit read high byte first
                                 
                                 ; Parity Mode select
                                 .equ USART_NORMAL_PMODE_DISABLED_gc = (0x00<<4) ; No Parity
                                 .equ USART_NORMAL_PMODE_EVEN_gc = (0x02<<4) ; Even Parity
                                 .equ USART_NORMAL_PMODE_ODD_gc = (0x03<<4) ; Odd Parity
                                 
                                 ; Stop Bit Mode select
                                 .equ USART_NORMAL_SBMODE_1BIT_gc = (0x00<<3) ; 1 stop bit
                                 .equ USART_NORMAL_SBMODE_2BIT_gc = (0x01<<3) ; 2 stop bits
                                 
                                 ; Auto Baud Window select
                                 .equ USART_ABW_WDW0_gc = (0x00<<6)       ; 18% tolerance
                                 .equ USART_ABW_WDW1_gc = (0x01<<6)       ; 15% tolerance
                                 .equ USART_ABW_WDW2_gc = (0x02<<6)       ; 21% tolerance
                                 .equ USART_ABW_WDW3_gc = (0x03<<6)       ; 25% tolerance
                                 
                                 
                                 ;*************************************************************************
                                 ;** USERROW - User Row
                                 ;*************************************************************************
                                 
                                 
                                 ;*************************************************************************
                                 ;** VPORT - Virtual Ports
                                 ;*************************************************************************
                                 
                                 ; VPORT_INTFLAGS masks
                                 .equ VPORT_INT_gm = 0xFF                 ; Pin Interrupt group mask
                                 .equ VPORT_INT_gp = 0                    ; Pin Interrupt group position
                                 .equ VPORT_INT0_bm = (1<<0)              ; Pin Interrupt bit 0 mask
                                 .equ VPORT_INT0_bp = 0                   ; Pin Interrupt bit 0 position
                                 .equ VPORT_INT1_bm = (1<<1)              ; Pin Interrupt bit 1 mask
                                 .equ VPORT_INT1_bp = 1                   ; Pin Interrupt bit 1 position
                                 .equ VPORT_INT2_bm = (1<<2)              ; Pin Interrupt bit 2 mask
                                 .equ VPORT_INT2_bp = 2                   ; Pin Interrupt bit 2 position
                                 .equ VPORT_INT3_bm = (1<<3)              ; Pin Interrupt bit 3 mask
                                 .equ VPORT_INT3_bp = 3                   ; Pin Interrupt bit 3 position
                                 .equ VPORT_INT4_bm = (1<<4)              ; Pin Interrupt bit 4 mask
                                 .equ VPORT_INT4_bp = 4                   ; Pin Interrupt bit 4 position
                                 .equ VPORT_INT5_bm = (1<<5)              ; Pin Interrupt bit 5 mask
                                 .equ VPORT_INT5_bp = 5                   ; Pin Interrupt bit 5 position
                                 .equ VPORT_INT6_bm = (1<<6)              ; Pin Interrupt bit 6 mask
                                 .equ VPORT_INT6_bp = 6                   ; Pin Interrupt bit 6 position
                                 .equ VPORT_INT7_bm = (1<<7)              ; Pin Interrupt bit 7 mask
                                 .equ VPORT_INT7_bp = 7                   ; Pin Interrupt bit 7 position
                                 
                                 
                                 ;*************************************************************************
                                 ;** VREF - Voltage reference
                                 ;*************************************************************************
                                 
                                 ; VREF_CTRLA masks
                                 .equ VREF_AC0REFSEL_gm = 0x07            ; AC0 reference select group mask
                                 .equ VREF_AC0REFSEL_gp = 0               ; AC0 reference select group position
                                 .equ VREF_AC0REFSEL0_bm = (1<<0)         ; AC0 reference select bit 0 mask
                                 .equ VREF_AC0REFSEL0_bp = 0              ; AC0 reference select bit 0 position
                                 .equ VREF_AC0REFSEL1_bm = (1<<1)         ; AC0 reference select bit 1 mask
                                 .equ VREF_AC0REFSEL1_bp = 1              ; AC0 reference select bit 1 position
                                 .equ VREF_AC0REFSEL2_bm = (1<<2)         ; AC0 reference select bit 2 mask
                                 .equ VREF_AC0REFSEL2_bp = 2              ; AC0 reference select bit 2 position
                                 .equ VREF_ADC0REFSEL_gm = 0x70           ; ADC0 reference select group mask
                                 .equ VREF_ADC0REFSEL_gp = 4              ; ADC0 reference select group position
                                 .equ VREF_ADC0REFSEL0_bm = (1<<4)        ; ADC0 reference select bit 0 mask
                                 .equ VREF_ADC0REFSEL0_bp = 4             ; ADC0 reference select bit 0 position
                                 .equ VREF_ADC0REFSEL1_bm = (1<<5)        ; ADC0 reference select bit 1 mask
                                 .equ VREF_ADC0REFSEL1_bp = 5             ; ADC0 reference select bit 1 position
                                 .equ VREF_ADC0REFSEL2_bm = (1<<6)        ; ADC0 reference select bit 2 mask
                                 .equ VREF_ADC0REFSEL2_bp = 6             ; ADC0 reference select bit 2 position
                                 
                                 ; VREF_CTRLB masks
                                 .equ VREF_AC0REFEN_bm = 0x01             ; AC0 DACREF reference enable bit mask
                                 .equ VREF_AC0REFEN_bp = 0                ; AC0 DACREF reference enable bit position
                                 .equ VREF_ADC0REFEN_bm = 0x02            ; ADC0 reference enable bit mask
                                 .equ VREF_ADC0REFEN_bp = 1               ; ADC0 reference enable bit position
                                 
                                 ; AC0 reference select select
                                 .equ VREF_AC0REFSEL_0V55_gc = (0x00<<0)  ; Voltage reference at 0.55V
                                 .equ VREF_AC0REFSEL_1V1_gc = (0x01<<0)   ; Voltage reference at 1.1V
                                 .equ VREF_AC0REFSEL_2V5_gc = (0x02<<0)   ; Voltage reference at 2.5V
                                 .equ VREF_AC0REFSEL_4V34_gc = (0x03<<0)  ; Voltage reference at 4.34V
                                 .equ VREF_AC0REFSEL_1V5_gc = (0x04<<0)   ; Voltage reference at 1.5V
                                 .equ VREF_AC0REFSEL_AVDD_gc = (0x07<<0)  ; AVDD
                                 
                                 ; ADC0 reference select select
                                 .equ VREF_ADC0REFSEL_0V55_gc = (0x00<<4) ; Voltage reference at 0.55V
                                 .equ VREF_ADC0REFSEL_1V1_gc = (0x01<<4)  ; Voltage reference at 1.1V
                                 .equ VREF_ADC0REFSEL_2V5_gc = (0x02<<4)  ; Voltage reference at 2.5V
                                 .equ VREF_ADC0REFSEL_4V34_gc = (0x03<<4) ; Voltage reference at 4.34V
                                 .equ VREF_ADC0REFSEL_1V5_gc = (0x04<<4)  ; Voltage reference at 1.5V
                                 
                                 
                                 ;*************************************************************************
                                 ;** WDT - Watch-Dog Timer
                                 ;*************************************************************************
                                 
                                 ; WDT_CTRLA masks
                                 .equ WDT_PERIOD_gm = 0x0F                ; Period group mask
                                 .equ WDT_PERIOD_gp = 0                   ; Period group position
                                 .equ WDT_PERIOD0_bm = (1<<0)             ; Period bit 0 mask
                                 .equ WDT_PERIOD0_bp = 0                  ; Period bit 0 position
                                 .equ WDT_PERIOD1_bm = (1<<1)             ; Period bit 1 mask
                                 .equ WDT_PERIOD1_bp = 1                  ; Period bit 1 position
                                 .equ WDT_PERIOD2_bm = (1<<2)             ; Period bit 2 mask
                                 .equ WDT_PERIOD2_bp = 2                  ; Period bit 2 position
                                 .equ WDT_PERIOD3_bm = (1<<3)             ; Period bit 3 mask
                                 .equ WDT_PERIOD3_bp = 3                  ; Period bit 3 position
                                 .equ WDT_WINDOW_gm = 0xF0                ; Window group mask
                                 .equ WDT_WINDOW_gp = 4                   ; Window group position
                                 .equ WDT_WINDOW0_bm = (1<<4)             ; Window bit 0 mask
                                 .equ WDT_WINDOW0_bp = 4                  ; Window bit 0 position
                                 .equ WDT_WINDOW1_bm = (1<<5)             ; Window bit 1 mask
                                 .equ WDT_WINDOW1_bp = 5                  ; Window bit 1 position
                                 .equ WDT_WINDOW2_bm = (1<<6)             ; Window bit 2 mask
                                 .equ WDT_WINDOW2_bp = 6                  ; Window bit 2 position
                                 .equ WDT_WINDOW3_bm = (1<<7)             ; Window bit 3 mask
                                 .equ WDT_WINDOW3_bp = 7                  ; Window bit 3 position
                                 
                                 ; WDT_STATUS masks
                                 .equ WDT_LOCK_bm = 0x80                  ; Lock enable bit mask
                                 .equ WDT_LOCK_bp = 7                     ; Lock enable bit position
                                 .equ WDT_SYNCBUSY_bm = 0x01              ; Syncronization busy bit mask
                                 .equ WDT_SYNCBUSY_bp = 0                 ; Syncronization busy bit position
                                 
                                 ; Period select
                                 .equ WDT_PERIOD_OFF_gc = (0x00<<0)       ; Off
                                 .equ WDT_PERIOD_8CLK_gc = (0x01<<0)      ; 8 cycles (8ms)
                                 .equ WDT_PERIOD_16CLK_gc = (0x02<<0)     ; 16 cycles (16ms)
                                 .equ WDT_PERIOD_32CLK_gc = (0x03<<0)     ; 32 cycles (32ms)
                                 .equ WDT_PERIOD_64CLK_gc = (0x04<<0)     ; 64 cycles (64ms)
                                 .equ WDT_PERIOD_128CLK_gc = (0x05<<0)    ; 128 cycles (0.128s)
                                 .equ WDT_PERIOD_256CLK_gc = (0x06<<0)    ; 256 cycles (0.256s)
                                 .equ WDT_PERIOD_512CLK_gc = (0x07<<0)    ; 512 cycles (0.512s)
                                 .equ WDT_PERIOD_1KCLK_gc = (0x08<<0)     ; 1K cycles (1.0s)
                                 .equ WDT_PERIOD_2KCLK_gc = (0x09<<0)     ; 2K cycles (2.0s)
                                 .equ WDT_PERIOD_4KCLK_gc = (0x0A<<0)     ; 4K cycles (4.1s)
                                 .equ WDT_PERIOD_8KCLK_gc = (0x0B<<0)     ; 8K cycles (8.2s)
                                 
                                 ; Window select
                                 .equ WDT_WINDOW_OFF_gc = (0x00<<4)       ; Off
                                 .equ WDT_WINDOW_8CLK_gc = (0x01<<4)      ; 8 cycles (8ms)
                                 .equ WDT_WINDOW_16CLK_gc = (0x02<<4)     ; 16 cycles (16ms)
                                 .equ WDT_WINDOW_32CLK_gc = (0x03<<4)     ; 32 cycles (32ms)
                                 .equ WDT_WINDOW_64CLK_gc = (0x04<<4)     ; 64 cycles (64ms)
                                 .equ WDT_WINDOW_128CLK_gc = (0x05<<4)    ; 128 cycles (0.128s)
                                 .equ WDT_WINDOW_256CLK_gc = (0x06<<4)    ; 256 cycles (0.256s)
                                 .equ WDT_WINDOW_512CLK_gc = (0x07<<4)    ; 512 cycles (0.512s)
                                 .equ WDT_WINDOW_1KCLK_gc = (0x08<<4)     ; 1K cycles (1.0s)
                                 .equ WDT_WINDOW_2KCLK_gc = (0x09<<4)     ; 2K cycles (2.0s)
                                 .equ WDT_WINDOW_4KCLK_gc = (0x0A<<4)     ; 4K cycles (4.1s)
                                 .equ WDT_WINDOW_8KCLK_gc = (0x0B<<4)     ; 8K cycles (8.2s)
                                 
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 
                                 
                                 #define DATAMEM_START 0x0000
                                 #define DATAMEM_SIZE 0xC000
                                 #define DATAMEM_END (0x0000 + 0xC000 - 1)
                                 
                                 #define EEPROM_START 0x1400
                                 #define EEPROM_SIZE 0x0100
                                 #define EEPROM_END (0x1400 + 0x0100 - 1)
                                 
                                 #define FUSES_START 0x1280
                                 #define FUSES_SIZE 0x000A
                                 #define FUSES_END (0x1280 + 0x000A - 1)
                                 
                                 #define INTERNAL_SRAM_START 0x2800
                                 #define INTERNAL_SRAM_SIZE 0x1800
                                 #define INTERNAL_SRAM_END (0x2800 + 0x1800 - 1)
                                 
                                 #define IO_START 0x0000
                                 #define IO_SIZE 0x1100
                                 #define IO_END (0x0000 + 0x1100 - 1)
                                 
                                 #define LOCKBITS_START 0x128A
                                 #define LOCKBITS_SIZE 0x0001
                                 #define LOCKBITS_END (0x128A + 0x0001 - 1)
                                 
                                 #define MAPPED_PROGMEM_START 0x4000
                                 #define MAPPED_PROGMEM_SIZE 0xC000
                                 #define MAPPED_PROGMEM_END (0x4000 + 0xC000 - 1)
                                 
                                 #define PROD_SIGNATURES_START 0x1103
                                 #define PROD_SIGNATURES_SIZE 0x007D
                                 #define PROD_SIGNATURES_END (0x1103 + 0x007D - 1)
                                 
                                 #define SIGNATURES_START 0x1100
                                 #define SIGNATURES_SIZE 0x0003
                                 #define SIGNATURES_END (0x1100 + 0x0003 - 1)
                                 
                                 #define USER_SIGNATURES_START 0x1300
                                 #define USER_SIGNATURES_SIZE 0x0040
                                 #define USER_SIGNATURES_END (0x1300 + 0x0040 - 1)
                                 
                                 #define PROGMEM_START 0x0000
                                 #define PROGMEM_SIZE 0xC000
                                 #define PROGMEM_END (0x0000 + 0xC000 - 1)
                                 
                                 #define PROGMEM_START 0x0000
                                 #define PROGMEM_SIZE 0xC000
                                 #define PROGMEM_END (0x0000 + 0xC000 - 1)
                                 
                                 
                                 ; Legacy definitions
                                 .equ    FLASHSTART    = (PROGMEM_START / 2) ; Note: Word address
                                 .equ    FLASHEND      = (PROGMEM_END / 2) ; Note: Word address
                                 .equ    IOEND         = IO_END
                                 .equ    SRAM_START    = INTERNAL_SRAM_START
                                 .equ    SRAM_SIZE     = INTERNAL_SRAM_SIZE
                                 .equ    RAMEND        = INTERNAL_SRAM_END
                                 .equ    E2END         = EEPROM_END
                                 .equ    EEPROMEND     = EEPROM_END
                                 
                                 
                                 ; Definitions used by the assembler
                                 #pragma AVRPART MEMORY PROG_FLASH 0xC000
                                 #pragma AVRPART MEMORY EEPROM 0x0100
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 0x1800
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x2800
                                 
                                 ; ***** INTERRUPT VECTORS, ABSOLUTE ADDRESSES ****************************
                                 
                                 ; CRCSCAN interrupt vectors
                                 .equ CRCSCAN_NMI_vect = 2                ; 
                                 
                                 ; BOD interrupt vectors
                                 .equ BOD_VLM_vect = 4                    ; 
                                 
                                 ; RTC interrupt vectors
                                 .equ RTC_CNT_vect = 6                    ; 
                                 .equ RTC_PIT_vect = 8                    ; 
                                 
                                 ; CCL interrupt vectors
                                 .equ CCL_CCL_vect = 10                   ; 
                                 
                                 ; PORTA interrupt vectors
                                 .equ PORTA_PORT_vect = 12                ; 
                                 
                                 ; TCA0 interrupt vectors
                                 .equ TCA0_LUNF_vect = 14                 ; 
                                 .equ TCA0_OVF_vect = 14                  ; 
                                 .equ TCA0_HUNF_vect = 16                 ; 
                                 .equ TCA0_LCMP0_vect = 18                ; 
                                 .equ TCA0_CMP0_vect = 18                 ; 
                                 .equ TCA0_CMP1_vect = 20                 ; 
                                 .equ TCA0_LCMP1_vect = 20                ; 
                                 .equ TCA0_LCMP2_vect = 22                ; 
                                 .equ TCA0_CMP2_vect = 22                 ; 
                                 
                                 ; TCB0 interrupt vectors
                                 .equ TCB0_INT_vect = 24                  ; 
                                 
                                 ; TCB1 interrupt vectors
                                 .equ TCB1_INT_vect = 26                  ; 
                                 
                                 ; TWI0 interrupt vectors
                                 .equ TWI0_TWIS_vect = 28                 ; 
                                 .equ TWI0_TWIM_vect = 30                 ; 
                                 
                                 ; SPI0 interrupt vectors
                                 .equ SPI0_INT_vect = 32                  ; 
                                 
                                 ; USART0 interrupt vectors
                                 .equ USART0_RXC_vect = 34                ; 
                                 .equ USART0_DRE_vect = 36                ; 
                                 .equ USART0_TXC_vect = 38                ; 
                                 
                                 ; PORTD interrupt vectors
                                 .equ PORTD_PORT_vect = 40                ; 
                                 
                                 ; AC0 interrupt vectors
                                 .equ AC0_AC_vect = 42                    ; 
                                 
                                 ; ADC0 interrupt vectors
                                 .equ ADC0_RESRDY_vect = 44               ; 
                                 .equ ADC0_WCOMP_vect = 46                ; 
                                 
                                 ; PORTC interrupt vectors
                                 .equ PORTC_PORT_vect = 48                ; 
                                 
                                 ; TCB2 interrupt vectors
                                 .equ TCB2_INT_vect = 50                  ; 
                                 
                                 ; USART1 interrupt vectors
                                 .equ USART1_RXC_vect = 52                ; 
                                 .equ USART1_DRE_vect = 54                ; 
                                 .equ USART1_TXC_vect = 56                ; 
                                 
                                 ; PORTF interrupt vectors
                                 .equ PORTF_PORT_vect = 58                ; 
                                 
                                 ; NVMCTRL interrupt vectors
                                 .equ NVMCTRL_EE_vect = 60                ; 
                                 
                                 ; USART2 interrupt vectors
                                 .equ USART2_RXC_vect = 62                ; 
                                 .equ USART2_DRE_vect = 64                ; 
                                 .equ USART2_TXC_vect = 66                ; 
                                 
                                 ; PORTB interrupt vectors
                                 .equ PORTB_PORT_vect = 68                ; 
                                 
                                 ; PORTE interrupt vectors
                                 .equ PORTE_PORT_vect = 70                ; 
                                 
                                 ; TCB3 interrupt vectors
                                 .equ TCB3_INT_vect = 72                  ; 
                                 
                                 ; USART3 interrupt vectors
                                 .equ USART3_RXC_vect = 74                ; 
                                 .equ USART3_DRE_vect = 76                ; 
                                 .equ USART3_TXC_vect = 78                ; 
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS, MODULE BASES **********************************
                                 
                                 .equ CRCSCAN_vbase = 2
                                 .equ BOD_vbase = 4
                                 .equ RTC_vbase = 6
                                 .equ CCL_vbase = 10
                                 .equ PORTA_vbase = 12
                                 .equ TCA0_vbase = 14
                                 .equ TCB0_vbase = 24
                                 .equ TCB1_vbase = 26
                                 .equ TWI0_vbase = 28
                                 .equ SPI0_vbase = 32
                                 .equ USART0_vbase = 34
                                 .equ PORTD_vbase = 40
                                 .equ AC0_vbase = 42
                                 .equ ADC0_vbase = 44
                                 .equ PORTC_vbase = 48
                                 .equ TCB2_vbase = 50
                                 .equ USART1_vbase = 52
                                 .equ PORTF_vbase = 58
                                 .equ NVMCTRL_vbase = 60
                                 .equ USART2_vbase = 62
                                 .equ PORTB_vbase = 68
                                 .equ PORTE_vbase = 70
                                 .equ TCB3_vbase = 72
                                 .equ USART3_vbase = 74
                                 
                                 
                                 ; ***** INTERRUPT VECTORS, VECTOR OFFSETS ********************************
                                 
                                 ; CRCSCAN interrupt vector offsets
                                 
                                 .equ CRCSCAN_NMI_voffset = 0
                                 
                                 ; BOD interrupt vector offsets
                                 
                                 .equ BOD_VLM_voffset = 0
                                 
                                 ; RTC interrupt vector offsets
                                 
                                 .equ RTC_CNT_voffset = 0
                                 .equ RTC_PIT_voffset = 0
                                 
                                 ; CCL interrupt vector offsets
                                 
                                 .equ CCL_CCL_voffset = 0
                                 
                                 ; PORTA interrupt vector offsets
                                 
                                 .equ PORTA_PORT_voffset = 0
                                 
                                 ; TCA0 interrupt vector offsets
                                 
                                 .equ TCA0_LUNF_voffset = 0
                                 .equ TCA0_OVF_voffset = 0
                                 .equ TCA0_HUNF_voffset = 0
                                 .equ TCA0_LCMP0_voffset = 0
                                 .equ TCA0_CMP0_voffset = 0
                                 .equ TCA0_CMP1_voffset = 0
                                 .equ TCA0_LCMP1_voffset = 0
                                 .equ TCA0_LCMP2_voffset = 0
                                 .equ TCA0_CMP2_voffset = 0
                                 
                                 ; TCB0 interrupt vector offsets
                                 
                                 .equ TCB0_INT_voffset = 0
                                 
                                 ; TCB1 interrupt vector offsets
                                 
                                 .equ TCB1_INT_voffset = 0
                                 
                                 ; TWI0 interrupt vector offsets
                                 
                                 .equ TWI0_TWIS_voffset = 0
                                 .equ TWI0_TWIM_voffset = 0
                                 
                                 ; SPI0 interrupt vector offsets
                                 
                                 .equ SPI0_INT_voffset = 0
                                 
                                 ; USART0 interrupt vector offsets
                                 
                                 .equ USART0_RXC_voffset = 0
                                 .equ USART0_DRE_voffset = 0
                                 .equ USART0_TXC_voffset = 0
                                 
                                 ; PORTD interrupt vector offsets
                                 
                                 .equ PORTD_PORT_voffset = 0
                                 
                                 ; AC0 interrupt vector offsets
                                 
                                 .equ AC0_AC_voffset = 0
                                 
                                 ; ADC0 interrupt vector offsets
                                 
                                 .equ ADC0_RESRDY_voffset = 0
                                 .equ ADC0_WCOMP_voffset = 0
                                 
                                 ; PORTC interrupt vector offsets
                                 
                                 .equ PORTC_PORT_voffset = 0
                                 
                                 ; TCB2 interrupt vector offsets
                                 
                                 .equ TCB2_INT_voffset = 0
                                 
                                 ; USART1 interrupt vector offsets
                                 
                                 .equ USART1_RXC_voffset = 0
                                 .equ USART1_DRE_voffset = 0
                                 .equ USART1_TXC_voffset = 0
                                 
                                 ; PORTF interrupt vector offsets
                                 
                                 .equ PORTF_PORT_voffset = 0
                                 
                                 ; NVMCTRL interrupt vector offsets
                                 
                                 .equ NVMCTRL_EE_voffset = 0
                                 
                                 ; USART2 interrupt vector offsets
                                 
                                 .equ USART2_RXC_voffset = 0
                                 .equ USART2_DRE_voffset = 0
                                 .equ USART2_TXC_voffset = 0
                                 
                                 ; PORTB interrupt vector offsets
                                 
                                 .equ PORTB_PORT_voffset = 0
                                 
                                 ; PORTE interrupt vector offsets
                                 
                                 .equ PORTE_PORT_voffset = 0
                                 
                                 ; TCB3 interrupt vector offsets
                                 
                                 .equ TCB3_INT_voffset = 0
                                 
                                 ; USART3 interrupt vector offsets
                                 
                                 .equ USART3_RXC_voffset = 0
                                 .equ USART3_DRE_voffset = 0
                                 .equ USART3_TXC_voffset = 0
                                 
                                 
                                 
                                 .equ INT_VECTORS_SIZE = 80 ; size in words
                                 
                                 
                                 #endif /* _M4809DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 
                                 
                                 ; Masi_V1.asm
                                 ;
                                 ; Created: 05/05/2020 04:37:24 p. m.
                                 ; Author : jchangfu
                                 ;
                                 
                                 
                                 .cseg
                                 .org	$0
000000 c048                      	rjmp	multitask_init
                                 
                                 .org TCA0_OVF_vect					; = 14 TCA0 overflow interrupt vector. stepper motor
00000e 940c 055e                 	jmp	isr_TCA_ovf
                                 	
                                 .org TCB0_INT_vect					; = 24 TCB0 interrupt vectors. timers
000018 c198                      	rjmp	isr_TCB0_capture
                                 
                                 .org USART1_RXC_vect				; = 52 USART1 receive interrupt vector. adc sensor
000034 940c 0bac                 	jmp	bat_adc_isr_rxc
                                 
                                 .org USART2_RXC_vect				; = 62 USART2 receive interrupt vector. screen
00003e 940c 0c94                 	jmp		screen_isr_rxc
                                 
                                 
                                 .include "multitask.asm"
                                 
                                 ; multitask.asm
                                 ;
                                 ; Created: 05/05/2020 04:38:50 p. m.
                                 ; Author : jchangfu
                                 ;
                                 
                                  .equ	multitask_TASK_STACK_SIZE = 128
                                 
                                 .cseg
                                 multitask_task_table:
000040 1784                      	.dw		main_task
000041 01f6                      	.dw		debug_task
000042 0119                      	.dw		timer_task
000043 0907                      	.dw		sensors_adc_task
000044 0a00                      	.dw		sensors_i2c_task
000045 0b64                      	.dw		sensors_serial_task
000046 0c58                      	.dw		screen_task
000047 0ef7                      	.dw		power_task
000048 0f4e                      	.dw		buzzer_task
                                 multitask_task_table_end:
                                 
                                 .equ	multitask_TASKS_COUNT = (multitask_task_table_end-multitask_task_table)
                                 
                                 .dseg
002800                           multitask_curr_task:		.byte 1
002801                           multitask_sp_table:			.byte 2*multitask_TASKS_COUNT							; LO-HI
002813                           multitask_stack_pool:		.byte multitask_TASK_STACK_SIZE*multitask_TASKS_COUNT
                                 multitask_stack_pool_end:
                                 
                                 .cseg
                                 multitask_init:
000049 94f8                      	cli												;disable global interrupts
00004a e30f                      	ldi		R16,high(RAMEND)						;initialize stack
00004b bf0e                      	out		CPU_SPH,R16
00004c ef0f                      	ldi		R16,low(RAMEND)
00004d bf0d                      	out		CPU_SPL,R16
                                 	
00004e d020                      	rcall	multitask_ports_init					;initialize ports
00004f d09e                      	rcall	multitask_osc_init						;change to external oscillator
                                 
000050 e0f0                      	ldi		ZH,high(multitask_task_table*2)
000051 e8e0                      	ldi		ZL,low(multitask_task_table*2)
000052 e2b8                      	ldi		XH,high(multitask_sp_table)
000053 e0a1                      	ldi		XL,low(multitask_sp_table)
000054 e2d8                      	ldi		YH,high(multitask_stack_pool+multitask_TASK_STACK_SIZE)
000055 e9c3                      	ldi		YL,low(multitask_stack_pool+multitask_TASK_STACK_SIZE)
000056 e029                      	ldi		R18,multitask_TASKS_COUNT
                                 multitask_init_loop:
000057 9105                      	lpm		R16,Z+									; task start address
000058 9115                      	lpm		R17,Z+
000059 930a                      	st		-Y,R16									; push task address to stack
00005a 931a                      	st		-Y,R17
00005b 9721                      	sbiw	YL,1
00005c 93cd                      	st		X+,YL									; store task sp to table
00005d 93dd                      	st		X+,YH
00005e e803                      	ldi		R16,low(multitask_TASK_STACK_SIZE+3)	; next stack
00005f 0fc0                      	add		YL,R16
000060 e000                      	ldi		R16,high(multitask_TASK_STACK_SIZE+3)
000061 1fd0                      	adc		YH,R16
000062 952a                      	dec		R18										; next task
000063 f799                      	brne	multitask_init_loop
                                 
000064 e000                      	ldi		R16,0									; start on first task
000065 9300 2800                 	sts		multitask_curr_task,R16
000067 9100 2801                 	lds		R16,multitask_sp_table					; SPL
000069 9110 2802                 	lds		R17,multitask_sp_table+1				; SPH
00006b bf1e                      	out		CPU_SPH,R17
00006c bf0d                      	out		CPU_SPL,R16
                                 		
00006d 9478                      	sei												; enable global interrupts
00006e 9508                      	ret
                                 
                                 
                                 
                                 
                                 multitask_ports_init:
                                 ;	PA0: (HI-Z)		external oscillator
                                 ;	PA1: (OUT-LOW)	flow sensor power enable
                                 ;	PA2: (PULL-UP)	flow sensor SDA
                                 ;   PA3: (PULL-UP)	flow sensor SCL
                                 ;	PA4: (HI-Z)		debug tx. usart 0
                                 ;   PA5: (HI-Z)     debug rx. usart 0
                                 ;	PA6: (PULL-UP)	nc
                                 ;   PA7: (PULL-UP)	nc
00006f e000                      	ldi		R16,0x00
000070 9300 0404                 	sts		PORTA_OUT,R16
000072 e002                      	ldi		R16,0x02
000073 9300 0400                 	sts		PORTA_DIR,R16
000075 e000                      	ldi		R16,0x00
000076 9300 0410                 	sts		PORTA_PIN0CTRL,R16
000078 9300 0411                 	sts		PORTA_PIN1CTRL,R16
00007a 9300 0414                 	sts		PORTA_PIN4CTRL,R16
00007c 9300 0415                 	sts		PORTA_PIN5CTRL,R16
00007e e008                      	ldi		R16,PORT_PULLUPEN_bm
00007f 9300 0412                 	sts		PORTA_PIN2CTRL,R16
000081 9300 0413                 	sts		PORTA_PIN3CTRL,R16
000083 9300 0414                 	sts		PORTA_PIN4CTRL,R16
000085 9300 0417                 	sts		PORTA_PIN7CTRL,R16
                                 
                                 ;	PB0: (OUT-LOW)	stepper pulse
                                 ;	PB1: (OUT-LOW)	stepper dir
                                 ;	PB2: (OUT-HIGH)	stepper enable
                                 ;   PB3: (OUT-LOW)	flow sensor level translator enable
                                 ;	PB4: (PULL-UP)	nc
                                 ;   PB5: (HI-Z)     Vac detect (inverse logic)
000087 e004                      	ldi		R16,0x04
000088 9300 0424                 	sts		PORTB_OUT,R16
00008a e00f                      	ldi		R16,0x0f
00008b 9300 0420                 	sts		PORTB_DIR,R16
00008d e000                      	ldi		R16,0x00
00008e 9300 0430                 	sts		PORTB_PIN0CTRL,R16
000090 9300 0431                 	sts		PORTB_PIN1CTRL,R16
000092 9300 0432                 	sts		PORTB_PIN2CTRL,R16
000094 9300 0433                 	sts		PORTB_PIN3CTRL,R16
000096 9300 0435                 	sts		PORTB_PIN5CTRL,R16
000098 e008                      	ldi		R16,PORT_PULLUPEN_bm
000099 9300 0434                 	sts		PORTB_PIN4CTRL,R16
                                 
                                 ;	PC0: (OUT-LOW)	battery meassure enable
                                 ;	PC1: (HI-Z)		battery meassure rx. usart 1
                                 ;	PC2: (HI-Z)		on/off switch
                                 ;	PC3: (OUT-HIGH)	self locking power
                                 ;	PC4: (PULL-UP)	nc
                                 ;	PC5: (PULL-UP)	nc
                                 ;	PC6: (OUT-LOW)	buzzer
                                 ;	PC7: (PULL-UP)	nc
00009b e008                      	ldi		R16,0x08
00009c 9300 0444                 	sts		PORTC_OUT,R16
00009e e409                      	ldi		R16,0x49
00009f 9300 0440                 	sts		PORTC_DIR,R16
0000a1 e000                      	ldi		R16,0x00
0000a2 9300 0450                 	sts		PORTC_PIN0CTRL,R16
0000a4 9300 0451                 	sts		PORTC_PIN1CTRL,R16
0000a6 9300 0452                 	sts		PORTC_PIN2CTRL,R16
0000a8 9300 0453                 	sts		PORTC_PIN3CTRL,R16
0000aa 9300 0456                 	sts		PORTC_PIN6CTRL,R16
0000ac e008                      	ldi		R16,PORT_PULLUPEN_bm
0000ad 9300 0454                 	sts		PORTC_PIN4CTRL,R16
0000af 9300 0455                 	sts		PORTC_PIN5CTRL,R16
0000b1 9300 0457                 	sts		PORTC_PIN7CTRL,R16
                                 
                                 ;	PD0: (HI-Z)		pressure sensor ADC
                                 ;	PD1: (HI-Z)		oxigen sensor ADC
                                 ;	PD2: (HI-Z)		flow sensor VDD(3.3v/2) ADC
                                 ;	PD3: (HI-Z)		pressure/oxygen sensor VDD(5v/2) ADC
                                 ;	PD4: (OUT-LOW)	pressure/oxygen power enable
                                 ;	PD5: (HI-Z)		global current sensor ADC
                                 ;	PD6: (OUT-LOW)	screen power enable
                                 ;	PD7: (HI-Z)		AREF
0000b3 e000                      	ldi		R16,0x00
0000b4 9300 0464                 	sts		PORTD_OUT,R16
0000b6 e500                      	ldi		R16,0x50
0000b7 9300 0460                 	sts		PORTD_DIR,R16
0000b9 e000                      	ldi		R16,0x00
0000ba 9300 0470                 	sts		PORTD_PIN0CTRL,R16
0000bc 9300 0471                 	sts		PORTD_PIN1CTRL,R16
0000be 9300 0472                 	sts		PORTD_PIN2CTRL,R16
0000c0 9300 0473                 	sts		PORTD_PIN3CTRL,R16
0000c2 9300 0474                 	sts		PORTD_PIN4CTRL,R16
0000c4 9300 0475                 	sts		PORTD_PIN5CTRL,R16
0000c6 9300 0476                 	sts		PORTD_PIN6CTRL,R16
0000c8 9300 0477                 	sts		PORTD_PIN7CTRL,R16
                                 
                                 ;	PE0: (HI-Z)		Limit SW1
                                 ;	PE1: (HI-Z)		Limit SW2
                                 ;	PE2: (HI-Z)		Limit SW3
                                 ;	PE3: (HI-Z)		Limit SW4
0000ca e000                      	ldi		R16,0x00
0000cb 9300 0484                 	sts		PORTE_OUT,R16
0000cd e000                      	ldi		R16,0x00
0000ce 9300 0480                 	sts		PORTE_DIR,R16
                                 ;	ldi		R16,0x00
0000d0 e008                      	ldi		R16,PORT_PULLUPEN_bm
0000d1 9300 0490                 	sts		PORTE_PIN0CTRL,R16
0000d3 9300 0491                 	sts		PORTE_PIN1CTRL,R16
0000d5 9300 0492                 	sts		PORTE_PIN2CTRL,R16
0000d7 9300 0493                 	sts		PORTE_PIN3CTRL,R16
                                 
                                 
                                 ;	PF0: (HI-Z)		screen tx. usart 2
                                 ;   PF1: (HI-Z)     screen rx. usart 2
                                 ;	PF2: (OUT-LOW)	debug led
                                 ;	PF3: (HI-Z)		wdi
                                 ;	PF4: (PULL-UP)	nc
                                 ;	PF5: (PULL-UP)	nc
0000d9 e000                      	ldi		R16,0x00
0000da 9300 04a4                 	sts		PORTF_OUT,R16
0000dc e004                      	ldi		R16,0x04
0000dd 9300 04a0                 	sts		PORTF_DIR,R16
0000df e000                      	ldi		R16,0x00
0000e0 9300 04b0                 	sts		PORTF_PIN0CTRL,R16
0000e2 9300 04b1                 	sts		PORTF_PIN1CTRL,R16
0000e4 9300 04b2                 	sts		PORTF_PIN2CTRL,R16
0000e6 9300 04b3                 	sts		PORTF_PIN3CTRL,R16
0000e8 e008                      	ldi		R16,PORT_PULLUPEN_bm
0000e9 9300 04b4                 	sts		PORTF_PIN4CTRL,R16
0000eb 9300 04b5                 	sts		PORTF_PIN5CTRL,R16
                                 
0000ed 9508                      	ret
                                 
                                 
                                 
                                 
                                 multitask_osc_init:	
0000ee ed18                      	ldi		R17,CPU_CCP_IOREG_gc					; assign key IOREG
                                 
0000ef e000                      	ldi		R16,0x00								; prescaler disable	
0000f0 bf14                      	out		CPU_CCP,R17
0000f1 9300 0061                 	sts		CLKCTRL_MCLKCTRLB,R16	
                                 
0000f3 e003                      	ldi		R16,CLKCTRL_CLKSEL_EXTCLK_gc			; select external clock
0000f4 bf14                      	out		CPU_CCP,R17
0000f5 9300 0060                 	sts		CLKCTRL_MCLKCTRLA,R16
                                 	
                                 multitask_osc_init_loop_wait_change:				; wait for system oscillator changing to finish
0000f7 9100 0063                 	lds		R16,CLKCTRL_MCLKSTATUS
0000f9 fd00                      	sbrc	R16,CLKCTRL_SOSC_bp
0000fa cffc                      	rjmp	multitask_osc_init_loop_wait_change
                                 
0000fb 9508                      	ret
                                 
                                 
                                 .macro task_change
                                 	call	multitask_task_change
                                 .endm
                                 
                                 multitask_task_change:
0000fc e2b8                      	ldi		XH,high(multitask_sp_table)				; save sp in table
0000fd e0a1                      	ldi		XL,low(multitask_sp_table)
0000fe 9100 2800                 	lds		R16,multitask_curr_task
000100 0f00                      	lsl		R16
000101 0fa0                      	add		XL,R16
000102 2700                      	clr		R16
000103 1fb0                      	adc		XH,R16
000104 b70d                      	in		R16,CPU_SPL
000105 930d                      	st		X+,R16
000106 b70e                      	in		R16,CPU_SPH
000107 930d                      	st		X+,R16
                                 
000108 9100 2800                 	lds		R16,multitask_curr_task					; next task
00010a 9503                      	inc		R16
00010b 3009                      	cpi		R16,multitask_TASKS_COUNT
00010c f018                      	brlo	multitask_task_change_no_first
00010d 2700                      	clr		R16										; roll to first task
00010e e2b8                      	ldi		XH,high(multitask_sp_table)
00010f e0a1                      	ldi		XL,low(multitask_sp_table)
                                 multitask_task_change_no_first:
000110 9300 2800                 	sts		multitask_curr_task,R16
                                 
000112 910d                      	ld		R16,X+									; load next sp
000113 911d                      	ld		R17,X+
000114 94f8                      	cli
000115 bf1e                      	out		CPU_SPH,R17
000116 bf0d                      	out		CPU_SPL,R16
000117 9478                      	sei
000118 9508                      	ret
                                 .include "timer.asm"
                                 
                                 ;
                                 ; Created: 05/05/2020 06:05:11 p. m.
                                 ; Author : jchangfu
                                 ;
                                 
                                 .equ fosc = 18432000
                                 
                                 .dseg					
002c93                           timer_flags:	.byte 1	
002c94                           timer_cs:		.byte 1 
002c95                           timer_ds:		.byte 1 
002c96                           timer_s:		.byte 1
                                 
                                 
                                 .macro dec8
                                 	lds		R16,@0
                                 	subi	R16,1
                                 	brcs	dec8_Zero
                                 	sts		@0,R16
                                 dec8_Zero:
                                 .endm
                                 
                                 .macro dec16
                                 	lds		XL,@0
                                 	lds		XH,@0+1
                                 	sbiw	XL,1
                                 	brcs	dec16_Zero
                                 	sts		@0,XL
                                 	sts		@0+1,XH
                                 dec16_Zero:
                                 .endm
                                 
                                 
                                 
                                 
                                 
                                 .cseg
                                 timer_task:
000119 d079                      	rcall	timer_init
                                 timer_task_Loop:
00011a 940e 00fc                 	task_change
00011c 9120 2c93                 	lds		R18,timer_flags
00011e ff20                      	sbrs	R18,0
00011f cffa                      	rjmp	timer_task_Loop
                                 
000120 7f2e                      	cbr		R18,0x01
                                 // update ms soft timers
000121 9100 2cb2
000123 5001
000124 f010
000125 9300 2cb2                 	dec8	sensors_pressure_tmr_ms
000127 9100 2cd6
000129 5001
00012a f010
00012b 9300 2cd6                 	dec8	sensors_flow_tmr_ms
                                 
00012d 9100 2e00
00012f 5001
000130 f010
000131 9300 2e00                 	dec8	screen_tx_tmr_ms
000133 9100 2e01
000135 5001
000136 f010
000137 9300 2e01                 	dec8	screen_rx_tmr_ms
000139 9100 2ea8
00013b 5001
00013c f010
00013d 9300 2ea8                 	dec8	pid_tmr_ms
00013f 9100 2e90
000141 5001
000142 f010
000143 9300 2e90                 	dec8	power_buzzer_tmr_ms
000145 9100 2caf
000147 5001
000148 f010
000149 9300 2caf                 	dec8	i2c_master_wait_tmr_ms
00014b 9100 2db9
00014d 5001
00014e f010
00014f 9300 2db9                 	dec8	bat_adc_rx_tmr_ms
                                 
000151 ff21                      	sbrs	R18,1
000152 c03d                      	rjmp	timer_task_update
000153 7f2d                      	cbr		R18,0x02
                                 // update cs soft timers
000154 9100 2d5e
000156 5001
000157 f010
000158 9300 2d5e                 	dec8	sensors_current_tmr_cs
00015a 9100 2f2f
00015c 5001
00015d f010
00015e 9300 2f2f                 	dec8	main_tmr_cs
000160 9100 2e92
000162 5001
000163 f010
000164 9300 2e92                 	dec8	buzzer_tmr_cs
000166 9100 2dba
000168 5001
000169 f010
00016a 9300 2dba                 	dec8	bat_adc_tmr_cs	
                                 	
00016c ff22                      	sbrs	R18,2
00016d c022                      	rjmp	timer_task_update
00016e 7f2b                      	cbr		R18,0x04
                                 // update ds soft timers
00016f 9100 2d32
000171 5001
000172 f010
000173 9300 2d32                 	dec8	sensors_oxygen_tmr_ds
000175 9100 2d46
000177 5001
000178 f010
000179 9300 2d46                 	dec8	sensors_VDD33_tmr_ds
00017b 9100 2d52
00017d 5001
00017e f010
00017f 9300 2d52                 	dec8	sensors_VDD50_tmr_ds
000181 9100 2e8f
000183 5001
000184 f010
000185 9300 2e8f                 	dec8	power_tmr_ds
                                 	
                                 
000187 ff23                      	sbrs	R18,3
000188 c007                      	rjmp	timer_task_update
000189 7f27                      	cbr		R18,0x08
                                 // update seg soft timers
00018a 9100 2e93
00018c 5001
00018d f010
00018e 9300 2e93                 	dec8	ee_write_tmr_s
                                 	
                                 
                                 timer_task_update:
000190 9320 2c93                 	sts		Timer_Flags,R18
000192 cf87                      	rjmp	timer_task_Loop
                                 
                                 
                                 
                                 timer_init:
000193 e000                      	ldi		R16,0x00
000194 9300 0a80                 	sts		TCB0_CTRLA,R16				; turn off timer
000196 9300 0a81                 	sts		TCB0_CTRLB,R16				; periodic interrupt mode
000198 9300 0a84                 	sts		TCB0_EVCTRL,R16				; no capture
                                 
00019a e000                      	ldi		R16,low(fosc/1000)			; period: 1 ms
00019b e418                      	ldi		R17,high(fosc/1000)		
00019c 9300 0a8c                 	sts		TCB0_CCMPL,R16
00019e 9310 0a8d                 	sts		TCB0_CCMPH,R17
                                 
0001a0 e001                      	ldi		R16,TCB_CAPT_bm				; enable capture interruptions
0001a1 9300 0a85                 	sts		TCB0_INTCTRL,R16
                                 
0001a3 e000                      	ldi		R16,0						; initialize variables
0001a4 9300 2c93                 	sts		timer_flags,R16
0001a6 e00a                      	ldi		R16,10
0001a7 9300 2c94                 	sts		timer_cs,R16
0001a9 9300 2c95                 	sts		timer_ds,R16
0001ab 9300 2c96                 	sts		timer_s,R16
                                 
0001ad e001                      	ldi		R16,TCB_ENABLE_bm			; turn on timer
0001ae 9300 0a80                 	sts		TCB0_CTRLA,R16
0001b0 9508                      	ret
                                 
                                 
                                 
                                 isr_TCB0_capture:
0001b1 930f                      	push	R16							; save registers and flags
0001b2 b70f                      	in		R16,CPU_SREG
0001b3 930f                      	push	R16
0001b4 931f                      	push	R17
0001b5 932f                      	push	R18
                                 
0001b6 e001                      	ldi		R16,1
0001b7 9300 0a86                 	sts		TCB0_INTFLAGS,R16			; clear flag
                                 
0001b9 9110 2c93                 	lds		R17,Timer_Flags				; ms flag
0001bb 6011                      	ori		R17,0x01
                                 
0001bc 9100 2c94                 	lds		R16,timer_cs				; cs flag
0001be 950a                      	dec		R16
0001bf 9300 2c94                 	sts		timer_cs,R16
0001c1 f4b1                      	brne	isr_TCB0_capture_update
0001c2 e02a                      	ldi		R18,10
0001c3 9320 2c94                 	sts		Timer_cs,R18
0001c5 6012                      	ori		R17,0x02
                                 
0001c6 9100 2c95                 	lds		R16,Timer_ds				; ds flag
0001c8 950a                      	dec		R16
0001c9 9300 2c95                 	sts		Timer_ds,R16
0001cb f461                      	brne	isr_TCB0_capture_update
0001cc 9320 2c95                 	sts		Timer_ds,R18
0001ce 6014                      	ori		R17,0x04
                                 
0001cf 9100 2c96                 	lds		R16,Timer_s					; seg flag
0001d1 950a                      	dec		R16
0001d2 9300 2c96                 	sts		Timer_s,R16
0001d4 f419                      	brne	isr_TCB0_capture_update
0001d5 9320 2c96                 	sts		Timer_s,R18
0001d7 6018                      	ori		R17,0x08
                                 
                                 isr_TCB0_capture_update:
0001d8 9310 2c93                 	sts		Timer_Flags,R17
0001da 912f                      	pop		R18
0001db 911f                      	pop		R17
0001dc 910f                      	pop		R16
0001dd bf0f                      	out		CPU_SREG,R16
0001de 910f                      	pop		R16
0001df 9518                      	reti
                                 
                                 
                                 .include "debug.asm"
                                 
                                 ; debug.asm
                                 ;
                                 ; Created: 05/05/2020 20:25:42 p. m.
                                 ; Author : jchangfu
                                 ;
                                 
                                 ;	PA4: (HI-Z)		debug tx. usart 0
                                 ;   PA5: (HI-Z)     debug rx. usart 0
                                 .equ	debug_BPS = 115200
                                 
                                 .dseg
002c97                           debug_print:	.byte 1
                                 
                                 
                                 .cseg
                                 debug_msg:
0001e0 5053
0001e1 7020
0001e2 6572
0001e3 7373
0001e4 7275
0001e5 2065
0001e6 6c66
0001e7 776f
0001e8 7620
0001e9 6c65
0001ea 735f
0001eb 2070
0001ec 6576
0001ed 5f6c
0001ee 7563
0001ef 2072
0001f0 6f70
0001f1 2073
0001f2 2b74
0001f3 6620
0001f4 0d2b
0001f5 000a                      	.db "SP pressure flow vel_sp vel_cur pos t+ f+",13,10,0
                                 ;	.db "O2 3.3 5.0 mA",13,10,0,0
                                 
                                 .macro debug_printf_3
                                 	lds		R16,@0-1
                                 	lds		XL,@0
                                 	lds		XH,@0+1
                                 	ldi		R17,@1
                                 	rcall	debug_print_dec_mul
                                 .endm
                                 
                                 .macro debug_printf_2
                                 	ldi		R16,0
                                 	lds		XL,@0
                                 	lds		XH,@0+1
                                 	ldi		R17,@1
                                 	rcall	debug_print_dec_mul
                                 .endm
                                 
                                 .macro debug_printf_1
                                 	ldi		R16,0
                                 	lds		XL,@0
                                 	ldi		XH,0
                                 	sbrc	XL,7
                                 	ldi		XH,0xff
                                 	ldi		R17,@1
                                 	rcall	debug_print_dec_mul
                                 .endm
                                 
                                 .dseg
002c98                           test:	.byte 2
                                 
                                 
                                 .cseg
                                 debug_task:
0001f6 2700                      	clr		r16
0001f7 9300 2d9f                 	sts		sensors_oxygen_Calibrado,r16
0001f9 9300 2da0                 	sts		sensors_oxygen_Calibrado+1,r16
0001fb 9300 2da1                 	sts		sensors_oxygen_Calibrado+2,r16
0001fd 9300 2da2                 	sts		sensors_oxygen_Calibrado+3,r16
0001ff d02d                      	rcall	debug_init
000200 e0f3                      	ldi		ZH,high(debug_msg*2)
000201 ece0                      	ldi		ZL,low(debug_msg*2)
000202 d061                      	rcall	debug_printf
                                 debug_loop:
000203 940e 00fc                 	task_change
000205 9100 2c97                 	lds		R16,debug_print
000207 3001                      	cpi		R16,1
000208 f7d1                      	brne	debug_loop
000209 e000                      	ldi		R16,0
00020a 9300 2c97                 	sts		debug_print,R16
                                 
00020c d7c2                      	rcall	sensors_o2_cal
00020d 2400                      	clr		R0
00020e 2f0a                      	mov		R16,XL
00020f 0fdd                      	lsl		YH
000210 1d00                      	adc		R16,R0
000211 9300 2da1                 	sts		sensors_oxygen_Calibrado+2,r16
                                 ;	debug_printf_2 sensors_oxygen_Calibrado+2,1
                                 ;	debug_printf_2 sensors_oxygen_value+2,1
                                 ;	debug_printf_2 sensors_oxygen_value+1,1
                                 ;	debug_printf_2 sensors_VDD33_value+2,1
                                 ;	debug_printf_2 sensors_VDD50_value+2,1
                                 ;	debug_printf_2 sensors_current_value+2,1
                                 ;	rcall	debug_tx_crlf
                                 ;	rjmp	debug_loop
                                 
                                 
                                 ;	debug_printf_1 pid_sp,100
                                 ;	debug_printf_1 vc_cmv_ctrl_curr_flow,1
                                 ;	debug_printf_1 vc_cmv_insp_time_extra,1
                                 ;	debug_printf_2 sensors_volume_max+2,1
                                 ;	debug_printf_2 sensors_pressure_max+2,1
                                 
                                 ;	debug_printf_3 sensors_pressure_value+2,100
000213 9100 2cd8
000215 91a0 2cd9
000217 91b0 2cda
000219 e614
00021a d07a                      	debug_printf_3 sensors_flow_value+2,100
                                 ;	debug_printf_3 sensors_volume_value+2,10
                                 ;	debug_printf_2 pid_e+0,1
                                 ;	debug_printf_2 stepper_speed_sp,10
                                 ;	debug_printf_2 stepper_speed_cur,10
                                 ;	debug_printf_2 stepper_pos_cur,1
                                 ;	debug_printf_3 flow_sum,10
00021b e000
00021c 91a0 2eee
00021e e0b0
00021f fda7
000220 efbf
000221 e614
000222 d072                      	debug_printf_1 flow_count,100
000223 e000
000224 91a0 2ef6
000226 e0b0
000227 fda7
000228 efbf
000229 e614
00022a d06a                      	debug_printf_1 flow_trigger,100
                                 ;	debug_printf_1 vc_cmv_insp_time_extra,100
                                 ;	debug_printf_1 insp_flow_add,100
                                 ;	debug_printf_1 flow_flag,100
                                 
00022b d033                      	rcall	debug_tx_crlf
00022c cfd6                      	rjmp	debug_loop
                                 
                                 
                                 
                                 
                                 debug_init:
00022d 2700                      	clr		R16
00022e 9300 0805                 	sts		USART0_CTRLA,R16					; disable interrupts
                                 
000230 e100                      	ldi		R16,0x10							; init tx(PA4)
000231 9300 0405                 	sts		PORTA_OUTSET,R16
000233 9300 0401                 	sts		PORTA_DIRSET,R16
000235 e000                      	ldi		R16,0x00
000236 9300 0414                 	sts		PORTA_PIN4CTRL,R16
000238 e200                      	ldi		R16,0x20							; init rx(PA5)
000239 9300 0406                 	sts		PORTA_OUTCLR,R16
00023b 9300 0402                 	sts		PORTA_DIRCLR,R16
00023d e000                      	ldi		R16,0x00
00023e 9300 0415                 	sts		PORTA_PIN5CTRL,R16
                                 
000240 9100 05e2                 	lds		R16, PORTMUX_USARTROUTEA			; routing usart 0 to alternate pins
000242 7f0c                      	andi	R16, ~PORTMUX_USART0_gm
000243 6001                      	ori		R16,PORTMUX_USART0_ALT1_gc
000244 9300 05e2                 	sts		PORTMUX_USARTROUTEA,R16
                                 
000246 e800                      	ldi		R16, low(64*fosc/(debug_BPS*16))	; set baudrate
000247 e012                      	ldi		R17, high(64*fosc/(debug_BPS*16))
000248 9300 0808                 	sts		USART0_BAUDL,R16				
00024a 9310 0809                 	sts		USART0_BAUDH,R17
                                 
00024c e003                      	ldi		R16,0x03							; Async mode, parity disable, 
00024d 9300 0807                 	sts		USART0_CTRLC,R16					; 1 stop bit, 8 bits
                                 
00024f ec00                      	ldi		R16,0xc0							; Enable receiver and transmitter
000250 9300 0806                 	sts		USART0_CTRLB,R16					; Normal mode
000252 9508                      	ret
                                 
                                 
                                 
                                 debug_tx_byte:
000253 930f                      	push	R16
                                 debug_tx_byte_Lazo:
000254 9100 0804                 	lds		R16,USART0_STATUS
000256 fd05                      	sbrc	R16,USART_DREIF_bp
000257 c003                      	rjmp	debug_tx_byte_tx
000258 940e 00fc                 	task_change
00025a cff9                      	rjmp	debug_tx_byte_Lazo
                                 debug_tx_byte_tx:
00025b 910f                      	pop		R16
00025c 9300 0802                 	sts		USART0_TXDATAL,R16
00025e 9508                      	ret
                                 
                                 
                                 debug_tx_crlf:
00025f e00d                      	ldi		R16, 13
000260 dff2                      	rcall	debug_tx_byte
000261 e00a                      	ldi		R16, 10
000262 dff0                      	rcall	debug_tx_byte
000263 9508                      	ret
                                 
                                 
                                 
                                 debug_printf:
000264 9105                      	lpm		R16,Z+
000265 3000                      	cpi		R16,0
000266 f031                      	breq	debug_printf_ret
000267 93ef                      	push	ZL
000268 93ff                      	push	ZH
000269 dfe9                      	rcall	debug_tx_byte
00026a 91ff                      	pop		ZH
00026b 91ef                      	pop		ZL
00026c cff7                      	rjmp	debug_printf
                                 debug_printf_ret:
00026d 9508                      	ret
                                 
                                 
                                 debug_tx_int16:
00026e ffb7                      	sbrs	XH,7					; checks for sign
00026f c009                      	rjmp	debug_tx_int16_pos
000270 93af                      	push	XL						; negative number
000271 93bf                      	push	XH
000272 e20d                      	ldi		R16,'-'
000273 dfdf                      	rcall	debug_tx_byte
000274 91bf                      	pop		XH
000275 91af                      	pop		XL
000276 95b0                      	com		XH						; neg int16
000277 95a1                      	neg		XL
000278 4fbf                      	sbci	XH,255 
                                 
                                 ;	ldi		R16,'9'					; limita negativos a "-9"
                                 ;	rcall	debug_tx_byte
                                 ;	rjmp	debug_tx_int16_ret
                                 debug_tx_int16_pos:
                                 
000279 d045                      	rcall	Bin16aDec
00027a 934f                      	push	R20
00027b 933f                      	push	R19
00027c 932f                      	push	R18
00027d 931f                      	push	R17
00027e 3300                      	cpi		R16,'0'
00027f f459                      	brne	debug_tx_int16_dig5
000280 910f                      	pop		R16
000281 3300                      	cpi		R16,'0'
000282 f451                      	brne	debug_tx_int16_dig4
000283 910f                      	pop		R16
000284 3300                      	cpi		R16,'0'
000285 f449                      	brne	debug_tx_int16_dig3
000286 910f                      	pop		R16
000287 3300                      	cpi		R16,'0'
000288 f441                      	brne	debug_tx_int16_dig2
000289 910f                      	pop		R16	
00028a c008                      	rjmp	debug_tx_int16_dig1
                                 debug_tx_int16_dig5:
00028b dfc7                      	rcall	debug_tx_byte
00028c 910f                      	pop		R16
                                 debug_tx_int16_dig4:
00028d dfc5                      	rcall	debug_tx_byte
00028e 910f                      	pop		R16
                                 debug_tx_int16_dig3:
00028f dfc3                      	rcall	debug_tx_byte
000290 910f                      	pop		R16
                                 debug_tx_int16_dig2:
000291 dfc1                      	rcall	debug_tx_byte
000292 910f                      	pop		R16
                                 debug_tx_int16_dig1:
000293 dfbf                      	rcall	debug_tx_byte
                                 debug_tx_int16_ret:
000294 9508                      	ret
                                 
                                 
                                 
                                 
                                 ; show XH:XL:R16 _xR17
                                 debug_print_dec_mul:
000295 9f01                      	mul		R16,R17
000296 2ca0                      	mov		R10,R0
000297 2cb1                      	mov		R11,R1
000298 9fb1                      	mul		XH,R17
000299 2cc0                      	mov		R12,R0
00029a 9fa1                      	mul		XL,R17
00029b 0cb0                      	add		R11,R0
00029c 1cc1                      	adc		R12,R1
                                 
00029d 2dbc                      	mov		XH,R12
00029e 2dab                      	mov		XL,R11
                                 
00029f fca7                      	sbrc	R10,7
0002a0 9611                      	adiw	XL,1
                                 
0002a1 dfcc                      	rcall	debug_tx_int16
0002a2 e200                      	ldi		R16,' '
0002a3 dfaf                      	rcall	debug_tx_byte
                                 debug_pressure_ret:
0002a4 9508                      	ret
                                 .include "Global.asm"
                                 
                                  * Global.asm
                                  *
                                  *  Created: 9/02/2019 13:03:59
                                  *   Author: Computer
                                  */ 
                                 
                                 .cseg
                                 
                                 ; Convierte el nibble bajo de R16 en un texto hexadecimal
                                 ;
                                 ; Entrada: R16 -> Numero binario. considera solo 4 bits menos significativos
                                 ; Salida : R16 -> Texto Hexadecimal
                                 Nibble2Hex:
0002a5 700f                      	andi	R16,$0f
0002a6 6300                      	ori		R16,$30
0002a7 330a                      	cpi		R16,$3a
0002a8 f008                      	brlo	Nibble2Hex_Fin
0002a9 5f09                      	subi	R16,-7
                                 Nibble2Hex_Fin:
0002aa 9508                      	ret
                                 
                                 
                                 ; Convierte el nibble alto y bajo de R16 en dos textos hexadecimales
                                 ;
                                 ; Entrada: R16 -> Numero binario
                                 ; Salida : R16 -> Texto Hexadecimal parte alta
                                 ;		   R17 -> Texto Hexadecimal parte baja
                                 Bin2Hex:
0002ab 930f                      	push	R16
0002ac 9502                      	swap	R16
0002ad dff7                      	rcall	Nibble2Hex
0002ae 2f10                      	mov		R17,R16
0002af 910f                      	pop		R16
0002b0 dff4                      	rcall	Nibble2Hex
0002b1 9508                      	ret
                                 
                                 ; Convierte R16 en un texto decimal (3 caracteres)
                                 ;
                                 ; Entrada: R16 -> Numero binario
                                 ; Salida : R16 -> Texto Decimal centenas
                                 ;		   R17 -> Texto Decimal decenas
                                 ;		   R18 -> Texto Decimal unidades
                                 Bin2Dec:
0002b2 e23f                      	ldi		R19,'0'-1
0002b3 e21f                      	ldi		R17,'0'-1
0002b4 e32a                      	ldi		R18,'0'+10
                                 
                                 Bin2Dec_Centenas:
0002b5 9533                      	inc		R19
0002b6 5604                      	subi	R16,100
0002b7 f7e8                      	brsh	Bin2Dec_Centenas
0002b8 590c                      	subi	R16,-100
                                 
                                 Bin2Dec_Decenas:
0002b9 9513                      	inc		R17
0002ba 500a                      	subi	R16,10
0002bb f7e8                      	brsh	Bin2Dec_Decenas
                                 
                                 Bin2Dec_Unidades:
0002bc 0f20                      	add		R18,R16
0002bd 2f03                      	mov		R16,R19
0002be 9508                      	ret
                                 
                                 
                                 
                                 ; Convierte X en un texto decimal (5 caracteres)
                                 ;
                                 ; Entrada:   X -> Numero binario
                                 ; Salida : R16 -> Texto Decimal x10000
                                 ;		   R17 -> Texto Decimal x1000
                                 ;		   R18 -> Texto Decimal x100
                                 ;		   R19 -> Texto Decimal x10
                                 ;		   R20 -> Texto Decimal x1
                                 Bin16aDec:
0002bf e040                      	ldi		R20,0
0002c0 e05f                      	ldi		R21,$0f
0002c1 e06a                      	ldi		R22,10
0002c2 ec7d                      	ldi		R23,205
                                 
0002c3 2eaa                      	mov		R10,XL
0002c4 2eba                      	mov		R11,XL
0002c5 2ecb                      	mov		R12,XH
0002c6 2edb                      	mov		R13,XH
0002c7 94b2                      	swap	R11
0002c8 94d2                      	swap	R13
0002c9 22a5                      	and		R10,R21				; n0
0002ca 22b5                      	and		R11,R21				; n1
0002cb 22c5                      	and		R12,R21				; n2
0002cc 22d5                      	and		R13,R21				; n3
                                 
0002cd 2d0b                      	mov		R16,R11				; 6*(n3+n2+n1)+n0 -> a0(R1_H:R10_L). Max(a0)=285
0002ce 0d0c                      	add		R16,R12
0002cf 0d0d                      	add		R16,R13
0002d0 e016                      	ldi		R17,6
0002d1 9f01                      	mul		R16,R17
0002d2 0ca0                      	add		R10,R0
0002d3 1e14                      	adc		R1,R20
                                 
0002d4 9e17                      	mul		R1,R23				; cociente(a0/10) -> R16
0002d5 2d00                      	mov		R16,R0
0002d6 9ea7                      	mul		R10,R23
0002d7 0d01                      	add		R16,R1
0002d8 9506                      	lsr		R16
0002d9 9506                      	lsr		R16
0002da 9506                      	lsr		R16
0002db 9f06                      	mul		R16,R22				; residuo(a0/10) -> R10				*** UNIDADES ***
0002dc 18a0                      	sub		R10,R0
                                 
0002dd 2d3c                      	mov		R19,R12				; 5*(n3+n2)+4*n3+n1  +cociente(a0/10) -> a1(R11). Max(a1)=225+28=253
0002de 0d3d                      	add		R19,R13
0002df e015                      	ldi		R17,5
0002e0 9f31                      	mul		R19,R17
0002e1 0cdd                      	lsl		R13
0002e2 0cdd                      	lsl		R13
0002e3 0cb0                      	add		R11,R0
0002e4 0cbd                      	add		R11,R13
0002e5 0eb0                      	add		R11,R16
                                 
0002e6 9eb7                      	mul		R11,R23				; cociente(a1/10)+2*n2 -> a2(R12)
0002e7 9416                      	lsr		R1
0002e8 9416                      	lsr		R1
0002e9 9416                      	lsr		R1
0002ea 0ccc                      	lsl		R12
0002eb 0cc1                      	add		R12,R1
0002ec 9e16                      	mul		R1,R22				; residuo(a1/10) -> R11				*** DECENAS ***
0002ed 18b0                      	sub		R11,R0
                                 
0002ee 9ec7                      	mul		R12,R23				; cociente(a2/10)+4*n3 -> a3(R13)
0002ef 9416                      	lsr		R1
0002f0 9416                      	lsr		R1
0002f1 9416                      	lsr		R1
0002f2 0cd1                      	add		R13,R1
0002f3 9e16                      	mul		R1,R22				; residuo(a2/10) -> R12				*** CENTENAS ***
0002f4 18c0                      	sub		R12,R0
                                 
0002f5 9ed7                      	mul		R13,R23				; cociente(a3/10) -> a3(R14)		*** DECENAS DE MILLAR ***
0002f6 9416                      	lsr		R1
0002f7 9416                      	lsr		R1
0002f8 9416                      	lsr		R1
0002f9 2ce1                      	mov		R14,R1
0002fa 9e16                      	mul		R1,R22				; residuo(a3/10) -> R13				*** MILLAR ***
0002fb 18d0                      	sub		R13,R0
                                 
0002fc e300                      	ldi		R16,'0'
0002fd e310                      	ldi		R17,'0'
0002fe e320                      	ldi		R18,'0'
0002ff e330                      	ldi		R19,'0'
000300 e340                      	ldi		R20,'0'
000301 290e                      	or		R16,R14
000302 291d                      	or		R17,R13
000303 292c                      	or		R18,R12
000304 293b                      	or		R19,R11
000305 294a                      	or		R20,R10
000306 9508                      	ret
                                 
                                 
                                 
                                 
                                 ;*** Convierte un numero binario de 4 bytes apuntado por X (L-H)
                                 ;*** en texto (10 bytes) a partir de la posicion Y
                                 ;
                                 ; 0<=a8<=42 (30+12)		a8 = 2n7
                                 ; 0<=a7<=129 (105+24)	a7 = 6n7 + 1n6
                                 ; 0<=a6<=244 (225+19)	a6 = 8n7 + 6n6 + 1n5
                                 ; 0<=a5<=199 (165+34)	a5 = 4n7 + 7n6 + 0n5
                                 ; 0<=a4<=346 (300+46)	a4 = 3n7 + 7n6 + 4n5 + 6n4
                                 ; 0<=a3<=467 (435+32)	a3 = 5n7 + 7n6 + 8n5 + 5n4 + 4n3
                                 ; 0<=a2<=322 (270+52)	a2 = 4n7 + 2n6 + 5n5 + 5n4 + 0n3 + 2n2
                                 ; 0<=a1<=529 (465+64)	a1 = 5n7 + 1n6 + 7n5 + 3n4 + 9n3 + 5n2 + 1n1
                                 ; 0<=a0<=645			a0 = 6n7 + 6n6 + 6n5 + 6n4 + 6n3 + 6n2 + 6n1 + 1n0
                                 Bin32aDec:
000307 24ff                      	clr		R15
000308 e04a                      	ldi		R20,10
000309 ec5d                      	ldi		R21,205
00030a e076                      	ldi		R23,6
00030b e380                      	ldi		R24,'0'
                                 
00030c 910d                      	ld		R16,X+
00030d 2f10                      	mov		R17,R16
00030e 700f                      	andi	R16,$0f					; a0 = 1n0
                                 
00030f 9512                      	swap	R17
000310 701f                      	andi	R17,$0f					; a1 = 1n1
000311 9f17                      	mul		R17,R23
000312 0d00                      	add		R16,R0					; a0 += 6n1
                                 
000313 912d                      	ld		R18,X+
000314 2f32                      	mov		R19,R18
000315 702f                      	andi	R18,$0f
000316 9f27                      	mul		R18,R23
000317 0d00                      	add		R16,R0					; a0 += 6n2
000318 1a02                      	sub		R0,R18
000319 0d10                      	add		R17,R0					; a1 += 5n2
00031a 0f22                      	lsl		R18
00031b 2e22                      	mov		R2,R18					; a2 = 2n2
                                 
00031c 9532                      	swap	R19
00031d 703f                      	andi	R19,$0f
00031e e029                      	ldi		R18,9
00031f 9f32                      	mul		R19,R18
000320 0d10                      	add		R17,R0					; a1 += 9n3
000321 9f37                      	mul		R19,R23
000322 0d00                      	add		R16,R0					; a0 += 6n3		(a partir de aqui considerar a0 16 bits)
000323 24aa                      	clr		R10
000324 1ca1                      	adc		R10,R1
000325 0f33                      	lsl		R19
000326 0f33                      	lsl		R19
000327 2e33                      	mov		R3,R19					; a3 = 4n3
                                 
000328 912d                      	ld		R18,X+
000329 2f32                      	mov		R19,R18
00032a 702f                      	andi	R18,$0f
00032b 9f27                      	mul		R18,R23
00032c 0d00                      	add		R16,R0					; a0 += 6n4
00032d 1ca1                      	adc		R10,R1
00032e 2c40                      	mov		R4,R0					; a4 = 6n4
00032f 1a02                      	sub		R0,R18
000330 0c20                      	add		R2,R0					; a2 += 5n4
000331 0c30                      	add		R3,R0					; a3 += 5n4
000332 0f22                      	lsl		R18
000333 1a02                      	sub		R0,R18
000334 0d10                      	add		R17,R0					; a1 += 3n4		(a partir de aqui considerar a1 16 bits)
000335 24bb                      	clr		R11
000336 1cbf                      	adc		R11,R15
                                 
000337 9532                      	swap	R19
000338 703f                      	andi	R19,$0f
000339 2e63                      	mov		R6,R19					; a6 = 1n5
00033a 2f23                      	mov		R18,R19
00033b 0f33                      	lsl		R19
00033c 0f33                      	lsl		R19
00033d 0e43                      	add		R4,R19					; a4 += 4n5
00033e 0f32                      	add		R19,R18
00033f 0e23                      	add		R2,R19					; a2 += 5n5
000340 0f32                      	add		R19,R18
000341 0f03                      	add		R16,R19					; a0 += 6n5
000342 1caf                      	adc		R10,R15
000343 0f32                      	add		R19,R18
000344 0f13                      	add		R17,R19					; a1 += 7n5
000345 1cbf                      	adc		R11,R15
000346 0f32                      	add		R19,R18
000347 0e33                      	add		R3,R19					; a3 += 8n5
                                 
000348 912d                      	ld		R18,X+
000349 2f32                      	mov		R19,R18
00034a 702f                      	andi	R18,$0f
00034b 2e72                      	mov		R7,R18					; a7 = 1n6
00034c 0f12                      	add		R17,R18					; a1 += 1n6
00034d 1cbf                      	adc		R11,R15
00034e 9f27                      	mul		R18,R23
00034f 0d00                      	add		R16,R0					; a0 += 6n6
000350 1caf                      	adc		R10,R15
000351 0c60                      	add		R6,R0					; a6 += 6n6
000352 0e02                      	add		R0,R18
000353 0c30                      	add		R3,R0					; a3 += 7n6		(a partir de aqui considerar a3 16 bits)
000354 24dd                      	clr		R13
000355 1cd1                      	adc		R13,R1
000356 0c40                      	add		R4,R0					; a4 += 7n6
000357 2c50                      	mov		R5,R0					; a5 = 7n6
000358 0f22                      	lsl		R18
000359 0e22                      	add		R2,R18					; a2 += 2n6
                                 
00035a 9532                      	swap	R19
00035b 703f                      	andi	R19,$0f
00035c 2f23                      	mov		R18,R19
00035d 0f33                      	lsl		R19
00035e 2e83                      	mov		R8,R19					; a8 = 2n7
00035f 0f32                      	add		R19,R18
000360 0e43                      	add		R4,R19					; a4 += 3n7		(a partir de aqui considerar a4 16 bits)
000361 24ee                      	clr		R14
000362 1cef                      	adc		R14,R15
000363 0f32                      	add		R19,R18
000364 0e23                      	add		R2,R19					; a2 += 4n7		(a partir de aqui considerar a2 16 bits)
000365 24cc                      	clr		R12
000366 1ccf                      	adc		R12,R15
000367 0e53                      	add		R5,R19					; a5 += 4n7
000368 0f32                      	add		R19,R18
000369 0f13                      	add		R17,R19					; a1 += 5n7
00036a 0cbf                      	add		R11,R15
00036b 0e33                      	add		R3,R19					; a3 += 5n7
00036c 1cdf                      	adc		R13,R15
00036d 0f32                      	add		R19,R18
00036e 0f03                      	add		R16,R19					; a0 += 6n7
00036f 1caf                      	adc		R10,R15
000370 0e73                      	add		R7,R19					; a7 += 6n7
000371 0f32                      	add		R19,R18
000372 0f32                      	add		R19,R18
000373 0e63                      	add		R6,R19					; a6 += 8n7
                                 
                                 
                                 
000374 9f05                      	mul		R16,R21					; a1 += Cociente(a0/10)
000375 2d21                      	mov		R18,R1
000376 9ea5                      	mul		R10,R21
000377 0e02                      	add		R0,R18
000378 1c1f                      	adc		R1,R15
000379 9416                      	lsr		R1
00037a 9407                      	ror		R0
00037b 9416                      	lsr		R1
00037c 9407                      	ror		R0
00037d 9406                      	lsr		R0
00037e 0d10                      	add		R17,R0
00037f 1cb1                      	adc		R11,R1
000380 9e04                      	mul		R0,R20					; UNIDADES = Residuo (a0/10)
000381 1900                      	sub		R16,R0
000382 2b08                      	or		R16,R24
000383 8709                      	std		Y+9,R16
                                 
000384 9f15                      	mul		R17,R21					; a2 += Cociente(a1/10)
000385 2d21                      	mov		R18,R1
000386 9eb5                      	mul		R11,R21
000387 0e02                      	add		R0,R18
000388 1c1f                      	adc		R1,R15
000389 9416                      	lsr		R1
00038a 9407                      	ror		R0
00038b 9406                      	lsr		R0
00038c 9406                      	lsr		R0
00038d 0c20                      	add		R2,R0
00038e 1cc1                      	adc		R12,R1
00038f 9e04                      	mul		R0,R20					; DECENAS = Residuo (a1/10)
000390 1910                      	sub		R17,R0
000391 2b18                      	or		R17,R24
000392 8718                      	std		Y+8,R17
                                 
000393 9e25                      	mul		R2,R21					; a3 += Cociente(a2/10)
000394 2d21                      	mov		R18,R1
000395 9ec5                      	mul		R12,R21
000396 0e02                      	add		R0,R18
000397 1c1f                      	adc		R1,R15
000398 9416                      	lsr		R1
000399 9407                      	ror		R0
00039a 9406                      	lsr		R0
00039b 9406                      	lsr		R0
00039c 0c30                      	add		R3,R0
00039d 1cd1                      	adc		R13,R1
00039e 9e04                      	mul		R0,R20					; CENTENAS = Residuo (a2/10)
00039f 1820                      	sub		R2,R0
0003a0 2a28                      	or		R2,R24
0003a1 822f                      	std		Y+7,R2
                                 
0003a2 9e35                      	mul		R3,R21					; a4 += Cociente(a3/10)
0003a3 2d21                      	mov		R18,R1
0003a4 9ed5                      	mul		R13,R21
0003a5 0e02                      	add		R0,R18
0003a6 1c1f                      	adc		R1,R15
0003a7 9416                      	lsr		R1
0003a8 9407                      	ror		R0
0003a9 9406                      	lsr		R0
0003aa 9406                      	lsr		R0
0003ab 0c40                      	add		R4,R0
0003ac 1ce1                      	adc		R14,R1
0003ad 9e04                      	mul		R0,R20					; MILLARES = Residuo (a3/10)
0003ae 1830                      	sub		R3,R0
0003af 2a38                      	or		R3,R24
0003b0 823e                      	std		Y+6,R3
                                 
0003b1 9e45                      	mul		R4,R21					; a5 += Cociente(a4/10)
0003b2 2d21                      	mov		R18,R1
0003b3 9ee5                      	mul		R14,R21
0003b4 0e02                      	add		R0,R18
0003b5 1c1f                      	adc		R1,R15
0003b6 9416                      	lsr		R1
0003b7 9407                      	ror		R0
0003b8 9406                      	lsr		R0
0003b9 9406                      	lsr		R0
0003ba 0c50                      	add		R5,R0
0003bb 9e04                      	mul		R0,R20					; DECENAS de MILLAR = Residuo (a4/10)
0003bc 1840                      	sub		R4,R0
0003bd 2a48                      	or		R4,R24
0003be 824d                      	std		Y+5,R4
                                 
0003bf 9e55                      	mul		R5,R21					; a6 += Cociente(a5/10)
0003c0 9416                      	lsr		R1
0003c1 9416                      	lsr		R1
0003c2 9416                      	lsr		R1
0003c3 0c61                      	add		R6,R1
0003c4 9e14                      	mul		R1,R20					; CENTENAS de MILLAR = Residuo (a5/10)
0003c5 1850                      	sub		R5,R0
0003c6 2a58                      	or		R5,R24
0003c7 825c                      	std		Y+4,R5
                                 
0003c8 9e65                      	mul		R6,R21					; a7 += Cociente(a6/10)
0003c9 9416                      	lsr		R1
0003ca 9416                      	lsr		R1
0003cb 9416                      	lsr		R1
0003cc 0c71                      	add		R7,R1
0003cd 9e14                      	mul		R1,R20					; MILLONES = Residuo (a6/10)
0003ce 1860                      	sub		R6,R0
0003cf 2a68                      	or		R6,R24
0003d0 826b                      	std		Y+3,R6
                                 
0003d1 9e75                      	mul		R7,R21					; a8 += Cociente(a7/10)
0003d2 9416                      	lsr		R1
0003d3 9416                      	lsr		R1
0003d4 9416                      	lsr		R1
0003d5 0c81                      	add		R8,R1
0003d6 9e14                      	mul		R1,R20					; DECENAS de MILLON = Residuo (a7/10)
0003d7 1870                      	sub		R7,R0
0003d8 2a78                      	or		R7,R24
0003d9 827a                      	std		Y+2,R7
                                 
0003da 9e85                      	mul		R8,R21					; MILES de MILLON  = Cociente(a8/10)
0003db 9416                      	lsr		R1
0003dc 9416                      	lsr		R1
0003dd 9416                      	lsr		R1
0003de 2c91                      	mov		R9,R1
0003df 2a98                      	or		R9,R24
0003e0 8298                      	st		Y,R9
0003e1 9e14                      	mul		R1,R20					; CENTENAS de MILLON = Residuo (a8/10)
0003e2 1880                      	sub		R8,R0
0003e3 2a88                      	or		R8,R24
0003e4 8289                      	std		Y+1,R8
                                 
0003e5 9508                      	ret
                                 
                                 
                                 
                                 ; Copia la cadena 
                                 
                                 ;IZ apuntada por Z a X
                                 ;
                                 ; Entrada:   Z -> Cadena ASCIIZ en memoria Flash
                                 ;			 X -> Cadena ASCIIZ en SRAM
                                 cpyZaX:
0003e6 9105                      	lpm		R16,Z+
0003e7 930d                      	st		X+,R16
0003e8 3000                      	cpi		R16,0
0003e9 f7e1                      	brne	cpyZaX
0003ea 9508                      	ret
                                 
                                 
                                 
                                 ; Copia n caracteres de Z a X
                                 ;
                                 ; Entrada:   Z -> Cadena en memoria Flash
                                 ;			 X -> Cadena en SRAM
                                 ;			R16-> Cantidad de caracteres a copiar (1..255)
                                 cpynZaX:
0003eb 3000                      	cpi		R16,0
0003ec f021                      	breq	cpynZaX_Fin
                                 cpynZaX_Lazo:
0003ed 9115                      	lpm		R17,Z+
0003ee 931d                      	st		X+,R17
0003ef 950a                      	dec		R16
0003f0 f7e1                      	brne	cpynZaX_Lazo
                                 cpynZaX_Fin:
0003f1 9508                      	ret
                                 
                                 
                                 ; Copia n caracteres de Y a X
                                 ;
                                 ; Entrada:   Y -> Cadena en SRM
                                 ;			 X -> Cadena en SRAM
                                 ;			R16-> Cantidad de caracteres a copiar (1..255)
                                 cpynYaX:
0003f2 3000                      	cpi		R16,0
0003f3 f021                      	breq	cpynYaX_Fin
                                 cpynYaX_Lazo:
0003f4 9119                      	ld		R17,Y+
0003f5 931d                      	st		X+,R17
0003f6 950a                      	dec		R16
0003f7 f7e1                      	brne	cpynYaX_Lazo
                                 cpynYaX_Fin:
0003f8 9508                      	ret
                                 
                                 
                                 
                                 ; Devuelve la longitud de una cadena ASCIIZ en SRAM. Hasta 255 caracteres
                                 ;
                                 ; Entrada:   Z -> Cadena ASCIIZ en memoria SRAM
                                 ; Salida:	R16-> Longitud de cadena (0..255)
                                 strlen_Z:
0003f9 2700                      	clr		R16
                                 strlen_Z_Lazo:
0003fa 9121                      	ld		R18,Z+
0003fb 3020                      	cpi		R18,0
0003fc f021                      	breq	strlen_Z_Fin
0003fd 9503                      	inc		R16
0003fe 3000                      	cpi		R16,0
0003ff f7d1                      	brne	strlen_Z_Lazo
000400 ef0f                      	ldi		R16,255
                                 strlen_Z_Fin:
000401 9508                      	ret
                                 
                                 
                                 
                                 ; Devuelve la longitud de una cadena ASCIIZ en SRAM. Hasta R16 caracteres
                                 ;
                                 ; Entrada:   Z -> Cadena ASCIIZ en memoria SRAM
                                 ;			R16-> Longitud maxima permitida
                                 ; Salida:	R16-> Longitud de cadena
                                 strnlen:
000402 9503                      	inc		R16							; Un caracter mas para considerar el 0 final
000403 2f10                      	mov		R17,R16
000404 2700                      	clr		R16
                                 strnlen_Lazo:
000405 9121                      	ld		R18,Z+
000406 3020                      	cpi		R18,0
000407 f021                      	breq	strnlen_Fin
000408 9503                      	inc		R16
000409 951a                      	dec		R17
00040a f7d1                      	brne	strnlen_Lazo
00040b 950a                      	dec		R16
                                 strnlen_Fin:
00040c 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; Devuelve la longitud de una cadena ASCIIZ en flash. Hasta 255 caracteres
                                 ;
                                 ; Entrada:   Z -> Cadena ASCIIZ en memoria Flash
                                 ; Salida:	R16-> Longitud de cadena (0..255)
                                 strlen_Flash:
00040d 2700                      	clr		R16
                                 strlen_Flash_Lazo:
00040e 9125                      	lpm		R18,Z+
00040f 3020                      	cpi		R18,0
000410 f021                      	breq	strlen_Flash_Fin
000411 9503                      	inc		R16
000412 3000                      	cpi		R16,0
000413 f7d1                      	brne	strlen_Flash_Lazo
000414 ef0f                      	ldi		R16,255
                                 strlen_Flash_Fin:
000415 9508                      	ret
                                 
                                 
                                 
                                 ; Devuelve la longitud de una cadena ASCIIZ en flash hasta R16 caracteres
                                 ;
                                 ; Entrada:   Z -> Cadena ASCIIZ en memoria Flash
                                 ;			R16-> Longitud maxima permitida
                                 ; Salida:	R16-> Longitud de cadena
                                 strnlen_Flash:
000416 9503                      	inc		R16							; Un caracter mas para considerar el 0 final
000417 2f10                      	mov		R17,R16
000418 2700                      	clr		R16
                                 strnlen_Flash_Lazo:
000419 9125                      	lpm		R18,Z+
00041a 3020                      	cpi		R18,0
00041b f021                      	breq	strnlen_Flash_Fin
00041c 9503                      	inc		R16
00041d 951a                      	dec		R17
00041e f7d1                      	brne	strnlen_Flash_Lazo
00041f 950a                      	dec		R16
                                 strnlen_Flash_Fin:
000420 9508                      	ret
                                 
                                 
                                 ; Divide aproximadamente X/R16
                                 ;
                                 ; Entrada:	  X -> Dividendo
                                 ;			R16 -> Divisor (de 1 a 18)
                                 ; Salida:	  X -> Residuo
                                 Tabla_Div16_8_aprox:
000421 5580
000422 3340
000423 252b
000424 1c20
000425 171a
000426 1415
000427 1112
000428 0f10
000429 0d0e                      	.db	128,85,64,51,43,37,32,28,26,23,21,20,18,17,16,15,14,13
                                 ;Divisor  2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18
                                 Div16_8_aprox:
00042a 3002                      	cpi		R16,2							; Verifica rango de 2 a 18. Division entre 1 no hay que hacer nada
00042b f090                      	brlo	Div16_8_aprox_Fin
00042c 3103                      	cpi		R16,18+1
00042d f480                      	brsh	Div16_8_aprox_Fin
                                 
00042e 5002                      	subi	R16,2							; Apunta a tabla de factores
00042f e0f8                      	ldi		ZH,high(Tabla_Div16_8_aprox*2)
000430 e4e2                      	ldi		ZL,low(Tabla_Div16_8_aprox*2)
000431 0fe0                      	add		ZL,R16
000432 e000                      	ldi		R16,0
000433 1ff0                      	adc		ZH,R16
000434 9104                      	lpm		R16,Z
                                 
000435 9fa0                      	mul		XL,R16							; Multiplica por factor
000436 2de0                      	mov		ZL,R0
000437 2da1                      	mov		XL,R1
000438 9fb0                      	mul		XH,R16
000439 0da0                      	add		XL,R0
00043a e0b0                      	ldi		XH,0
00043b 1db1                      	adc		XH,R1
                                 
00043c fde7                      	sbrc	ZL,7							; Redondea
00043d 9611                      	adiw	XL,1
                                 Div16_8_aprox_Fin:
00043e 9508                      	ret
                                 
                                 
                                 ; Multiplica X (16 bits) por R16 (8 bits)
                                 ;
                                 ; Entrada:    X -> Numero de 16 bits
                                 ;			R16 -> Numero de 8 bits
                                 ; Salida:	  X -> Resultado
                                 ;			sec -> Overflow
                                 ;		    clc -> No Overflow
                                 ;			sez -> Resultado 0
                                 ;			clz -> Resultado no 0
                                 Mul16_8:
00043f 9fb0                      	mul		XH,R16
000440 2db0                      	mov		XH,R0
000441 2c21                      	mov		R2,R1
000442 9fa0                      	mul		XL,R16
000443 2da0                      	mov		XL,R0
000444 0db1                      	add		XH,R1
000445 1c22                      	adc		R2,R2
000446 f421                      	brne	Mul16_8_KO
000447 2e2a                      	mov		R2,XL
000448 2a2b                      	or		R2,XH
000449 9488                      	clc
00044a c001                      	rjmp	Mul16_8_Fin
                                 Mul16_8_KO:
00044b 9408                      	sec
                                 Mul16_8_Fin:
00044c 9508                      	ret
                                 
                                 
                                 
                                 ;*** Dividendo 	R3:R0 (H-L)
                                 ;*** Divisor	R7:R4 (H-L)
                                 ;*** = Cociente	R3:R0 (H-L)
                                 ;***   Residuo  R11:R8 (H-L)
                                 Divide32:
00044d 930f                      	push	R16
                                 
00044e 24bb                      	clr		R11		; Borra Residuo y Carry
00044f 24aa                      	clr		R10
000450 2499                      	clr		R9
000451 2488                      	clr		R8
000452 9488                      	clc
000453 e201                      	ldi		R16,33	; Carga Contador de Lazo con 33
                                 Divide32Lazo:
000454 1c00                      	rol		R0		; Desplaza izquierda dividendo hacia el carry
000455 1c11                      	rol		R1
000456 1c22                      	rol		R2
000457 1c33                      	rol		R3
000458 950a                      	dec		R16		; Decrementa contador de lazo
000459 f089                      	breq	Divide32Fin
00045a 1c88                      	rol		R8		; Desplaza izquierda carry(dividendo) hacia el residuo
00045b 1c99                      	rol		R9
00045c 1caa                      	rol		R10
00045d 1cbb                      	rol		R11
00045e 1884                      	sub		R8,R4	; Residuo= Residuo - Divisor
00045f 0895                      	sbc		R9,R5
000460 08a6                      	sbc		R10,R6
000461 08b7                      	sbc		R11,R7
000462 f430                      	brcc	Divide32Pos
000463 0c84                      	add		R8,R4	; Resultado negativo-> Suma residuo, Borra Carry, y Lazo
000464 1c95                      	adc		R9,R5
000465 1ca6                      	adc		R10,R6
000466 1cb7                      	adc		R11,R7
000467 9488                      	clc
000468 cfeb                      	rjmp	Divide32Lazo
                                 Divide32Pos:
000469 9408                      	sec				; Activa Carry y va al Lazo
00046a cfe9                      	rjmp	Divide32Lazo
                                 Divide32Fin:
                                 
00046b 910f                      	pop		R16
00046c 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;*
                                 ;* FUNCTION
                                 ;*	mac16x16_32
                                 ;* DECRIPTION
                                 ;*	Signed multiply accumulate of two 16bits numbers with
                                 ;*	a 32bits result.
                                 ;* USAGE
                                 ;*	r19:r18:r17:r16 += r23:r22 * r21:r20
                                 ;* STATISTICS
                                 ;*	Cycles :	23 + ret
                                 ;*	Words :		19 + ret
                                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                                 ;*
                                 ;******************************************************************************
                                 
                                 mac16x16_32:
00046d 2422                      	clr	r2
                                 
00046e 0275                      	muls	r23, r21		; (signed)ah * (signed)bh
00046f 0d20                      	add	r18, r0
000470 1d31                      	adc	r19, r1
                                 
000471 9f64                      	mul	r22, r20		; al * bl
000472 0d00                      	add	r16, r0
000473 1d11                      	adc	r17, r1
000474 1d22                      	adc	r18, r2
000475 1d32                      	adc	r19, r2
                                 
000476 0374                      	mulsu	r23, r20		; (signed)ah * bl
000477 0932                      	sbc	r19, r2
000478 0d10                      	add	r17, r0
000479 1d21                      	adc	r18, r1
00047a 1d32                      	adc	r19, r2
                                 
00047b 0356                      	mulsu	r21, r22		; (signed)bh * al
00047c 0932                      	sbc	r19, r2
00047d 0d10                      	add	r17, r0
00047e 1d21                      	adc	r18, r1
00047f 1d32                      	adc	r19, r2
                                 
000480 9508                      	ret
                                 
                                 mac16x16_32_method_B:			; uses two temporary registers
                                 					; (r4,r5), but reduces cycles/words
                                 					; by 1
000481 2422                      	clr	r2
                                 
000482 0275                      	muls	r23, r21		; (signed)ah * (signed)bh
000483 0120                      	movw	r5:r4,r1:r0
                                 
000484 9f64                      	mul	r22, r20		; al * bl
                                 
000485 0d00                      	add	r16, r0
000486 1d11                      	adc	r17, r1
000487 1d24                      	adc	r18, r4
000488 1d35                      	adc	r19, r5
                                 
000489 0374                      	mulsu	r23, r20		; (signed)ah * bl
00048a 0932                      	sbc	r19, r2
00048b 0d10                      	add	r17, r0
00048c 1d21                      	adc	r18, r1
00048d 1d32                      	adc	r19, r2
                                 
00048e 0356                      	mulsu	r21, r22		; (signed)bh * al
00048f 0932                      	sbc	r19, r2
000490 0d10                      	add	r17, r0
000491 1d21                      	adc	r18, r1
000492 1d32                      	adc	r19, r2
                                 
000493 9508                      	ret
                                 
                                 
                                 
                                 
                                 ;******************************************************************************
                                 ;*
                                 ;* FUNCTION
                                 ;*	muls16x16_32
                                 ;* DECRIPTION
                                 ;*	Signed multiply of two 16bits numbers with 32bits result.
                                 ;* USAGE
                                 ;*	r19:r18:r17:r16 = r23:r22 * r21:r20
                                 ;* STATISTICS
                                 ;*	Cycles :	19 + ret
                                 ;*	Words :		15 + ret
                                 ;*	Register usage: r0 to r2 and r16 to r23 (11 registers)
                                 ;* NOTE
                                 ;*	The routine is non-destructive to the operands.
                                 ;*
                                 ;******************************************************************************
                                 
                                 muls16x16_32:
000494 2422                      	clr	r2
000495 0275                      	muls	r23, r21		; (signed)ah * (signed)bh
000496 0190                      	movw	r19:r18, r1:r0
000497 9f64                      	mul	r22, r20		; al * bl
000498 0180                      	movw	r17:r16, r1:r0
000499 0374                      	mulsu	r23, r20		; (signed)ah * bl
00049a 0932                      	sbc	r19, r2
00049b 0d10                      	add	r17, r0
00049c 1d21                      	adc	r18, r1
00049d 1d32                      	adc	r19, r2
00049e 0356                      	mulsu	r21, r22		; (signed)bh * al
00049f 0932                      	sbc	r19, r2
0004a0 0d10                      	add	r17, r0
0004a1 1d21                      	adc	r18, r1
0004a2 1d32                      	adc	r19, r2
0004a3 9508                      	ret
                                 
                                 
                                 
                                 ; int16_16_to_float -> convert 16 bits signed integer + 16 bits fractional, to 32 bits float
                                 ; *****************
                                 ; input:	R19,R18			-> signed 16 bits integer HI-LO
                                 ;			R17,R16			-> 16 bits fractional HI-LO
                                 ; output:	R19,R18,R17,R16 -> 32 bits float Hi-LO
                                 int16_16_to_float:
0004a4 e846                      	ldi		R20,134					; exponent
0004a5 e850                      	ldi		R21,0x80				; sign
0004a6 2353                      	and		R21,R19
0004a7 f039                      	breq	int16_16_to_float_pos
0004a8 9530                      	com		R19						; neg int 32
0004a9 9520                      	com		R18
0004aa 9510                      	com		R17
0004ab 9501                      	neg		R16
0004ac 4f1f                      	sbci	R17,255
0004ad 4f2f                      	sbci	R18,255
0004ae 4f3f                      	sbci	R19,255
                                 int16_16_to_float_pos:
                                 
0004af 3030                      	cpi		R19,0
0004b0 f029                      	breq	int16_16_to_float_zero_1
0004b1 2f01                      	mov		R16,R17
0004b2 2f12                      	mov		R17,R18
0004b3 2f23                      	mov		R18,R19
0004b4 5f48                      	subi	R20,-8
0004b5 c00f                      	rjmp	int16_16_to_float_left
                                 int16_16_to_float_zero_1:
                                 
0004b6 3020                      	cpi		R18,0
0004b7 f469                      	brne	int16_16_to_float_left
                                 
0004b8 3010                      	cpi		R17,0
0004b9 f029                      	breq	int16_16_to_float_zero_2
0004ba 2f21                      	mov		R18,R17
0004bb 2f10                      	mov		R17,R16
0004bc 2700                      	clr		R16
0004bd 5048                      	subi	R20,8
0004be c006                      	rjmp	int16_16_to_float_left
                                 
                                 int16_16_to_float_zero_2:
0004bf 3000                      	cpi		R16,0
0004c0 f081                      	breq	int16_16_to_float_ret
0004c1 2f20                      	mov		R18,R16
0004c2 2711                      	clr		R17
0004c3 2700                      	clr		R16
0004c4 5140                      	subi	R20,16
                                 
                                 int16_16_to_float_left:
0004c5 fd27                      	sbrc	R18,7
0004c6 c005                      	rjmp	int16_16_to_float_exp
0004c7 0f00                      	lsl		R16
0004c8 1f11                      	rol		R17
0004c9 1f22                      	rol		R18
0004ca 954a                      	dec		R20
0004cb cff9                      	rjmp	int16_16_to_float_left
                                 int16_16_to_float_exp:
                                 
0004cc 0f22                      	lsl		R18
0004cd 2f34                      	mov		R19,R20
0004ce 0f55                      	lsl		R21
0004cf 9537                      	ror		R19
0004d0 9527                      	ror		R18
                                 
                                 int16_16_to_float_ret:
0004d1 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; X int16, Y frac16
                                 linearize_neg:
0004d2 ffb7                      	sbrs	XH,7
0004d3 c00f                      	rjmp	linearize_neg_ret
0004d4 95b0                      	com		XH						; neg int 32
0004d5 95a0                      	com		XL
0004d6 95d0                      	com		YH
0004d7 95c1                      	neg		YL
0004d8 4fdf                      	sbci	YH,255
0004d9 4faf                      	sbci	XL,255
0004da 4fbf                      	sbci	XH,255
                                 
0004db d008                      	rcall	linearize_pos
0004dc 95b0                      	com		XH						; neg int 32
0004dd 95a0                      	com		XL
0004de 95d0                      	com		YH
0004df 95c1                      	neg		YL
0004e0 4fdf                      	sbci	YH,255
0004e1 4faf                      	sbci	XL,255
0004e2 4fbf                      	sbci	XH,255
                                 linearize_neg_ret:
0004e3 9508                      	ret
                                 
                                 
                                 
                                 ; input:	flow	= (X int16, Y frac16)		, only positive value
                                 ;			Z		= pointer to line data: range(1.1),gain(1.2),offset(1.2)   x5
                                 ; output:   
                                 linearize_pos:
0004e4 fdb7                      	sbrc	XH,7
0004e5 c019                      	rjmp	linearize_pos_ret
0004e6 30b0                      	cpi		XH,0								; must be 0. No more than 255 l/m
0004e7 f499                      	brne	linearize_pos_top
                                 
0004e8 e025                      	ldi		R18,5
                                 linearize_pos_loop:
0004e9 9101                      	ld		R16,Z+								; range Lo-Hi
0004ea 9111                      	ld		R17,Z+
0004eb 3f1f                      	cpi		R17,$ff
0004ec f071                      	breq	linearize_pos_top
0004ed 17d0                      	cp		YH,R16
0004ee 07a1                      	cpc		XL,R17
0004ef f440                      	brsh	linearize_pos_next
0004f0 9121                      	ld		R18,Z+								; gain Lo-Hi
0004f1 9111                      	ld		R17,Z+
0004f2 9101                      	ld		R16,Z+
0004f3 9151                      	ld		R21,Z+								; offset
0004f4 9141                      	ld		R20,Z+
0004f5 9131                      	ld		R19,Z+
0004f6 d009                      	rcall	linearize_gain_offset
0004f7 c007                      	rjmp	linearize_pos_ret
                                 linearize_pos_next:
0004f8 9636                      	adiw	ZL,6								; next range
0004f9 952a                      	dec		R18
0004fa f771                      	brne	linearize_pos_loop
                                 
                                 linearize_pos_top:								; top value
0004fb e0b0                      	ldi		XH,0
0004fc efaf                      	ldi		XL,0xff
0004fd efdf                      	ldi		YH,0xff
0004fe efcf                      	ldi		YL,0xff
                                 
                                 linearize_pos_ret:
0004ff 9508                      	ret
                                 
                                 
                                 
                                 
                                 linearize_gain_offset:
000500 2444                      	clr		R4
000501 9f0a                      	mul		R16,XL
000502 2cd1                      	mov		R13,R1
000503 2cc0                      	mov		R12,R0
000504 9f0c                      	mul		R16,YL
000505 2cb1                      	mov		R11,R1
000506 2ca0                      	mov		R10,R0
000507 9f2d                      	mul		R18,YH
000508 2c21                      	mov		R2,R1
000509 9f0d                      	mul		R16,YH
00050a 2c31                      	mov		R3,R1
00050b 2c20                      	mov		R2,R0
00050c 9f1c                      	mul		R17,YL
00050d 0ca1                      	add		R10,R1
00050e 1cb2                      	adc		R11,R2
00050f 1cc3                      	adc		R12,R3
000510 1cd4                      	adc		R13,R4
000511 9f1a                      	mul		R17,XL
000512 2c31                      	mov		R3,R1
000513 2c20                      	mov		R2,R0
000514 9f2d                      	mul		R18,YH
000515 0ca1                      	add		R10,R1
000516 1cb2                      	adc		R11,R2
000517 1cc3                      	adc		R12,R3
000518 1cd4                      	adc		R13,R4
000519 9f2a                      	mul		R18,XL
00051a 0ca0                      	add		R10,R0
00051b 1cb1                      	adc		R11,R1
00051c 1cc4                      	adc		R12,R4
00051d 1cd4                      	adc		R13,R4
00051e 9f1d                      	mul		R17,YH
00051f 0ca0                      	add		R10,R0
000520 1cb1                      	adc		R11,R1
000521 1cc4                      	adc		R12,R4
000522 1cd4                      	adc		R13,R4
                                 	
000523 e000                      	ldi		R16,0
000524 fd37                      	sbrc	R19,7
000525 ef0f                      	ldi		R16,$ff
                                 
000526 0ea5                      	add		R10,R21
000527 1eb4                      	adc		R11,R20
000528 1ec3                      	adc		R12,R19
000529 1ed0                      	adc		R13,R16
                                 
00052a fed7                      	sbrs	R13,7
00052b c005                      	rjmp	linearize_gain_offset_pos
                                 linearize_gain_offset_zero:
00052c 27bb                      	clr		XH
00052d 27aa                      	clr		XL
00052e 27dd                      	clr		YH
00052f 27cc                      	clr		YL
000530 c004                      	rjmp	linearize_gain_offset_ret
                                 linearize_gain_offset_pos:
000531 2dbd                      	mov		XH,R13
000532 2dac                      	mov		XL,R12
000533 2ddb                      	mov		YH,R11
000534 2dca                      	mov		YL,R10
                                 linearize_gain_offset_ret:
000535 9508                      	ret
                                 .include "stepper.asm"
                                 
                                  * stepper.asm
                                  *
                                  *  Created: 09/05/2020 05:25:35 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .equ	stepper_pos_max				= 2800;2800 ;2650 ;2750 ;2768
                                 .equ	stepper_zero_offset			= -300 ;-10
                                 .equ	stepper_acceleration_max	= 8		; [1,63]
                                 .equ	stepper_sw_open_pin			= 1			; PORTE1
                                 .equ	stepper_sw_close_pin		= 2			; PORTE2
                                 
                                 
                                 .dseg
002c9a                           stepper_speed_sp:			.byte 2					; LO-HI
002c9c                           stepper_speed_cur:			.byte 2					; LO-HI
002c9e                           stepper_pos_cur:			.byte 2					; LO-HI
002ca0                           stepper_alarm:				.byte 1					; bit0=alarm enable, bit1=alarm detected
002ca1                           stepper_pressure_alarm:		.byte 1
002ca2                           stepper_flow_alarm:			.byte 1
002ca3                           stepper_pos_alarm:			.byte 1
002ca4                           stepper_sensors_alarm:		.byte 1
002ca5                           stepper_disconnect_alarm:	.byte 1
002ca6                           stepper_obstruction_alarm:	.byte 1
002ca7                           stepper_resistance_alarm:	.byte 1
                                 
                                 
                                 .cseg
                                 .macro stepper_read_pos
                                 	cli
                                 	lds		XL,stepper_pos_cur
                                 	lds		XH,stepper_pos_cur+1
                                 	sei
                                 .endm
                                 
                                 .macro stepper_write_pos
                                 	cli
                                 	sts		stepper_pos_cur,XL
                                 	sts		stepper_pos_cur+1,XH
                                 	sei
                                 .endm
                                 
                                 .cseg
                                 stepper_init:
000536 e007                       	ldi		R16,0x07												; pulse,dir,enable config
000537 9300 0426                 	sts		PORTB_OUTCLR,R16
000539 9300 0421                 	sts		PORTB_DIRSET,R16
00053b e000                      	ldi		R16,0x00
00053c 9300 0430                 	sts		PORTB_PIN0CTRL,R16
00053e 9300 0431                 	sts		PORTB_PIN1CTRL,R16
000540 9300 0432                 	sts		PORTB_PIN2CTRL,R16
000542 e001                      	ldi		R16,PORTMUX_TCA0_PORTB_gc
000543 9300 05e4                 	sts		PORTMUX_TCAROUTEA,R16
                                 
000545 e000                      	ldi		R16,0x00
000546 9300 0a00                 	sts		TCA0_SINGLE_CTRLA,R16									; stop TCA0
000548 9300 0a03                 	sts		TCA0_SINGLE_CTRLD,R16									; no split
                                 
00054a e101                      	ldi		R16,TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_FRQ_gc		; frequency on cmp0 (PB0)
00054b 9300 0a01                 	sts		TCA0_SINGLE_CTRLB,R16
00054d e001                      	ldi		R16,TCA_SINGLE_OVF_bm
00054e 9300 0a0b                 	sts		TCA0_SINGLE_INTFLAGS,R16								; tca_ovf interrupt flag clear
000550 9300 0a0a                 	sts		TCA0_SINGLE_INTCTRL,R16									; tca_ovf interrupt enable
                                 
000552 d150                      	rcall	stepper_alarm_disable									; clear alarm flag
                                 
000553 e0a0                      	ldi		XL,0
000554 e0b0                      	ldi		XH,0
000555 93a0 2c9a                 	sts		stepper_speed_sp,XL										; speed to 0
000557 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
000559 d15b                      	rcall	stepper_write_speed
                                 
00055a e007                      	ldi		R16,TCA_SINGLE_CLKSEL_DIV8_gc | TCA_SINGLE_ENABLE_bm	; start frequency
00055b 9300 0a00                 	sts		TCA0_SINGLE_CTRLA,R16
00055d 9508                      	ret
                                 
                                 
                                 ; *** isr_TCA_ovf -> stepper interrup service rutine
                                 ; - move stepper according to stepper_speed_sp and stepper_speed_cur
                                 ; - if pressure > PRESSURE_MAX stops
                                 ; - if flow > FLOW_MAX stops
                                 ; - if stepper_pos_cur out of range stops
                                 
                                 isr_TCA_ovf:
00055e 930f                      	push	R16
00055f b70f                      	in		R16,CPU_SREG
000560 930f                      	push	R16
                                 
000561 e001                      	ldi		R16,TCA_SINGLE_OVF_bm				; tca_ovf interrupt flag clear
000562 9300 0a0b                 	sts		TCA0_SINGLE_INTFLAGS,R16
                                 
000564 9100 0428                 	lds		R16,PORTB_IN						; pulse (PB0) low?
000566 fd00                      	sbrc	R16,0
000567 c07b                      	rjmp	isr_TCA_ovf_high_ret
                                 	
000568 931f                      	push	R17
000569 93af                      	push	XL
00056a 93bf                      	push	XH
00056b 93ef                      	push	ZL
00056c 93ff                      	push	ZH
                                 
                                 ; *** update stepper position
00056d 91a0 2c9e                 	lds		XL,stepper_pos_cur					; current position (signed)
00056f 91b0 2c9f                 	lds		XH,stepper_pos_cur+1
000571 9100 0a01                 	lds		R16,TCA0_SINGLE_CTRLB
000573 ff04                      	sbrs	R16,TCA_SINGLE_CMP0EN_bp			; frequency on cmp0 (PB0)
000574 c00a                      	rjmp	isr_TCA_ovf_no_count
000575 9100 0428                 	lds		R16,PORTB_IN
000577 ff01                      	sbrs	R16,1								; stepper dir pin
000578 9711                      	sbiw	XL,1
000579 fd01                      	sbrc	R16,1
00057a 9611                      	adiw	XL,1
00057b 93a0 2c9e                 	sts		stepper_pos_cur,XL
00057d 93b0 2c9f                 	sts		stepper_pos_cur+1,XH
                                 isr_TCA_ovf_no_count:
                                 
                                 
                                 ; *** verifies previous alarm
00057f 9100 2ca0                 	lds		R16,stepper_alarm
000581 fd01                      	sbrc	R16,1
000582 c042                      	rjmp	isr_TCA_ovf_stop
000583 3000                      	cpi		R16,0
000584 f179                      	breq	isr_TCA_ovf_noalarm
                                 
                                 ; *** verifies maximum pressure
000585 9100 2cb6                 	lds		R16,sensors_pressure_value+3
000587 fd07                      	sbrc	R16,7
000588 c00c                      	rjmp	isr_TCA_ovf_pressure_nomax
000589 3000                      	cpi		R16,0
00058a f431                      	brne	isr_TCA_ovf_presssure_alarm
00058b 9100 2cb5                 	lds		R16,sensors_pressure_value+2
00058d 9110 148c                 	lds		R17,EEPROM_START+ee_pressure_max
00058f 1701                      	cp		R16,R17
000590 f020                      	brlo	isr_TCA_ovf_pressure_nomax
                                 isr_TCA_ovf_presssure_alarm:
000591 e001                      	ldi		R16,1
000592 9300 2ca1                 	sts		stepper_pressure_alarm,R16
000594 c02d                      	rjmp	isr_TCA_ovf_alarm
                                 isr_TCA_ovf_pressure_nomax:
                                 
                                 ; verifies maximum flow
000595 9100 2cda                 	lds		R16,sensors_flow_value+3
000597 fd07                      	sbrc	R16,7
000598 c00c                      	rjmp	isr_TCA_ovf_flow_nomax
000599 3000                      	cpi		R16,0
00059a f431                      	brne	isr_TCA_ovf_flow_alarm
00059b 9100 2cd9                 	lds		R16,sensors_flow_value+2
00059d 9110 148d                 	lds		R17,EEPROM_START+ee_flow_max
00059f 1701                      	cp		R16,R17
0005a0 f020                      	brlo	isr_TCA_ovf_flow_nomax
                                 isr_TCA_ovf_flow_alarm:
0005a1 e001                      	ldi		R16,1
0005a2 9300 2ca2                 	sts		stepper_flow_alarm,R16
0005a4 c01d                      	rjmp	isr_TCA_ovf_alarm
                                 isr_TCA_ovf_flow_nomax:
                                 
                                 ; verifies maximum future position 
0005a5 91e0 2c9a                 	lds		ZL,stepper_speed_sp					; direcction of setpoint speed
0005a7 91f0 2c9b                 	lds		ZH,stepper_speed_sp+1
0005a9 fdf7                      	sbrc	ZH,7
0005aa c015                      	rjmp	isr_TCA_ovf_negative_speed
0005ab 30ba                      	cpi		XH,high(stepper_pos_max)		; greater or equal to top position?
0005ac f0dc                      	brlt	isr_TCA_ovf_update_speed
0005ad f411                      	brne	isr_TCA_ovf_pos_alarm
0005ae 3fa0                      	cpi		XL,low(stepper_pos_max)
0005af f0c0                      	brlo	isr_TCA_ovf_update_speed
                                 
                                 isr_TCA_ovf_pos_alarm:
0005b0 e001                      	ldi		R16,1
0005b1 9300 2ca3                 	sts		stepper_pos_alarm,R16
0005b3 c00e                      	rjmp	isr_TCA_ovf_alarm
                                 
                                 isr_TCA_ovf_noalarm:
0005b4 91e0 2c9a                 	lds		ZL,stepper_speed_sp					; direcction of setpoint speed
0005b6 91f0 2c9b                 	lds		ZH,stepper_speed_sp+1
0005b8 fdf7                      	sbrc	ZH,7
0005b9 c006                      	rjmp	isr_TCA_ovf_negative_speed
                                 
0005ba 30ba                      	cpi		XH,high(stepper_pos_max)			; greater or equal to top position?
0005bb f064                      	brlt	isr_TCA_ovf_update_speed
0005bc f441                      	brne	isr_TCA_ovf_stop
0005bd 3fa0                      	cpi		XL,low(stepper_pos_max)
0005be f048                      	brlo	isr_TCA_ovf_update_speed
0005bf c005                      	rjmp	isr_TCA_ovf_stop
                                 
                                 	
                                 isr_TCA_ovf_negative_speed:
0005c0 ffb7                      	sbrs	XH,7								; less to bottom position (=0)?
0005c1 c006                      	rjmp	isr_TCA_ovf_update_speed
                                 
                                 ;*** out of limits -> set point to stop
                                 isr_TCA_ovf_alarm:
0005c2 e003                      	ldi		R16,3
0005c3 9300 2ca0                 	sts		stepper_alarm,R16
                                 isr_TCA_ovf_stop:
0005c5 e0b0                      	ldi		XH,0								; out of range -> stop
0005c6 e0a0                      	ldi		XL,0
0005c7 c015                      	rjmp	isr_TCA_ovf_update_set
                                 
                                 ;*** update movement
                                 isr_TCA_ovf_update_speed:
0005c8 91a0 2c9c                 	lds		XL,stepper_speed_cur				; speed change?
0005ca 91b0 2c9d                 	lds		XH,stepper_speed_cur+1
0005cc 17ea                      	cp		ZL,XL
0005cd 07fb                      	cpc		ZH,XH
0005ce f079                      	breq	isr_TCA_ovf_stop_ret
0005cf f03c                      	brlt	isr_TCA_ovf_update_speed_dec
                                 
0005d0 9618                      	adiw	XL,stepper_acceleration_max			; increment
0005d1 17ea                      	cp		ZL,XL
0005d2 07fb                      	cpc		ZH,XH
0005d3 f44c                      	brge	isr_TCA_ovf_update_set
0005d4 2fae                      	mov		XL,ZL
0005d5 2fbf                      	mov		XH,ZH
0005d6 c006                      	rjmp	isr_TCA_ovf_update_set
                                 
                                 isr_TCA_ovf_update_speed_dec:
0005d7 9718                      	sbiw	XL,stepper_acceleration_max			; decrement
0005d8 17ea                      	cp		ZL,XL
0005d9 07fb                      	cpc		ZH,XH
0005da f014                      	brlt	isr_TCA_ovf_update_set
0005db 2fae                      	mov		XL,ZL
0005dc 2fbf                      	mov		XH,ZH
                                 
                                 isr_TCA_ovf_update_set:
0005dd d0d7                      	rcall	stepper_write_speed					; speed update
                                 
                                 isr_TCA_ovf_stop_ret:
0005de 91ff                      	pop		ZH
0005df 91ef                      	pop		ZL
0005e0 91bf                      	pop		XH
0005e1 91af                      	pop		XL
0005e2 911f                      	pop		R17
                                 isr_TCA_ovf_high_ret:
0005e3 910f                      	pop		R16
0005e4 bf0f                      	out		CPU_SREG,R16
0005e5 910f                      	pop		R16
0005e6 9518                      	reti
                                 
                                 
                                 
                                 
                                 stepper_home:
0005e7 df4e                      	rcall	stepper_init
                                 
0005e8 e1b0                      	ldi		XH,high(int(stepper_pos_max*1.5))
0005e9 e6a8                      	ldi		XL,low(int(stepper_pos_max*1.5))
0005ea 94f8
0005eb 93a0 2c9e
0005ed 93b0 2c9f
0005ef 9478                      	stepper_write_pos
                                 
0005f0 efa6                      	ldi		XL,low(-10)						; detect bottom limit switch
0005f1 efbf                      	ldi		XH,high(-10)
0005f2 93a0 2c9a                 	sts		stepper_speed_sp,XL
0005f4 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
                                 stepper_home_loop:
                                 ;	task_change
                                 
0005f6 d02b                      	rcall	screen_chk_tx_data_PFV
                                 
0005f7 9100 0488                 	lds		R16,PORTE_IN
0005f9 ff01                      	sbrs	R16,stepper_sw_open_pin			; normal sbrs
0005fa c00a                      	rjmp	stepper_home_stop
0005fb ff02                      	sbrs	R16,stepper_sw_close_pin
0005fc d016                      	rcall	stepper_home_change_dir
0005fd 94f8
0005fe 91a0 2c9e
000600 91b0 2c9f
000602 9478                      	stepper_read_pos
000603 2bab                      	or		XL,XH
000604 f789                      	brne	stepper_home_loop
                                 stepper_home_stop:
000605 d07f                      	rcall	stepper_stop
                                 
000606 d020                      	rcall	stepper_release
000607 9508                      	ret
                                 
                                 
                                 
                                 
000608 e0ca                      	ldi		YL,low(10)
000609 e0d0                      	ldi		YH,high(10)
00060a e0ba                      	ldi		XH,high(stepper_pos_max)
00060b efa0                      	ldi		XL,low(stepper_pos_max)
00060c d03c                      	rcall	stepper_close
                                 
00060d efc6                      	ldi		YL,low(-10)
00060e efdf                      	ldi		YH,high(-10)
00060f 27aa                      	clr		XL
000610 27bb                      	clr		XH
000611 d055                      	rcall	stepper_open
                                 
000612 9508                      	ret
                                 
                                 
                                 
                                 
                                 stepper_home_change_dir:
000613 eebf                      	ldi		XH,high(int(-stepper_pos_max*1.5))
000614 e9a8                      	ldi		XL,low(int(-stepper_pos_max*1.5))
000615 94f8
000616 93a0 2c9e
000618 93b0 2c9f
00061a 9478                      	stepper_write_pos
                                 
00061b e0aa                      	ldi		XL,low(10)
00061c e0b0                      	ldi		XH,high(10)
00061d 93a0 2c9a                 	sts		stepper_speed_sp,XL
00061f 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
                                 
000621 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 screen_chk_tx_data_PFV:
000622 940e 1026                 	call	pid_check_sampling_time			; pid sampling time
000624 f409                      	brne	screen_chk_tx_data_PFV_no_data
000625 d6e1                      	rcall	screen_tx_data_PFV				; transmit data
                                 screen_chk_tx_data_PFV_no_data:
000626 9508                      	ret
                                 
                                 
                                 
                                 stepper_release:
000627 27aa                      	clr		XL
000628 27bb                      	clr		XH
000629 94f8
00062a 93a0 2c9e
00062c 93b0 2c9f
00062e 9478                      	stepper_write_pos
00062f e0aa                      	ldi		XL,low(10)							; release bottom limit switch
000630 e0b0                      	ldi		XH,high(10)
000631 93a0 2c9a                 	sts		stepper_speed_sp,XL
000633 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
                                 stepper_home_release:
                                 ;	task_change
                                 
000635 dfec                      	rcall	screen_chk_tx_data_PFV
                                 
000636 9100 0488                 	lds		R16,PORTE_IN
000638 ff01                      	sbrs	R16,stepper_sw_open_pin				; normal sbrs
000639 cffb                      	rjmp	stepper_home_release
00063a d04a                      	rcall	stepper_stop
                                 
00063b efbe                      	ldi		XH,high(stepper_zero_offset)
00063c eda4                      	ldi		XL,low(stepper_zero_offset)
00063d 94f8
00063e 93a0 2c9e
000640 93b0 2c9f
000642 9478                      	stepper_write_pos
000643 e0ca                      	ldi		YL,low(10)
000644 e0d0                      	ldi		YH,high(10)
000645 27aa                      	clr		XL
000646 27bb                      	clr		XH
000647 d001                      	rcall	stepper_close
000648 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 .dseg
002ca8                           stepper_close_pos:	.byte 2
                                 .cseg
                                 stepper_close:
000649 93c0 2c9a                 	sts		stepper_speed_sp,YL
00064b 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
00064d 93a0 2ca8                 	sts		stepper_close_pos,XL
00064f 93b0 2ca9                 	sts		stepper_close_pos+1,XH
                                 stepper_close_loop:
                                 ;	task_change
                                 ;	rcall	screen_check_data_tx
000651 dfd0                      	rcall	screen_chk_tx_data_PFV
                                 
000652 9100 0488                 	lds		R16,PORTE_IN
000654 fd01                      	sbrc	R16,stepper_sw_open_pin				; normal sbrc
000655 c002                      	rjmp	stepper_close_no_limit
000656 efbe                      	ldi		XH,high(stepper_zero_offset)
000657 eda4                      	ldi		XL,low(stepper_zero_offset)
                                 ;	stepper_write_pos
                                 stepper_close_no_limit:
000658 94f8
000659 91a0 2c9e
00065b 91b0 2c9f
00065d 9478                      	stepper_read_pos
00065e 91c0 2ca8                 	lds		YL,stepper_close_pos
000660 91d0 2ca9                 	lds		YH,stepper_close_pos+1
000662 17ac                      	cp		XL,YL
000663 07bd                      	cpc		XH,YH
000664 f364                      	brlt	stepper_close_loop
000665 d01f                      	rcall	stepper_stop
000666 9508                      	ret
                                 
                                 
                                 .dseg
002caa                           stepper_open_pos:	.byte 2
                                 .cseg
                                 stepper_open:
000667 93c0 2c9a                 	sts		stepper_speed_sp,YL
000669 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
00066b 93a0 2caa                 	sts		stepper_open_pos,XL
00066d 93b0 2cab                 	sts		stepper_open_pos+1,XH
                                 stepper_open_loop:
                                 ;	task_change
                                 ;	rcall	screen_check_data_tx
00066f dfb2                      	rcall	screen_chk_tx_data_PFV
                                 
000670 9100 0488                 	lds		R16,PORTE_IN
000672 fd01                      	sbrc	R16,stepper_sw_open_pin				; normal sbrc
000673 c002                      	rjmp	stepper_open_limit
000674 efbe                      	ldi		XH,high(stepper_zero_offset)
000675 eda4                      	ldi		XL,low(stepper_zero_offset)
                                 ;	stepper_write_pos
                                 stepper_open_limit:
                                 
000676 94f8
000677 91a0 2c9e
000679 91b0 2c9f
00067b 9478                      	stepper_read_pos
00067c 91c0 2caa                 	lds		YL,stepper_open_pos
00067e 91d0 2cab                 	lds		YH,stepper_open_pos+1
000680 17ca                      	cp		YL,XL
000681 07db                      	cpc		YH,XH
000682 f364                      	brlt	stepper_open_loop
000683 d001                      	rcall	stepper_stop
000684 9508                      	ret
                                 
                                 
                                 stepper_stop:
000685 e000                      	ldi		R16,0
000686 9300 2c9a                 	sts		stepper_speed_sp,R16
000688 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 stepper_stop_loop:
                                 ;	task_change
                                 ;	rcall	screen_check_data_tx
00068a df97                      	rcall	screen_chk_tx_data_PFV
                                 
00068b 91a0 2c9c                 	lds		XL,stepper_speed_cur
00068d 91b0 2c9d                 	lds		XH,stepper_speed_cur+1
00068f 2bab                      	or		XL,XH
000690 f7c9                      	brne	stepper_stop_loop
000691 9508                      	ret
                                 
                                 
                                 
                                 
                                 stepper_alarm_enable:
000692 e000                      	ldi		R16,0
000693 9300 2ca1                 	sts		stepper_pressure_alarm,R16
000695 9300 2ca2                 	sts		stepper_flow_alarm,R16
000697 9300 2ca3                 	sts		stepper_pos_alarm,R16
000699 9300 2ca4                 	sts		stepper_sensors_alarm,R16
00069b 9300 2ca5                 	sts		stepper_disconnect_alarm,R16
00069d 9300 2ca6                 	sts		stepper_obstruction_alarm,R16
00069f e001                      	ldi		R16,1
0006a0 9300 2ca0                 	sts		stepper_alarm,R16
0006a2 9508                      	ret
                                 
                                 
                                 stepper_alarm_disable:
0006a3 e000                      	ldi		R16,0
0006a4 9300 2ca0                 	sts		stepper_alarm,R16
0006a6 9300 2ca1                 	sts		stepper_pressure_alarm,R16
0006a8 9300 2ca2                 	sts		stepper_flow_alarm,R16
0006aa 9300 2ca3                 	sts		stepper_pos_alarm,R16
0006ac 9300 2ca4                 	sts		stepper_sensors_alarm,R16
0006ae 9300 2ca5                 	sts		stepper_disconnect_alarm,R16
0006b0 9300 2ca6                 	sts		stepper_obstruction_alarm,R16
0006b2 9300 2ca7                 	sts		stepper_resistance_alarm,R16
0006b4 9508                      	ret
                                 
                                 
                                 ; X = speed
                                 stepper_write_speed:
0006b5 93a0 2c9c                 	sts		stepper_speed_cur,XL				; speed update
0006b7 93b0 2c9d                 	sts		stepper_speed_cur+1,XH
0006b9 30a0                      	cpi		XL,0
0006ba f461                      	brne	stepper_write_speed_no_stop
0006bb 30b0                      	cpi		XH,0
0006bc f451                      	brne	stepper_write_speed_no_stop
0006bd e2bd                      	ldi		XH,high(fosc/8/200)					; 0.5ms start up
0006be e0a0                      	ldi		XL,low(fosc/8/200)					; 0.5ms start up
0006bf 93a0 0a28                 	sts		TCA0_SINGLE_CMP0,XL
0006c1 93b0 0a29                 	sts		TCA0_SINGLE_CMP0+1,XH
0006c3 e001                      	ldi		R16,TCA_SINGLE_WGMODE_FRQ_gc		; no cmp0 (PB0).
0006c4 9300 0a01                 	sts		TCA0_SINGLE_CTRLB,R16
0006c6 c01b                      	rjmp	stepper_write_speed_ret
                                 stepper_write_speed_no_stop:
                                 
0006c7 ffb7                      	sbrs	XH,7								; set dir
0006c8 c007                      	rjmp	stepper_write_speed_pos
0006c9 e002                      	ldi		R16,0x02							; set dir expiration
0006ca 9300 0426                 	sts		PORTB_OUTCLR,R16
0006cc 95b0                      	com		XH									; neg int16
0006cd 95a1                      	neg		XL
0006ce 4fbf                      	sbci	XH,255 
0006cf c003                      	rjmp	stepper_write_speed_set
                                 stepper_write_speed_pos:
0006d0 e002                      	ldi		R16,0x02								; set dir inspiration
0006d1 9300 0425                 	sts		PORTB_OUTSET,R16
                                 
                                 stepper_write_speed_set:
0006d3 e0fd                      	ldi		ZH,high(stepper_table_speed2time*2)
0006d4 ece6                      	ldi		ZL,low(stepper_table_speed2time*2)
0006d5 0faa                      	lsl		XL
0006d6 1fbb                      	rol		XH
0006d7 0fea                      	add		ZL,XL
0006d8 1ffb                      	adc		ZH,XH
0006d9 91a5                      	lpm		XL,Z+
0006da 91b5                      	lpm		XH,Z+
0006db 93a0 0a28                 	sts		TCA0_SINGLE_CMP0,XL
0006dd 93b0 0a29                 	sts		TCA0_SINGLE_CMP0+1,XH
0006df e101                      	ldi		R16,TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_WGMODE_FRQ_gc		; frequency on cmp0 (PB0)
0006e0 9300 0a01                 	sts		TCA0_SINGLE_CTRLB,R16
                                 stepper_write_speed_ret:
0006e2 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 stepper_table_speed2time:
                                 //.dw  65535  ,50000 ,25000 ,16667 ,12500 ,10000 ,8333  ,7143  ,6250  ,5556  ,5000  ,4545  ,4167  ,3846  ,3571  ,3333
0006e3 ffff
0006e4 c350
0006e5 61a8
0006e6 411b
0006e7 30d4
0006e8 2710
0006e9 208d
0006ea 1be7
0006eb 186a
0006ec 15b4
0006ed 1388
0006ee 11c1
0006ef 1047
0006f0 0f06
0006f1 0df3
0006f2 0d05                      .dw  65535  ,50000 ,25000 ,16667 ,12500 ,10000 ,8333  ,7143  ,6250  ,5556  ,5000  ,4545  ,4167  ,3846  ,3571  ,3333
0006f3 0c35
0006f4 0b7d
0006f5 0ada
0006f6 0a48
0006f7 09c4
0006f8 094d
0006f9 08e1
0006fa 087e
0006fb 0823
0006fc 07d0
0006fd 0783
0006fe 073c
0006ff 06fa
000700 06bc
000701 0683
000702 064d                      .dw  3125  ,2941  ,2778  ,2632  ,2500  ,2381  ,2273  ,2174  ,2083  ,2000  ,1923  ,1852  ,1786  ,1724  ,1667  ,1613
000703 061b
000704 05eb
000705 05bf
000706 0595
000707 056d
000708 0547
000709 0524
00070a 0502
00070b 04e2
00070c 04c4
00070d 04a6
00070e 048b
00070f 0470
000710 0457
000711 043f
000712 0428                      .dw  1563  ,1515  ,1471  ,1429  ,1389  ,1351  ,1316  ,1282  ,1250  ,1220  ,1190  ,1163  ,1136  ,1111  ,1087  ,1064
000713 0412
000714 03fc
000715 03e8
000716 03d4
000717 03c2
000718 03af
000719 039e
00071a 038d
00071b 037d
00071c 036d
00071d 035e
00071e 034f
00071f 0341
000720 0334
000721 0326
000722 031a                      .dw  1042  ,1020  ,1000  ,980 ,962 ,943 ,926 ,909 ,893 ,877 ,862 ,847 ,833 ,820 ,806 ,794
000723 030d
000724 0301
000725 02f6
000726 02ea
000727 02df
000728 02d5
000729 02ca
00072a 02c0
00072b 02b6
00072c 02ad
00072d 02a4
00072e 029b
00072f 0292
000730 0289
000731 0281
000732 0279                      .dw  781 ,769 ,758 ,746 ,735 ,725 ,714 ,704 ,694 ,685 ,676 ,667 ,658 ,649 ,641 ,633
000733 0271
000734 0269
000735 0262
000736 025a
000737 0253
000738 024c
000739 0245
00073a 023f
00073b 0238
00073c 0232
00073d 022c
00073e 0225
00073f 021f
000740 021a
000741 0214
000742 020e                      .dw  625 ,617 ,610 ,602 ,595 ,588 ,581 ,575 ,568 ,562 ,556 ,549 ,543 ,538 ,532 ,526
000743 0209
000744 0203
000745 01fe
000746 01f9
000747 01f4
000748 01ef
000749 01ea
00074a 01e5
00074b 01e1
00074c 01dc
00074d 01d8
00074e 01d3
00074f 01cf
000750 01cb
000751 01c7
000752 01c2                      .dw  521 ,515 ,510 ,505 ,500 ,495 ,490 ,485 ,481 ,476 ,472 ,467 ,463 ,459 ,455 ,450
000753 01be
000754 01ba
000755 01b7
000756 01b3
000757 01af
000758 01ab
000759 01a8
00075a 01a4
00075b 01a1
00075c 019d
00075d 019a
00075e 0197
00075f 0193
000760 0190
000761 018d
000762 018a                      .dw  446 ,442 ,439 ,435 ,431 ,427 ,424 ,420 ,417 ,413 ,410 ,407 ,403 ,400 ,397 ,394
000763 0187
000764 0184
000765 0181
000766 017e
000767 017b
000768 0178
000769 0175
00076a 0172
00076b 0170
00076c 016d
00076d 016a
00076e 0168
00076f 0165
000770 0163
000771 0160
000772 015e                      .dw  391 ,388 ,385 ,382 ,379 ,376 ,373 ,370 ,368 ,365 ,362 ,360 ,357 ,355 ,352 ,350
000773 015b
000774 0159
000775 0156
000776 0154
000777 0152
000778 0150
000779 014d
00077a 014b
00077b 0149
00077c 0147
00077d 0145
00077e 0143
00077f 0141
000780 013e
000781 013c
000782 013a                      .dw  347 ,345 ,342 ,340 ,338 ,336 ,333 ,331 ,329 ,327 ,325 ,323 ,321 ,318 ,316 ,314
000783 0139
000784 0137
000785 0135
000786 0133
000787 0131
000788 012f
000789 012d
00078a 012b
00078b 012a
00078c 0128
00078d 0126
00078e 0124
00078f 0123
000790 0121
000791 011f
000792 011e                      .dw  313 ,311 ,309 ,307 ,305 ,303 ,301 ,299 ,298 ,296 ,294 ,292 ,291 ,289 ,287 ,286
000793 011c
000794 011a
000795 0119
000796 0117
000797 0116
000798 0114
000799 0113
00079a 0111
00079b 0110
00079c 010e
00079d 010d
00079e 010b
00079f 010a
0007a0 0109
0007a1 0107
0007a2 0106                      .dw  284 ,282 ,281 ,279 ,278 ,276 ,275 ,273 ,272 ,270 ,269 ,267 ,266 ,265 ,263 ,262
0007a3 0104
0007a4 0103
0007a5 0102
0007a6 0100
0007a7 00ff
0007a8 00fe
0007a9 00fd
0007aa 00fb
0007ab 00fa
0007ac 00f9
0007ad 00f8
0007ae 00f6
0007af 00f5
0007b0 00f4
0007b1 00f3
0007b2 00f2                      .dw  260 ,259 ,258 ,256 ,255 ,254 ,253 ,251 ,250 ,249 ,248 ,246 ,245 ,244 ,243 ,242
0007b3 00f0
0007b4 00ef
0007b5 00ee
0007b6 00ed
0007b7 00ec
0007b8 00eb
0007b9 00ea
0007ba 00e9
0007bb 00e7
0007bc 00e6
0007bd 00e5
0007be 00e4
0007bf 00e3
0007c0 00e2
0007c1 00e1
0007c2 00e0                      .dw  240 ,239 ,238 ,237 ,236 ,235 ,234 ,233 ,231 ,230 ,229 ,228 ,227 ,226 ,225 ,224
0007c3 00df
0007c4 00de
0007c5 00dd
0007c6 00dc
0007c7 00db
0007c8 00da
0007c9 00d9
0007ca 00d8
0007cb 00d8
0007cc 00d7
0007cd 00d6
0007ce 00d5
0007cf 00d4
0007d0 00d3
0007d1 00d2
0007d2 00d1                      .dw  223 ,222 ,221 ,220 ,219 ,218 ,217 ,216 ,216 ,215 ,214 ,213 ,212 ,211 ,210 ,209
0007d3 00d0
0007d4 00cf
0007d5 00cf
0007d6 00ce
0007d7 00cd
0007d8 00cc
0007d9 00cb
0007da 00ca
0007db 00ca
0007dc 00c9
0007dd 00c8
0007de 00c7
0007df 00c6
0007e0 00c6
0007e1 00c5
0007e2 00c4                      .dw  208 ,207 ,207 ,206 ,205 ,204 ,203 ,202 ,202 ,201 ,200 ,199 ,198 ,198 ,197 ,196
                                 .include "sensors.asm"
                                 
                                  * sensors.asm
                                  *
                                  *  Created: 11/05/2020 08:53:52 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .include "adc.asm"
                                 
                                 ;
                                 ; Created: 05/05/2020 06:21:17 p. m.
                                 ; Author : jchangfu
                                 ;
                                 
                                 
                                  .cseg
                                 adc_init:	
0007e3 e000                      	ldi		R16,0x00
0007e4 9300 0600                 	sts		ADC0_CTRLA,R16				; stop adc
0007e6 9300 0603                 	sts		ADC0_CTRLD,R16				; no delay
0007e8 9300 0604                 	sts		ADC0_CTRLE,R16				; no compare
0007ea 9300 0605                 	sts		ADC0_SAMPCTRL,R16			; sample length
                                 
0007ec e005                      	ldi		R16,ADC_SAMPNUM_ACC32_gc	; Sample accumulation 32
0007ed 9300 0601                 	sts		ADC0_CTRLB,R16
0007ef e604                      	ldi		R16,ADC_SAMPCAP_bm|ADC_REFSEL_VREFA_gc|ADC_PRESC_DIV32_gc
0007f0 9300 0602                 	sts		ADC0_CTRLC,R16
0007f2 e001                      	ldi		R16,ADC_ENABLE_bm			; enable adc	
0007f3 9300 0600                 	sts		ADC0_CTRLA,R16
0007f5 9508                      	ret
                                 
                                 
                                 ; input:	R16 -> adc channel. example: ldi R16,ADC_MUXPOS_AIN0_gc
                                 ; output:	X   -> value, 16 bits
                                 adc_read:
0007f6 9300 0606                 	sts		ADC0_MUXPOS,R16
0007f8 e001                      	ldi		R16,ADC_STCONV_bm			; start conversion
0007f9 9300 0608                 	sts		ADC0_COMMAND,R16
                                 adc_read_loop:
0007fb 940e 00fc                 	task_change
0007fd 9100 0608                 	lds		R16,ADC0_COMMAND
0007ff fd00                      	sbrc	r16,0
000800 cffa                      	rjmp	adc_read_loop
000801 91a0 0610                 	lds		XL,ADC0_RESL
000803 91b0 0611                 	lds		XH,ADC0_RESH
000805 9508                      	ret
                                 
                                 .include "i2c.asm"
                                 
                                  * i2c.asm
                                  *
                                  *  Created: 08/05/2020 03:34:03 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                  .equ i2c_fscl		 = 200000			; from 100000 to 400000
                                  .equ i2c_timeout_ms = 2				; 2 ms timeout
                                 
                                 ; i2c_master_init -> initialize i2c for master operation at i2c_fscl scl speed
                                 ; ***************
                                 .cseg
                                 i2c_master_init:
                                 ;	PA2: (PULL-UP)	flow sensor SDA
                                 ;   PA3: (PULL-UP)	flow sensor SCL
000806 e00c                      	ldi		R16,0x0c
000807 9300 0405                 	sts		PORTA_OUTSET,R16
000809 9300 0402                 	sts		PORTA_DIRCLR,R16
00080b e008                      	ldi		R16,PORT_PULLUPEN_bm
00080c 9300 0412                 	sts		PORTA_PIN2CTRL,R16
00080e 9300 0413                 	sts		PORTA_PIN3CTRL,R16
                                 
000810 e000                      	ldi		R16,0x00						; stop i2c
000811 9300 08a3                 	sts		TWI0_MCTRLA,R16
000813 9300 08a1                 	sts		TWI0_DUALCTRL,R16
000815 9300 08a2                 	sts		TWI0_DBGCTRL,R16
                                 
000817 e209                      	ldi		R16,(fosc/i2c_fscl-10)/2		; set baud rate
000818 9300 08a6                 	sts		TWI0_MBAUD,R16
00081a e10c                      	ldi		R16,TWI_DEFAULT_SDASETUP_8CYC_gc | TWI_DEFAULT_SDAHOLD_500NS_gc
00081b 9300 08a0                 	sts		TWI0_CTRLA,R16
00081d e00d                      	ldi		R16,TWI_TIMEOUT_200US_gc | TWI_ENABLE_bm
00081e 9300 08a3                 	sts		TWI0_MCTRLA,R16
                                 
000820 e008                      	ldi		R16,TWI_FLUSH_bm				; flush data
000821 9300 08a4                 	sts		TWI0_MCTRLB,R16
000823 e001                      	ldi		R16,TWI_BUSSTATE_IDLE_gc		; go idle state
000824 9300 08a5                 	sts		TWI0_MSTATUS,R16
000826 ec00                      	ldi		R16,TWI_RIF_bm | TWI_WIF_bm		; reset flags
000827 9300 08a5                 	sts		TWI0_MSTATUS,R16
000829 9508                      	ret
                                 
                                 ; i2c_master_read -> reads 2 byte data (high-low) from device address R16
                                 ; ***************
                                 ; input:	R16 -> device address
                                 ; output:	X   -> data
                                 ;			sez -> ok
                                 ;			clz -> error
                                 .dseg
002cac                           i2c_master_read_data:	.byte 2
                                 .cseg
                                 i2c_master_read:
00082a 0f00                      	lsl		R16								; shift address
00082b 6001                      	ori		R16,0x01						; read
00082c 9300 08a7                 	sts		TWI0_MADDR,R16
                                 
00082e d023                      	rcall	i2c_master_wait_rif				; send address, receive data high
00082f f4a9                      	brne	i2c_master_read_ret
000830 9100 08a8                 	lds		R16,TWI0_MDATA
000832 9300 2cad                 	sts		i2c_master_read_data+1,R16
000834 e002                      	ldi		R16,TWI_MCMD_RECVTRANS_gc		; send ack
000835 9300 08a4                 	sts		TWI0_MCTRLB,R16
                                 
000837 d01a                      	rcall	i2c_master_wait_rif				; receive data low
000838 f461                      	brne	i2c_master_read_ret
000839 9100 08a8                 	lds		R16,TWI0_MDATA
00083b 9300 2cac                 	sts		i2c_master_read_data,R16
00083d e007                      	ldi		R16,TWI_ACKACT_NACK_gc | TWI_MCMD_STOP_gc	; send nack + stop
00083e 9300 08a4                 	sts		TWI0_MCTRLB,R16
000840 91a0 2cac                 	lds		XL,i2c_master_read_data
000842 91b0 2cad                 	lds		XH,i2c_master_read_data+1
000844 9418                      	sez
                                 i2c_master_read_ret:
000845 9508                      	ret
                                 
                                 
                                 ; i2c_master_read_retry -> reads 2 byte data (high-low) from device address R16. One retry.
                                 ; *********************
                                 ; input:	R16 -> device address
                                 ; output:	X   -> data
                                 ;			sez -> ok
                                 ;			clz -> error
                                 .dseg
002cae                           i2c_master_read_device_addr:	.byte 1
                                 .cseg
                                 i2c_master_read_retry:
000846 9300 2cae                 	sts		i2c_master_read_device_addr,R16	; first: try
000848 dfe1                      	rcall	i2c_master_read
000849 f039                      	breq	i2c_master_read_retry_ret
                                 
00084a 940e 00fc                 	task_change								; delay before retry
00084c 940e 00fc                 	task_change
                                 
00084e 9100 2cae                 	lds		R16,i2c_master_read_device_addr	; second: retry
000850 dfd9                      	rcall	i2c_master_read
                                 i2c_master_read_retry_ret:
000851 9508                      	ret
                                 
                                 
                                 ; i2c_master_wait_rif -> waits i2c rif flag.
                                 ; *******************
                                 ; sez -> ok
                                 ; clz -> error
                                 .dseg
002caf                           i2c_master_wait_tmr_ms:	.byte 1
                                 .cseg
                                 i2c_master_wait_rif:
000852 e002                      	ldi		R16,i2c_timeout_ms
000853 9300 2caf                 	sts		i2c_master_wait_tmr_ms,R16
                                 i2c_master_wait_rif_loop:
000855 940e 00fc                 	task_change
000857 9100 2caf                 	lds		R16,i2c_master_wait_tmr_ms		; timeout?
000859 3000                      	cpi		R16,0
00085a f049                      	breq	i2c_master_wait_rif_recover
                                 
00085b 9100 08a5                 	lds		R16,TWI0_MSTATUS
00085d 3a02                      	cpi		R16,0xa2						; data ack?
00085e f039                      	breq	i2c_master_wait_rif_ret
00085f 7e0f                      	andi	R16,0xef
000860 3002                      	cpi		R16,0x02						; still waiting?
000861 f399                      	breq	i2c_master_wait_rif_loop
000862 3202                      	cpi		R16,0x22						; hold?
000863 f389                      	breq	i2c_master_wait_rif_loop
                                 i2c_master_wait_rif_recover:
000864 d002                      	rcall	i2c_master_recover
000865 9498                      	clz
                                 i2c_master_wait_rif_ret:
000866 9508                      	ret
                                 
                                 
                                 ; i2c_master_recover -> if no ack => stop
                                 ; *******************	else => stop i2c, restart
                                 .dseg
002cb0                           i2c_err:	.byte 1
                                 .cseg
                                 i2c_master_recover:
000867 9300 2cb0                 	sts		i2c_err,R16
000869 3602                      	cpi		R16,0x62						; no ack?
00086a f421                      	brne	i2c_master_recover_ack
00086b e007                      	ldi		R16,TWI_ACKACT_NACK_gc | TWI_MCMD_STOP_gc
00086c 9300 08a4                 	sts		TWI0_MCTRLB,R16
00086e c009                      	rjmp	i2c_master_recover_ret
                                 i2c_master_recover_ack:
00086f 940e 00fc                 	task_change
000871 e000                      	ldi		R16,0x00						; stop i2c
000872 9300 08a3                 	sts		TWI0_MCTRLA,R16
000874 d004                      	rcall	i2c_master_recover_scl_pulse	; send scl pulse
000875 9100 2cb0                 	lds		R16,i2c_err
000877 df8e                      	rcall	i2c_master_init					; restart i2c
                                 i2c_master_recover_ret:
000878 9508                      	ret
                                 
                                 
                                 ; i2c_master_recover_scl_pulse -> send scl negative pulse
                                 ; *******************
                                 i2c_master_recover_scl_pulse:
000879 e008                      	ldi		R16,$08					; scl output
00087a 9300 0401                 	sts		PORTA_DIRSET,R16
00087c 940e 00fc                 	task_change
00087e e008                      	ldi		R16,$08					; clear scl
00087f 9300 0406                 	sts		PORTA_OUTCLR,R16
000881 940e 00fc                 	task_change
000883 e008                      	ldi		R16,$08					; set scl
000884 9300 0405                 	sts		PORTA_OUTSET,R16
000886 940e 00fc                 	task_change
                                 .include "fir_filter.asm"
000888 9508                      
                                  * fir_filter.asm
                                  *
                                  *  Created: 11/05/2020 11:36:58 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .cseg
                                 
                                 ; fir_filter  -> receive new data X and apply fir filter
                                 ; **********
                                 ; Input:
                                 ; 	R16 -> filter size
                                 ; 	X   -> new data, signed 16 bits.
                                 ; 	Y   -> buffer pointer, signed 16 bits, low-high,old data first.
                                 ; 	Z   -> filter pointer, signed 16 bits, low-high.
                                 ; Output:
                                 ;	X   -> filtered data, signed 16 bits.
                                 ;   Y   -> filtered data, fractional 16 bits
                                 fir_filter:
000889 2ef0                      	mov		R15,R16			; last loop for new data X
00088a 94fa                      	dec		R15
                                 
00088b 2700                      	clr 	R16				; accumulator
00088c 2711                      	clr		R17
00088d 2722                      	clr		R18
00088e 2733                      	clr		R19
                                 fir_filter_loop:
00088f 814a                      	ldd		R20,Y+2			; data from buffer
000890 815b                      	ldd		R21,Y+3
000891 9349                      	st		Y+,R20			; shift data
000892 9359                      	st		Y+,R21
000893 9165                      	lpm		R22,Z+			; data from filter
000894 9175                      	lpm		R23,Z+
000895 dbeb                      	rcall	mac16x16_32_method_B
000896 94fa                      	dec		R15				; next tab
000897 f7b9                      	brne	fir_filter_loop
                                 
000898 01ad                      	movw	R21:R20,XH:XL	; new data
000899 9349                      	st		Y+,R20			; shift data
00089a 9359                      	st		Y+,R21
00089b 9165                      	lpm		R22,Z+			; data from filter
00089c 9175                      	lpm		R23,Z+
00089d dbe3                      	rcall	mac16x16_32_method_B
                                 
00089e 01d9                      	movw	XH:XL,R19:R18
00089f 01e8                      	movw	YH:YL,R17:R16
0008a0 9508                      	ret
                                 
                                 
                                 ; filter input:  signed 16 bits accumulated adc
                                 ; filter output: signed 16 bits. 8 msb = cmH2O (-128,127)
                                 .equ fir_filter_pressure_shift = 8
                                 fir_filter_pressure:
                                 ;	.dw 529,1342,2240,3638,4886,6167,6917,7284,6917,6167,4886,3638,2240,1342,529
0008a1 020f
0008a2 0539
0008a3 08b8
0008a4 0e29
0008a5 1305
0008a6 1801
0008a7 1aec
0008a8 1c5a
0008a9 1aec
0008aa 1801
0008ab 1305
0008ac 0e29
0008ad 08b8
0008ae 0539
0008af 020f                      	.dw 527,1337,2232,3625,4869,6145,6892,7258,6892,6145,4869,3625,2232,1337,527
                                 
                                 fir_filter_pressure_end:
                                 
                                 ; filter input:  signed 16 bits (from 14 bits flow sensor)
                                 ; filter output: signed 16 bits. 10 msb = l/min (-512,512)
                                 .equ fir_filter_flow_shift = 6
                                 fir_filter_flow:
                                 ;	.dw -880,322,482,754,1138,1628,2221,2913,3695
                                 ;	.dw 4557,5483,6453,7445,8434,9392,10292,11109,11815,12391
                                 ;	.dw 12816,13077,13164,13077,12816,12391,11815,11109,10292,9392
                                 ;	.dw 8434,7445,6453,5483,4557,3695,2913,2221,1628,1138
                                 ;	.dw 754,482,322,-880
                                 
0008b0 fce0
0008b1 0125
0008b2 01b6
0008b3 02ae
0008b4 040b
0008b5 05c8
0008b6 07e3
0008b7 0a58
0008b8 0d1f                      	.dw	-800,293,438,686,1035,1480,2019,2648,3359
0008b9 102f
0008ba 1379
0008bb 16eb
0008bc 1a71
0008bd 1df3
0008be 215a
0008bf 248d
0008c0 2773
0008c1 29f5
0008c2 2c00                      	.dw 4143,4985,5867,6769,7667,8538,9357,10099,10741,11264
0008c3 2d83
0008c4 2e70
0008c5 2ec0
0008c6 2e70
0008c7 2d83
0008c8 2c00
0008c9 29f5
0008ca 2773
0008cb 248d
0008cc 215a                      	.dw 11651,11888,11968,11888,11651,11264,10741,10099,9357,8538
0008cd 1df3
0008ce 1a71
0008cf 16eb
0008d0 1379
0008d1 102f
0008d2 0d1f
0008d3 0a58
0008d4 07e3
0008d5 05c8
0008d6 040b                      	.dw 7667,6769,5867,4985,4143,3359,2648,2019,1480,1035
0008d7 02ae
0008d8 01b6
0008d9 0125
0008da fce0                      	.dw 686,438,293,-800
                                 
                                 ;	.dw 687,2950,4679,7891,11408,15266,18924,21971,23986,24693,23986,21971,18924,15266,11408,7891,4679,2950,687
                                 
                                 
                                 //	.dw 21845,21846,21845
                                 fir_filter_flow_end:
                                 
                                 ; filter input:  signed 16 bits accumulated adc
                                 ; filter output: signed 16 bits. 9 msb = %oxygen (-128,127)
                                 .equ fir_filter_oxygen_shift = 7
                                 fir_filter_oxygen:
0008db 073b
0008dc 247d
0008dd 4c9a
0008de 60c7
0008df 4c9a
0008e0 247d
0008e1 073b                      	.dw 1851,9341,19610,24775,19610,9341,1851
                                 
                                 ;	.dw 21845,21846,21845
                                 fir_filter_oxygen_end:
                                 
                                 ; filter input:  signed 16 bits accumulated adc
                                 ; filter output: signed 16 bits. 8 msb = volt (-128,127)
                                 .equ fir_filter_volt_shift = 0
                                 fir_filter_volt:
0008e2 5555
0008e3 5556
0008e4 5555                      	.dw 21845,21846,21845
                                 fir_filter_volt_end:
                                 
                                 ; filter input:  signed 16 bits accumulated adc
                                 ; filter output: signed 16 bits. 8 msb = volt (-128,127)
                                 .equ fir_filter_current_shift = 0
                                 fir_filter_current:
0008e5 5555
0008e6 5556
0008e7 5555                      	.dw 21845,21846,21845
                                 fir_filter_current_end:
                                 
                                 
                                 .equ bat_adc_BPS = 9600
                                 
                                 .equ sensors_pressure_sampling_ms	= 5
                                 .equ sensors_flow_sampling_ms		= 2
                                 .equ sensors_oxygen_sampling_ds		= 2
                                 .equ sensors_VDD33_sampling_ds		= 10
                                 .equ sensors_VDD50_sampling_ds		= 10
                                 .equ sensors_current_sampling_cs	= 1
                                 
                                 ;.equ sensors_pressure_offset		= 1500*16;1495*16				; 4 fractional bits	
                                 .equ sensors_pressure_offset		= 0*16				; 4 fractional bits
                                 .equ sensors_flow_offset			= 8191	
                                 ;.equ sensors_flow_offset			= 8166;8187;8191					; integer
                                 ;.equ sensors_flow_offset			= 8186								; masi3. sn: 0000
                                 ;.equ sensors_flow_offset			= 8159								; SN:0001
                                 ;.equ sensors_flow_offset			= 8171								; SN:0002
                                 .equ sensors_oxygen_offset			= 13312					; 4 fractional bits	
                                 .equ sensors_VDD33_offset			= 0						; 4 fractional bits	
                                 .equ sensors_VDD50_offset			= 0						; 4 fractional bits	
                                 .equ sensors_current_offset			= 0						; 4 fractional bits	
                                 
                                 .equ sensors_flow_address			= 0x28
                                 
                                 .dseg
002cb1                           sensors_pressure_rdy:			.byte 1
002cb2                           sensors_pressure_tmr_ms:		.byte 1
002cb3                           sensors_pressure_value:			.byte 4		; frac(L-H), int16 (L-H)
002cb7                           sensors_pressure_buffer:		.byte 2*(fir_filter_pressure_end-fir_filter_pressure)
002cd5                           sensors_pressure_bufffer_end:	.byte 0
                                 
002cd5                           sensors_flow_rdy:				.byte 1
002cd6                           sensors_flow_tmr_ms:			.byte 1
002cd7                           sensors_flow_value:				.byte 4		; frac(L-H), int16 (L-H)
002cdb                           sensors_flow_buffer:			.byte 2*(fir_filter_flow_end-fir_filter_flow)
002d31                           sensors_flow_bufffer_end:		.byte 0
                                 
002d31                           sensors_oxygen_rdy:				.byte 1
002d32                           sensors_oxygen_tmr_ds:			.byte 1
002d33                           sensors_oxygen_value:			.byte 4		; frac(L-H), int16 (L-H)
002d37                           sensors_oxygen_buffer:			.byte 2*(fir_filter_oxygen_end-fir_filter_oxygen)
002d45                           sensors_oxygen_bufffer_end:		.byte 0
                                 
002d45                           sensors_VDD33_rdy:				.byte 1
002d46                           sensors_VDD33_tmr_ds:			.byte 1
002d47                           sensors_VDD33_value:			.byte 4		; frac(L-H), int16 (L-H)
002d4b                           sensors_VDD33_buffer:			.byte 2*(fir_filter_volt_end-fir_filter_volt)
002d51                           sensors_VDD33_bufffer_end:		.byte 0
                                 
002d51                           sensors_VDD50_rdy:				.byte 1
002d52                           sensors_VDD50_tmr_ds:			.byte 1
002d53                           sensors_VDD50_value:			.byte 4		; frac(L-H), int16 (L-H)
002d57                           sensors_VDD50_buffer:			.byte 2*(fir_filter_volt_end-fir_filter_volt)
002d5d                           sensors_VDD50_bufffer_end:		.byte 0
                                 
002d5d                           sensors_current_rdy:			.byte 1
002d5e                           sensors_current_tmr_cs:			.byte 1
002d5f                           sensors_current_value:			.byte 4		; frac(L-H), int16 (L-H)
002d63                           sensors_current_buffer:			.byte 2*(fir_filter_current_end-fir_filter_current)
002d69                           sensors_current_bufffer_end:	.byte 0
                                 
002d69                           sensors_volume_value:			.byte 4		; frac(L-H), int16 (L-H)
                                 
002d6d                           sensors_pressure_max:			.byte 4
002d71                           sensors_flow_max:				.byte 4
002d75                           sensors_volume_max:				.byte 4
                                 
002d79                           sensors_pressure_ini:			.byte 4
002d7d                           sensors_flow_ini:				.byte 4
002d81                           sensors_volume_ini:				.byte 4
                                 
002d85                           sensors_flow_calc_process:		.byte 1
002d86                           sensors_flow_offset_cal:		.byte 4
002d8a                           sensors_pressure_offset_cal:	.byte 4
002d8e                           sensors_o2_21_cal:				.byte 4
002d92                           sensors_o2_Hi_cal:				.byte 4
002d96                           sensors_o2_Hi_ref:				.byte 1
002d97                           sensors_o2_0_cal:				.byte 4
002d9b                           sensors_o2_gain_cal:			.byte 4
                                 
                                 
002d9f                           sensors_oxygen_Calibrado:		.byte 4		; frac(L-H), int16 (L-H)
                                 
                                 
                                 ; sensors_adc_task	->	pool adc sensors
                                 ; ****************		max sampling = fosc/adc_pre/adc_acc/13 = 1384Hz = 0.722ms //692Hz = 1.45ms
                                 .dseg
002da3                           sensors_adc_list_ptr:	.byte 2
002da5                           sensors_adc_var_ptr:	.byte 2
                                 .cseg
                                 sensors_adc_list:
0008e8 0005                      	.db sensors_pressure_sampling_ms,	ADC_MUXPOS_AIN0_gc
0008e9 2cb1                      	.dw	sensors_pressure_rdy
0008ea 08a1
0008eb 08b0                      	.dw fir_filter_pressure,			fir_filter_pressure_end
0008ec 0000
0008ed 0008                      	.dw sensors_pressure_offset,		fir_filter_pressure_shift
                                 
0008ee 0102                      	.db sensors_oxygen_sampling_ds,		ADC_MUXPOS_AIN1_gc
0008ef 2d31                      	.dw	sensors_oxygen_rdy
0008f0 08db
0008f1 08e2                      	.dw fir_filter_oxygen,			fir_filter_oxygen_end
0008f2 3400
0008f3 0007                      	.dw sensors_oxygen_offset,		fir_filter_oxygen_shift
                                 
0008f4 020a                      	.db sensors_VDD33_sampling_ds,		ADC_MUXPOS_AIN2_gc
0008f5 2d45                      	.dw	sensors_VDD33_rdy
0008f6 08e2
0008f7 08e5                      	.dw fir_filter_volt,			fir_filter_volt_end
0008f8 0000
0008f9 0000                      	.dw sensors_VDD33_offset,		fir_filter_volt_shift
                                 
0008fa 030a                      	.db sensors_VDD50_sampling_ds,		ADC_MUXPOS_AIN3_gc
0008fb 2d51                      	.dw	sensors_VDD50_rdy
0008fc 08e2
0008fd 08e5                      	.dw fir_filter_volt,			fir_filter_volt_end
0008fe 0000
0008ff 0000                      	.dw sensors_VDD50_offset,		fir_filter_volt_shift
                                 
000900 0501                      	.db sensors_current_sampling_cs,	ADC_MUXPOS_AIN5_gc
000901 2d5d                      	.dw	sensors_current_rdy
000902 08e5
000903 08e8                      	.dw fir_filter_current,			fir_filter_current_end
000904 0000
000905 0000                      	.dw sensors_current_offset,		fir_filter_current_shift
                                 
000906 0000                      	.db 0,0
                                 
                                 
                                 sensors_adc_task:
000907 d00d                      	rcall	sensors_adc_init
                                 sensors_adc_task_start:
000908 d02b                      	rcall	sensors_adc_start_list			; points to sensors_adc_list
                                 sensors_adc_task_loop:
000909 940e 00fc                 	task_change
00090b d02f                      	rcall	sensors_adc_restart_list		; checks for end of sensors_adc_list
00090c f3d9                      	breq	sensors_adc_task_start
                                 
00090d d034                      	rcall	sensors_adc_sampling			; checks for sensor sampling time. data on X
00090e f421                      	brne	sensors_adc_task_next
                                 
00090f d045                      	rcall	sensors_adc_fir_filter			; fir filter data. X->int16, Y->factional
000910 d059                      	rcall	sensors_adc_scale				; offset and shift. X->int16, Y->factional
                                 
000911 d09a                      	rcall	sensors_pressure_cal
                                 
000912 d06d                      	rcall	sensors_adc_save
                                 
                                 sensors_adc_task_next:
000913 d07b                      	rcall	sensors_adc_next
000914 cff4                      	rjmp	sensors_adc_task_loop
                                 
                                 
                                 
                                 
                                 ; sensors_adc_init	-> power sensors. clear data. set sampling times
                                 ; ****************
                                 sensors_adc_init:
000915 e100                      	ldi		R16,0x10							; pressure/oxigen power enable
000916 9300 0465                 	sts		portd_outset,R16
                                 
000918 e2bc                      	ldi		XH,high(sensors_pressure_rdy)		; clear all data
000919 eba1                      	ldi		XL,low(sensors_pressure_rdy)
00091a 2700                      	clr		R16
                                 sensors_adc_init_loop:
00091b 930d                      	st		X+,R16
00091c 36a9                      	cpi		XL,low(sensors_current_bufffer_end)
00091d f7e9                      	brne	sensors_adc_init_loop
00091e 32bd                      	cpi		XH,high(sensors_current_bufffer_end)
00091f f7d9                      	brne	sensors_adc_init_loop
                                 
                                 
000920 ef0f                      	ldi		R16,255								; set sampling times for first read
000921 9300 2cb2                 	sts		sensors_pressure_tmr_ms,R16
                                 
000923 e002                      	ldi		R16,sensors_oxygen_sampling_ds
000924 9300 2d32                 	sts		sensors_oxygen_tmr_ds,R16
                                 
000926 e00a                      	ldi		R16,sensors_VDD33_sampling_ds
000927 9300 2d46                 	sts		sensors_VDD33_tmr_ds,R16
                                 
000929 e00a                      	ldi		R16,sensors_VDD50_sampling_ds
00092a 9300 2d52                 	sts		sensors_VDD50_tmr_ds,R16
                                 
00092c e001                      	ldi		R16,sensors_current_sampling_cs
00092d 9300 2d5e                 	sts		sensors_current_tmr_cs,R16
                                 
00092f ef0f                      	ldi		R16,255								; just in case set flow sampling time  for first read
000930 9300 2cd6                 	sts		sensors_flow_tmr_ms,R16
                                 
                                 ;	ldi		R16,0								; pressure calibration to zero
                                 ;	sts		sensors_pressure_offset_cal,R16
                                 ;	sts		sensors_pressure_offset_cal+1,R16
                                 ;	sts		sensors_pressure_offset_cal+2,R16
                                 ;	sts		sensors_pressure_offset_cal+3,R16
                                 
                                 
000932 deb0                      	rcall	adc_init							; init adc hardware
000933 9508                      	ret
                                 
                                 
                                 
                                 
                                 sensors_adc_start_list:
000934 e1f1                      	ldi		ZH,high(sensors_adc_list*2)		; top of adc list
000935 ede0                      	ldi		ZL,low(sensors_adc_list*2)
000936 93e0 2da3                 	sts		sensors_adc_list_ptr,ZL
000938 93f0 2da4                 	sts		sensors_adc_list_ptr+1,ZH
00093a 9508                      	ret
                                 
                                 
                                 
                                 
                                 sensors_adc_restart_list:
00093b 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr
00093d 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
00093f 9115                      	lpm		R17,Z+							; sampling time=0 -> restart
000940 3010                      	cpi		R17,0
000941 9508                      	ret
                                 
                                 
                                 ; output:	sez -> data read
                                 ;			clz -> not sampled
                                 sensors_adc_sampling:
000942 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr
000944 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
000946 9115                      	lpm		R17,Z+							; sampling time
000947 9105                      	lpm		R16,Z+							; adc channel
000948 91c5                      	lpm		YL,Z+							; sensor variables
000949 91d5                      	lpm		YH,Z+
00094a 8129                      	ldd		R18,Y+1							; sampling timer
00094b 3020                      	cpi		R18,0
00094c f439                      	brne	sensors_adc_sampling_ret
                                 
00094d 8319                      	std		Y+1,R17							; update sampling timer
00094e 93c0 2da5                 	sts		sensors_adc_var_ptr,YL			; save sensor variables pointer
000950 93d0 2da6                 	sts		sensors_adc_var_ptr+1,YH
                                 
000952 dea3                      	rcall	adc_read						; read adc data to X
000953 9418                      	sez
                                 sensors_adc_sampling_ret:
000954 9508                      	ret
                                 
                                 
                                 
                                 sensors_adc_fir_filter:
000955 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr
000957 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
000959 9634                      	adiw	ZL,4
00095a 9125                      	lpm		R18,Z+							; fir filter size
00095b 9135                      	lpm		R19,Z+
00095c 9105                      	lpm		R16,Z+
00095d 9115                      	lpm		R17,Z+
00095e 1b02                      	sub		R16,R18
00095f 0b13                      	sbc		R17,R19
                                 
000960 01f9                      	movw	ZH:ZL,R19:R18					; fir filter pointer
000961 0fee                      	lsl		ZL
000962 1fff                      	rol		ZH
000963 91c0 2da5                 	lds		YL,sensors_adc_var_ptr			; data buffer pointer
000965 91d0 2da6                 	lds		YH,sensors_adc_var_ptr+1
000967 9626                      	adiw	YL,6							; buffer pointer ***OFFSET***
                                 
000968 df20                      	rcall	fir_filter						; X -> int16, Y -> fractional
000969 9508                      	ret
                                 
                                 
                                 
                                 ; offset and shift. X->int16, Y->factional
                                 sensors_adc_scale:
00096a 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr
00096c 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
00096e 9638                      	adiw	ZL,8
00096f 9125                      	lpm		R18,Z+							; offset. 4 fractional bits
000970 9135                      	lpm		R19,Z+
000971 9105                      	lpm		R16,Z+							; shift
                                 
000972 9522                      	swap	R18								; offset
000973 2f12                      	mov		R17,R18
000974 7f10                      	andi	R17,0xf0
000975 702f                      	andi	R18,0x0f
000976 9532                      	swap	R19
000977 2f43                      	mov		R20,R19
000978 7f40                      	andi	R20,0xf0
000979 703f                      	andi	R19,0x0f
00097a 2b24                      	or		R18,R20
00097b 1bd1                      	sub		YH,R17
00097c 0ba2                      	sbc		XL,R18
00097d 0bb3                      	sbc		XH,R19
                                 
00097e d01a                      	rcall	sensors_adc_shift
00097f 9508                      	ret
                                 
                                 
                                 
                                 
                                 sensors_adc_save:
000980 2ffd                      	mov		ZH,YH
000981 2fec                      	mov		ZL,YL
000982 91c0 2da5                 	lds		YL,sensors_adc_var_ptr
000984 91d0 2da6                 	lds		YH,sensors_adc_var_ptr+1
000986 94f8                      	cli
000987 83ea                      	std		Y+2,ZL
000988 83fb                      	std		Y+3,ZH
000989 83ac                      	std		Y+4,XL
00098a 83bd                      	std		Y+5,XH
00098b 9478                      	sei
00098c e001                      	ldi		R16,1							; update rdy flag
00098d 8308                      	std		Y+0,R16
00098e 9508                      	ret
                                 
                                 
                                 
                                 sensors_adc_next:
00098f 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr			; next adc list ptr
000991 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
000993 963c                      	adiw	ZL,12							; list entry ***LENGTH***
000994 93e0 2da3                 	sts		sensors_adc_list_ptr,ZL
000996 93f0 2da4                 	sts		sensors_adc_list_ptr+1,ZH
000998 9508                      	ret
                                 
                                 
                                 
                                 
                                 sensors_adc_shift:
000999 3000                      	cpi		R16,0							; shift
00099a f081                      	breq	sensors_adc_shift_ret
00099b 3008                      	cpi		R16,8
00099c f040                      	brlo	sensors_adc_shift8
00099d 2fcd                      	mov		YL,YH
00099e 2fda                      	mov		YH,XL
00099f 2fab                      	mov		XL,XH
0009a0 e0b0                      	ldi		XH,0
0009a1 fda7                      	sbrc	XL,7
0009a2 efbf                      	ldi		XH,0xff
0009a3 5008                      	subi	R16,8
0009a4 f031                      	breq	sensors_adc_shift_ret
                                 sensors_adc_shift8:
0009a5 95b5                      	asr		XH
0009a6 95a7                      	ror		XL
0009a7 95d7                      	ror		YH
0009a8 95c7                      	ror		YL
0009a9 950a                      	dec		R16
0009aa f7d1                      	brne	sensors_adc_shift8
                                 sensors_adc_shift_ret:
0009ab 9508                      	ret
                                 
                                 
                                 
                                 
                                 ; X->integer, Y->frac
                                 sensors_pressure_cal:
0009ac 91e0 2da3                 	lds		ZL,sensors_adc_list_ptr			; check if pressure
0009ae 91f0 2da4                 	lds		ZH,sensors_adc_list_ptr+1
0009b0 3de0                      	cpi		ZL,low(sensors_adc_list*2)
0009b1 f4e1                      	brne	sensors_pressure_cal_ret
0009b2 31f1                      	cpi		ZH,high(sensors_adc_list*2)
0009b3 f4d1                      	brne	sensors_pressure_cal_ret
                                 
                                 ;	lds		XH,sensors_pressure_value+3
                                 ;	lds		XL,sensors_pressure_value+2
                                 ;	lds		YH,sensors_pressure_value+1
                                 ;	lds		YL,sensors_pressure_value+0
0009b4 90d0 2d8d                 	lds		R13,sensors_pressure_offset_cal+3
0009b6 90c0 2d8c                 	lds		R12,sensors_pressure_offset_cal+2
0009b8 90b0 2d8b                 	lds		R11,sensors_pressure_offset_cal+1
0009ba 90a0 2d8a                 	lds		R10,sensors_pressure_offset_cal+0
                                 
0009bc 2d0d                      	mov		R16,R13							; skip if calibration process
0009bd 290c                      	or		R16,R12
0009be 290b                      	or		R16,R11
0009bf 290a                      	or		R16,R10
0009c0 f069                      	breq	sensors_pressure_cal_ret
                                 
0009c1 19ca                      	sub		YL,R10
0009c2 09db                      	sbc		YH,R11
0009c3 09ac                      	sbc		XL,R12
0009c4 09bd                      	sbc		XH,R13
0009c5 f42c                      	brge	sensors_pressure_cal_pos
0009c6 27bb                      	clr		XH
0009c7 27aa                      	clr		XL
0009c8 27dd                      	clr		YH
0009c9 27cc                      	clr		YL
0009ca c003                      	rjmp	sensors_pressure_cal_ret
                                 sensors_pressure_cal_pos:
0009cb e1f4                      	ldi		ZH,high(EEPROM_START+ee_press_range0)
0009cc e6e1                      	ldi		ZL,low(EEPROM_START+ee_press_range0)
0009cd db16                      	rcall	linearize_pos
                                 
                                 ;	sts		sensors_pressure_value+3,XH
                                 ;	sts		sensors_pressure_value+2,XL
                                 ;	sts		sensors_pressure_value+1,YH
                                 ;	sts		sensors_pressure_value+0,YL
                                 sensors_pressure_cal_ret:
0009ce 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 sensors_o2_cal:
0009cf 9170 2d36                 	lds		R23,sensors_oxygen_value+3
0009d1 9160 2d35                 	lds		R22,sensors_oxygen_value+2
0009d3 9150 2d34                 	lds		R21,sensors_oxygen_value+1
0009d5 9140 2d33                 	lds		R20,sensors_oxygen_value+0
                                 
0009d7 90d0 2d9a                 	lds		R13,sensors_o2_0_cal+3
0009d9 90c0 2d99                 	lds		R12,sensors_o2_0_cal+2
0009db 90b0 2d98                 	lds		R11,sensors_o2_0_cal+1
0009dd 90a0 2d97                 	lds		R10,sensors_o2_0_cal+0
                                 
0009df 194a                      	sub		R20,R10
0009e0 095b                      	sbc		R21,R11
0009e1 096c                      	sbc		R22,R12
0009e2 097d                      	sbc		R23,R13
0009e3 f424                      	brge	sensors_o2_cal_pos
0009e4 2777                      	clr		R23
0009e5 2766                      	clr		R22
0009e6 2755                      	clr		R21
0009e7 2744                      	clr		R20
                                 sensors_o2_cal_pos:
                                 
0009e8 90d0 2d9e                 	lds		R13,sensors_o2_gain_cal+3
0009ea 90c0 2d9d                 	lds		R12,sensors_o2_gain_cal+2
0009ec 90b0 2d9c                 	lds		R11,sensors_o2_gain_cal+1
0009ee 90a0 2d9b                 	lds		R10,sensors_o2_gain_cal+0
                                 
0009f0 e000                      	ldi		R16,0
0009f1 9d6b                      	mul		R22,R11
0009f2 2db1                      	mov		XH,R1
0009f3 2da0                      	mov		XL,R0
0009f4 9d5a                      	mul		R21,R10
0009f5 2dd1                      	mov		YH,R1
0009f6 2dc0                      	mov		YL,R0
0009f7 9d6a                      	mul		R22,R10
0009f8 0dd0                      	add		YH,R0
0009f9 1da1                      	adc		XL,R1
0009fa 1fb0                      	adc		XH,R16
0009fb 9d5b                      	mul		R21,R11
0009fc 0dd0                      	add		YH,R0
0009fd 1da1                      	adc		XL,R1
0009fe 1fb0                      	adc		XH,R16
                                 	
0009ff 9508                      	ret
                                 
                                 
                                 
                                 
                                 ; sensors_i2c_task	->	flow sensors
                                 ; ****************
                                 sensors_i2c_task:
000a00 d04e                      	rcall	sensors_i2c_init
                                 sensors_i2c_task_loop:
000a01 940e 00fc                 	task_change
000a03 9100 2cd6                 	lds		R16,sensors_flow_tmr_ms				; check sampling time
000a05 3000                      	cpi		R16,0
000a06 f7d1                      	brne	sensors_i2c_task_loop
000a07 e002                      	ldi		R16,sensors_flow_sampling_ms
000a08 9300 2cd6                 	sts		sensors_flow_tmr_ms,R16
                                 
000a0a e004                      	ldi		R16,0x04							; debug led
000a0b 9300 04a5                 	sts		PORTF_OUTSET,R16
                                 
000a0d e208                      	ldi		R16,sensors_flow_address			; read-retry
000a0e de37                      	rcall	i2c_master_read_retry
000a0f f5b1                      	brne	sensors_i2c_task_error_retry
000a10 2f0b                      	mov		R16,XH								; data ok?
000a11 7c00                      	andi	R16,$c0
000a12 f061                      	breq	sensors_i2c_task_data_ok
                                 
000a13 3800                      	cpi		R16,$80								; stale data?
000a14 f591                      	brne	sensors_i2c_task_error_sensor
000a15 940e 00fc                 	task_change									; delay
000a17 940e 00fc                 	task_change
000a19 e208                      	ldi		R16,sensors_flow_address			; read-retry
000a1a de2b                      	rcall	i2c_master_read_retry
000a1b f561                      	brne	sensors_i2c_task_error_stale_retry
000a1c 2f0b                      	mov		R16,XH								; data ok?
000a1d 7c00                      	andi	R16,$c0
000a1e f551                      	brne	sensors_i2c_task_error_stale
                                 
                                 sensors_i2c_task_data_ok:
000a1f e2dc                      	ldi		YH,high(sensors_flow_buffer)		; fir filter X value
000a20 edcb                      	ldi		YL,low(sensors_flow_buffer)
000a21 e1f1                      	ldi		ZH,high(fir_filter_flow*2)
000a22 e6e0                      	ldi		ZL,low(fir_filter_flow*2)
000a23 e20b                      	ldi		R16,(fir_filter_flow_end-fir_filter_flow)
000a24 5faf                      	subi	XL,low(sensors_flow_offset)
000a25 41bf                      	sbci	XH,high(sensors_flow_offset)
                                 
000a26 de62                      	rcall	fir_filter
                                 
000a27 e006                      	ldi		R16,fir_filter_flow_shift
000a28 df70                      	rcall	sensors_adc_shift
000a29 d082                      	rcall	sensors_offset_flow_cal
000a2a 9100 2d85                 	lds		R16,sensors_flow_calc_process
000a2c 3001                      	cpi		R16,1
000a2d f031                      	breq	sensors_i2c_task_calc_process
                                 
                                 ;	rjmp	sensors_i2c_task_calc_process
                                 
000a2e e1f4                      	ldi		ZH,high(EEPROM_START+ee_flow_insp_range0)
000a2f e1e1                      	ldi		ZL,low(EEPROM_START+ee_flow_insp_range0)
000a30 dab3                      	rcall	linearize_pos
                                 
000a31 e1f4                      	ldi		ZH,high(EEPROM_START+ee_flow_exp_range0)
000a32 e3e9                      	ldi		ZL,low(EEPROM_START+ee_flow_exp_range0)
000a33 da9e                      	rcall	linearize_neg
                                 
                                 sensors_i2c_task_calc_process:
000a34 94f8                      	cli
000a35 93c0 2cd7                 	sts		sensors_flow_value,YL				; save filtered value
000a37 93d0 2cd8                 	sts		sensors_flow_value+1,YH
000a39 93a0 2cd9                 	sts		sensors_flow_value+2,XL
000a3b 93b0 2cda                 	sts		sensors_flow_value+3,XH
000a3d 9478                      	sei
000a3e e001                      	ldi		R16,1
000a3f 9300 2cd5                 	sts		sensors_flow_rdy,R16
                                 
000a41 d042                      	rcall	sensors_calc_vol
                                 
000a42 e004                      	ldi		R16,0x04							; debug led
000a43 9300 04a6                 	sts		PORTF_OUTCLR,R16
                                 
000a45 cfbb                      	rjmp	sensors_i2c_task_loop
                                 
                                 
                                 ; error conditions
                                 sensors_i2c_task_error_retry:					; first read-retry error
000a46 0000                      	nop
                                 sensors_i2c_task_error_sensor:					; first data not ok
000a47 0000                      	nop
                                 sensors_i2c_task_error_stale_retry:				; first stale, second read-retry error
000a48 0000                      	nop
                                 sensors_i2c_task_error_stale:					; first stale, second data not ok
000a49 0000                       	nop
                                 
000a4a d01f                      	rcall	sensors_i2c_restart					; restart sensor and i2c
                                 
000a4b e004                      	ldi		R16,0x04							; debug led
000a4c 9300 04a6                 	sts		PORTF_OUTCLR,R16
                                 
000a4e cfb2                      	rjmp	sensors_i2c_task_loop
                                 
                                 
                                 
                                 ; sensors_i2c_init	-> power sensor. enable level translator. clear data. set sampling times
                                 ; ****************
                                 sensors_i2c_init:
000a4f e002                      	ldi		R16,0x02						; flow sensor power enable
000a50 9300 0405                 	sts		PORTA_OUTSET,R16
000a52 e008                      	ldi		R16,0x08						; i2c level translator enable
000a53 9300 0425                 	sts		PORTB_OUTSET,R16
                                 
000a55 e2bc                      	ldi		XH,high(sensors_flow_rdy)		; clear all flow data
000a56 eda5                      	ldi		XL,low(sensors_flow_rdy)
000a57 2700                      	clr		R16
                                 sensors_i2c_init_loop:
000a58 930d                      	st		X+,R16
000a59 33a1                      	cpi		XL,low(sensors_flow_bufffer_end)
000a5a f7e9                      	brne	sensors_i2c_init_loop
000a5b 32bd                      	cpi		XH,high(sensors_flow_bufffer_end)
000a5c f7d9                      	brne	sensors_i2c_init_loop
                                 
000a5d 9300 2d69                 	sts		sensors_volume_value,R16		; clear volume data
000a5f 9300 2d6a                 	sts		sensors_volume_value+1,R16
000a61 9300 2d6b                 	sts		sensors_volume_value+2,R16
000a63 9300 2d6c                 	sts		sensors_volume_value+3,R16
                                 
000a65 ef0f                      	ldi		R16,255							; set flow sampling time for first read
000a66 9300 2cd6                 	sts		sensors_flow_tmr_ms,R16
                                 
000a68 dd9d                      	rcall	i2c_master_init					; init i2c hardware
000a69 9508                      	ret
                                 
                                 
                                 
                                 ; sensors_i2c_restart	-> cycle power sensor and level translator. init.
                                 ; ****************
                                 sensors_i2c_restart:
000a6a e002                      	ldi		R16,0x02						; flow sensor power disable
000a6b 9300 0406                 	sts		PORTA_OUTCLR,R16
000a6d e008                      	ldi		R16,0x08						; i2c level translator disable
000a6e 9300 0426                 	sts		PORTB_OUTCLR,R16
                                 
000a70 e002                      	ldi		R16,2							; 2 ms off
000a71 9300 2cd6                 	sts		sensors_flow_tmr_ms,R16
                                 sensors_i2c_restart_loop:
000a73 940e 00fc                 	task_change
000a75 9100 2cd6                 	lds		R16,sensors_flow_tmr_ms
000a77 3000                      	cpi		R16,0
000a78 f7d1                      	brne	sensors_i2c_restart_loop
                                 
000a79 e002                      	ldi		R16,0x02						; flow sensor power enable
000a7a 9300 0405                 	sts		PORTA_OUTSET,R16
000a7c e008                      	ldi		R16,0x08						; i2c level translator enable
000a7d 9300 0425                 	sts		PORTB_OUTSET,R16
                                 
000a7f ef0f                      	ldi		R16,255							; set flow sampling time for first read
000a80 9300 2cd6                 	sts		sensors_flow_tmr_ms,R16
                                 
000a82 dd83                      	rcall	i2c_master_init					; init i2c hardware
000a83 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; vol+=flow/30
                                 ; input:	flow -> X(int16), Y(frac16)
                                 sensors_calc_vol:
000a84 9100 2f2c                 	lds		R16,vent_phase					; check if expiration process
000a86 3003                      	cpi		R16,3
                                 ;	brne	sensors_calc_vol_cont
                                 ;	sbrs	XH,7							; minimun negative flow
                                 ;	rjmp	sensors_calc_vol_cont
                                 ;	cpi		XH,0xff
                                 ;	brne	sensors_calc_vol_cont
                                 ;	cpi		XL,0xff
                                 ;	brne	sensors_calc_vol_cont
                                 ;	cpi		YH,0xc0
                                 ;	brsh	sensors_calc_vol_cont
                                 ;	ldi		YH,0xc0
                                 ;	ldi		YL,0
                                 ;sensors_calc_vol_cont:
                                 
000a87 0fdd                      	lsl		YH
000a88 1faa                      	rol		XL
000a89 1fbb                      	rol		XH
000a8a 0fdd                      	lsl		YH
000a8b 1faa                      	rol		XL
000a8c 1fbb                      	rol		XH
000a8d 0fdd                      	lsl		YH
000a8e 1faa                      	rol		XL
000a8f 1fbb                      	rol		XH
000a90 2f5b                      	mov		R21,XH
000a91 2f4a                      	mov		R20,XL
000a92 e071                      	ldi		R23,high(273)
000a93 e161                      	ldi		R22,low(273)
                                 
000a94 9100 2d69                 	lds		R16,sensors_volume_value			; accumulate volume
000a96 9110 2d6a                 	lds		R17,sensors_volume_value+1
000a98 9120 2d6b                 	lds		R18,sensors_volume_value+2
000a9a 9130 2d6c                 	lds		R19,sensors_volume_value+3
                                 
000a9c d9e4                      	rcall	mac16x16_32_method_B
                                 
000a9d ff37                      	sbrs	R19,7
000a9e c004                      	rjmp	sensors_calc_vol_pos
000a9f 2733                      	clr		R19
000aa0 2722                      	clr		R18
000aa1 2711                      	clr		R17
000aa2 2700                      	clr		R16
                                 sensors_calc_vol_pos:
000aa3 9300 2d69                 	sts		sensors_volume_value,R16
000aa5 9310 2d6a                 	sts		sensors_volume_value+1,R17
000aa7 9320 2d6b                 	sts		sensors_volume_value+2,R18
000aa9 9330 2d6c                 	sts		sensors_volume_value+3,R19
000aab 9508                      	ret
                                 
                                 
                                 
                                 
                                 sensors_offset_flow_cal:
000aac 90d0 2d89                 	lds		R13,sensors_flow_offset_cal+3
000aae 90c0 2d88                 	lds		R12,sensors_flow_offset_cal+2
000ab0 90b0 2d87                 	lds		R11,sensors_flow_offset_cal+1
000ab2 90a0 2d86                 	lds		R10,sensors_flow_offset_cal+0
000ab4 19ca                      	sub		YL,R10
000ab5 09db                      	sbc		YH,R11
000ab6 09ac                      	sbc		XL,R12
000ab7 09bd                      	sbc		XH,R13
000ab8 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 sensors_volume_reset:
000ab9 e000                      	ldi		R16,0
000aba 9300 2d69                 	sts		sensors_volume_value,R16			; clear volume data
000abc 9300 2d6a                 	sts		sensors_volume_value+1,R16
000abe 9300 2d6b                 	sts		sensors_volume_value+2,R16
000ac0 9300 2d6c                 	sts		sensors_volume_value+3,R16
000ac2 9508                      	ret
                                 
                                 
                                 
                                 sensors_max_reset:
000ac3 90a0 2cb3                 	lds		R10,sensors_pressure_value
000ac5 90b0 2cb4                 	lds		R11,sensors_pressure_value+1
000ac7 90c0 2cb5                 	lds		R12,sensors_pressure_value+2
000ac9 90d0 2cb6                 	lds		R13,sensors_pressure_value+3
000acb 92a0 2d6d                 	sts		sensors_pressure_max,R10
000acd 92b0 2d6e                 	sts		sensors_pressure_max+1,R11
000acf 92c0 2d6f                 	sts		sensors_pressure_max+2,R12
000ad1 92d0 2d70                 	sts		sensors_pressure_max+3,R13
000ad3 92a0 2d79                 	sts		sensors_pressure_ini,R10
000ad5 92b0 2d7a                 	sts		sensors_pressure_ini+1,R11
000ad7 92c0 2d7b                 	sts		sensors_pressure_ini+2,R12
000ad9 92d0 2d7c                 	sts		sensors_pressure_ini+3,R13
                                 
000adb 90a0 2cd7                 	lds		R10,sensors_flow_value
000add 90b0 2cd8                 	lds		R11,sensors_flow_value+1
000adf 90c0 2cd9                 	lds		R12,sensors_flow_value+2
000ae1 90d0 2cda                 	lds		R13,sensors_flow_value+3
000ae3 92a0 2d71                 	sts		sensors_flow_max,R10
000ae5 92b0 2d72                 	sts		sensors_flow_max+1,R11
000ae7 92c0 2d73                 	sts		sensors_flow_max+2,R12
000ae9 92d0 2d74                 	sts		sensors_flow_max+3,R13
000aeb 92a0 2d7d                 	sts		sensors_flow_ini,R10
000aed 92b0 2d7e                 	sts		sensors_flow_ini+1,R11
000aef 92c0 2d7f                 	sts		sensors_flow_ini+2,R12
000af1 92d0 2d80                 	sts		sensors_flow_ini+3,R13
                                 
000af3 90a0 2d69                 	lds		R10,sensors_volume_value
000af5 90b0 2d6a                 	lds		R11,sensors_volume_value+1
000af7 90c0 2d6b                 	lds		R12,sensors_volume_value+2
000af9 90d0 2d6c                 	lds		R13,sensors_volume_value+3
000afb 92a0 2d75                 	sts		sensors_volume_max,R10
000afd 92b0 2d76                 	sts		sensors_volume_max+1,R11
000aff 92c0 2d77                 	sts		sensors_volume_max+2,R12
000b01 92d0 2d78                 	sts		sensors_volume_max+3,R13
000b03 92a0 2d81                 	sts		sensors_volume_ini,R10
000b05 92b0 2d82                 	sts		sensors_volume_ini+1,R11
000b07 92c0 2d83                 	sts		sensors_volume_ini+2,R12
000b09 92d0 2d84                 	sts		sensors_volume_ini+3,R13
                                 
000b0b 9508                      	ret
                                 
                                 
                                 
                                 sensors_calc_max:
000b0c 90a0 2cb3                 	lds		R10,sensors_pressure_value
000b0e 90b0 2cb4                 	lds		R11,sensors_pressure_value+1
000b10 90c0 2cb5                 	lds		R12,sensors_pressure_value+2
000b12 90d0 2cb6                 	lds		R13,sensors_pressure_value+3
000b14 9000 2d6d                 	lds		R0,sensors_pressure_max
000b16 9010 2d6e                 	lds		R1,sensors_pressure_max+1
000b18 9020 2d6f                 	lds		R2,sensors_pressure_max+2
000b1a 9030 2d70                 	lds		R3,sensors_pressure_max+3
000b1c 180a                      	sub		R0,R10
000b1d 081b                      	sbc		R1,R11
000b1e 082c                      	sbc		R2,R12
000b1f 083d                      	sbc		R3,R13
000b20 f444                      	brge	sensors_calc_max_pressure
000b21 92a0 2d6d                 	sts		sensors_pressure_max,R10
000b23 92b0 2d6e                 	sts		sensors_pressure_max+1,R11
000b25 92c0 2d6f                 	sts		sensors_pressure_max+2,R12
000b27 92d0 2d70                 	sts		sensors_pressure_max+3,R13
                                 sensors_calc_max_pressure:
                                 
000b29 90a0 2cd7                 	lds		R10,sensors_flow_value
000b2b 90b0 2cd8                 	lds		R11,sensors_flow_value+1
000b2d 90c0 2cd9                 	lds		R12,sensors_flow_value+2
000b2f 90d0 2cda                 	lds		R13,sensors_flow_value+3
000b31 9000 2d71                 	lds		R0,sensors_flow_max
000b33 9010 2d72                 	lds		R1,sensors_flow_max+1
000b35 9020 2d73                 	lds		R2,sensors_flow_max+2
000b37 9030 2d74                 	lds		R3,sensors_flow_max+3
000b39 180a                      	sub		R0,R10
000b3a 081b                      	sbc		R1,R11
000b3b 082c                      	sbc		R2,R12
000b3c 083d                      	sbc		R3,R13
000b3d f444                      	brge	sensors_calc_max_flow
000b3e 92a0 2d71                 	sts		sensors_flow_max,R10
000b40 92b0 2d72                 	sts		sensors_flow_max+1,R11
000b42 92c0 2d73                 	sts		sensors_flow_max+2,R12
000b44 92d0 2d74                 	sts		sensors_flow_max+3,R13
                                 sensors_calc_max_flow:
                                 
000b46 90a0 2d69                 	lds		R10,sensors_volume_value
000b48 90b0 2d6a                 	lds		R11,sensors_volume_value+1
000b4a 90c0 2d6b                 	lds		R12,sensors_volume_value+2
000b4c 90d0 2d6c                 	lds		R13,sensors_volume_value+3
000b4e 9000 2d75                 	lds		R0,sensors_volume_max
000b50 9010 2d76                 	lds		R1,sensors_volume_max+1
000b52 9020 2d77                 	lds		R2,sensors_volume_max+2
000b54 9030 2d78                 	lds		R3,sensors_volume_max+3
000b56 180a                      	sub		R0,R10
000b57 081b                      	sbc		R1,R11
000b58 082c                      	sbc		R2,R12
000b59 083d                      	sbc		R3,R13
000b5a f444                      	brge	sensors_calc_max_volume
000b5b 92a0 2d75                 	sts		sensors_volume_max,R10
000b5d 92b0 2d76                 	sts		sensors_volume_max+1,R11
000b5f 92c0 2d77                 	sts		sensors_volume_max+2,R12
000b61 92d0 2d78                 	sts		sensors_volume_max+3,R13
                                 sensors_calc_max_volume:
                                 
000b63 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 .equ	bat_adc_RX_BUFFER_LEN = 16
                                 .equ	bat_adc_rx_TIMEOUT_ms = 100
                                 .equ	bat_adc_TIMEOUT_cs = 200
                                 
                                 .dseg
002da7                           bat_adc_rx_buffer:	.byte bat_adc_RX_BUFFER_LEN
002db7                           bat_adc_rx_ptrwr:	.byte 1
002db8                           bat_adc_rx_ptrrd:	.byte 1
002db9                           bat_adc_rx_tmr_ms:	.byte 1
002dba                           bat_adc_tmr_cs:		.byte 1
002dbb                           bat_adc_tmp:		.byte 1
002dbc                           bat_adc_data:		.byte 2
                                 
                                 
                                 .cseg
                                 sensors_serial_task:
000b64 d024                      	rcall	sensors_serial_init
                                 sensors_serial_task_loop_reset_tout:
000b65 ec08                      	ldi		R16,bat_adc_TIMEOUT_cs
000b66 9300 2dba                 	sts		bat_adc_tmr_cs,R16
                                 sensors_serial_task_loop:
000b68 9100 2dba                 	lds		R16,bat_adc_tmr_cs					; check timeout
000b6a 3000                      	cpi		R16,0
000b6b f3c1                      	breq	sensors_serial_task
                                 
000b6c d05c                      	rcall	bat_adc_rx_byte_tout				; header 0x5a,0xa5
000b6d f7d1                      	brne	sensors_serial_task_loop
                                 sensors_serial_task_loop1:
000b6e 350a                      	cpi		R16,0x5a
000b6f f7c1                      	brne	sensors_serial_task_loop
                                 
000b70 d058                      	rcall	bat_adc_rx_byte_tout
000b71 f7b1                      	brne	sensors_serial_task_loop
000b72 3a05                      	cpi		R16,0xa5
000b73 f7d1                      	brne	sensors_serial_task_loop1
                                 
000b74 d054                      	rcall	bat_adc_rx_byte_tout				; len 3
000b75 f791                      	brne	sensors_serial_task_loop
000b76 3003                      	cpi		R16,0x3
000b77 f7b1                      	brne	sensors_serial_task_loop1
                                 
000b78 d050                      	rcall	bat_adc_rx_byte_tout				; cmd 0x11
000b79 f771                      	brne	sensors_serial_task_loop
000b7a 3101                      	cpi		R16,0x11
000b7b f791                      	brne	sensors_serial_task_loop1
                                 
000b7c d04c                      	rcall	bat_adc_rx_byte_tout				; data low-high
000b7d f751                      	brne	sensors_serial_task_loop
000b7e 9300 2dbb                 	sts		bat_adc_tmp,R16
000b80 d048                      	rcall	bat_adc_rx_byte_tout
000b81 f731                      	brne	sensors_serial_task_loop
000b82 9300 2dbd                 	sts		bat_adc_data+1,R16
000b84 9100 2dbb                 	lds		R16,bat_adc_tmp
000b86 9300 2dbc                 	sts		bat_adc_data,R16
                                 
000b88 cfdc                      	rjmp	sensors_serial_task_loop_reset_tout
                                 
                                 
                                 sensors_serial_init:
000b89 e001                      	ldi		R16,0x01							; bat sens power off
000b8a 9300 0446                 	sts		PORTC_OUTCLR,R16
                                 
000b8c 2700                      	clr		R16
000b8d 9300 0825                 	sts		USART1_CTRLA,R16					; disable interrupts
000b8f 9300 2db7                 	sts		bat_adc_rx_ptrwr,R16				; clear buffer pointers
000b91 9300 2db8                 	sts		bat_adc_rx_ptrrd,R16
000b93 9300 2dbd                 	sts		bat_adc_data+1,R16					; battery to zero at reset
000b95 9300 2dbc                 	sts		bat_adc_data,R16
                                 
000b97 e604                      	ldi		R16,100								; wait 1 second
000b98 d051                      	rcall	bat_adc_delay_cs
                                 
000b99 e001                      	ldi		R16,0x01							; bat sens power enable
000b9a 9300 0445                 	sts		PORTC_OUTSET,R16
                                 
                                 
000b9c e000                      	ldi		R16, low(64*fosc/(bat_adc_BPS*16))	; set baudrate
000b9d e11e                      	ldi		R17, high(64*fosc/(bat_adc_BPS*16))
000b9e 9300 0828                 	sts		USART1_BAUDL,R16				
000ba0 9310 0829                 	sts		USART1_BAUDH,R17
                                 
000ba2 e003                      	ldi		R16,0x03							; Async mode, parity disable, 
000ba3 9300 0827                 	sts		USART1_CTRLC,R16					; 1 stop bit, 8 bits
                                 
000ba5 e800                      	ldi		R16,USART_RXCIE_bm					; rxcie interrupt
000ba6 9300 0825                 	sts		USART1_CTRLA,R16
000ba8 e800                      	ldi		R16,USART_RXEN_bm						; Enable receiver
000ba9 9300 0826                 	sts		USART1_CTRLB,R16					; Normal mode
000bab 9508                      	ret
                                 
                                 
                                 bat_adc_isr_rxc:
000bac 930f                      	push	R16
000bad b70f                      	in		R16,CPU_SREG
000bae 930f                      	push	R16
000baf 93af                      	push	XL
000bb0 93bf                      	push	XH
                                 
000bb1 e2bd                      	ldi		XH,high(bat_adc_rx_buffer)
000bb2 eaa7                      	ldi		XL,low(bat_adc_rx_buffer)
000bb3 9100 2db7                 	lds		R16,bat_adc_rx_ptrwr
000bb5 0fa0                      	add		XL,R16
000bb6 e000                      	ldi		R16,0
000bb7 1fb0                      	adc		XH,R16
000bb8 9100 0820                 	lds		R16,USART1_RXDATAL
000bba 930c                      	st		X,R16
                                 
000bbb 9100 2db7                 	lds		R16,bat_adc_rx_ptrwr
000bbd 9503                      	inc		R16
000bbe 3100                      	cpi		R16,bat_adc_RX_BUFFER_LEN
000bbf f008                      	brlo	bat_adc_isr_rxc_ovf
000bc0 e000                      	ldi		R16,0
                                 bat_adc_isr_rxc_ovf:
000bc1 9300 2db7                 	sts		bat_adc_rx_ptrwr,R16
                                 
000bc3 91bf                      	pop		XH
000bc4 91af                      	pop		XL
000bc5 910f                      	pop		R16
000bc6 bf0f                      	out		CPU_SREG,R16
000bc7 910f                      	pop		R16
000bc8 9518                      	reti
                                 
                                 
                                 bat_adc_rx_byte_tout:
000bc9 e604                      	ldi		R16,bat_adc_rx_TIMEOUT_ms
000bca 9300 2db9                 	sts		bat_adc_rx_tmr_ms,R16
                                 bat_adc_rx_byte_tout_loop:
000bcc 940e 00fc                 	task_change
000bce 9100 2db8                 	lds		R16,bat_adc_rx_ptrrd
000bd0 9110 2db7                 	lds		R17,bat_adc_rx_ptrwr
000bd2 1701                      	cp		R16,R17
000bd3 f431                      	brne	bat_adc_rx_byte_tout_data
000bd4 9100 2db9                 	lds		R16,bat_adc_rx_tmr_ms
000bd6 3000                      	cpi		R16,0
000bd7 f7a1                      	brne	bat_adc_rx_byte_tout_loop
000bd8 9498                      	clz
000bd9 c00f                      	rjmp	bat_adc_rx_byte_tout_ret
                                 bat_adc_rx_byte_tout_data:
000bda e2bd                      	ldi		XH,high(bat_adc_rx_buffer)
000bdb eaa7                      	ldi		XL,low(bat_adc_rx_buffer)
000bdc 0fa0                      	add		XL,R16
000bdd e000                      	ldi		R16,0
000bde 1fb0                      	adc		XH,R16
000bdf 910c                      	ld		R16,X
000be0 9110 2db8                 	lds		R17,bat_adc_rx_ptrrd
000be2 9513                      	inc		R17
000be3 3110                      	cpi		R17,bat_adc_RX_BUFFER_LEN
000be4 f008                      	brlo	bat_adc_rx_byte_tout_ovf
000be5 e010                      	ldi		R17,0
                                 bat_adc_rx_byte_tout_ovf:
000be6 9310 2db8                 	sts		bat_adc_rx_ptrrd,R17
000be8 9418                      	sez
                                 bat_adc_rx_byte_tout_ret:
000be9 9508                      	ret
                                 
                                 
                                 bat_adc_delay_cs:
000bea 9300 2dba                 	sts		bat_adc_tmr_cs,R16
                                 bat_adc_delay_cs_loop:
000bec 940e 00fc                 	task_change
000bee 9100 2dba                 	lds		R16,bat_adc_tmr_cs
000bf0 3000                      	cpi		R16,0
000bf1 f7d1                      	brne	bat_adc_delay_cs_loop
000bf2 9508                      	ret
                                 
                                 
                                 
                                 
                                 ; sez -> OK
                                 ; clz -> ALARM
                                 check_alarms:
000bf3 9100 2ca0                 	lds		R16,stepper_alarm						; skip if alarm detected
000bf5 fd01                      	sbrc	R16,1
000bf6 c046                      	rjmp	check_alarms_ko
                                 
000bf7 94f8
000bf8 91a0 2c9e
000bfa 91b0 2c9f
000bfc 9478                      	stepper_read_pos
000bfd 91c0 148e                 	lds		YL,EEPROM_START+ee_pos_alarm_thr		; inspection position
000bff 91d0 148f                 	lds		YH,EEPROM_START+ee_pos_alarm_thr+1
000c01 1bac                      	sub		XL,YL
000c02 0bbd                      	sbc		XH,YH
000c03 f1bc                      	brlt	check_alarms_ok
                                 
000c04 91b0 2d70                 	lds		XH,sensors_pressure_max+3				; pressure
000c06 91a0 2d6f                 	lds		XL,sensors_pressure_max+2
000c08 91d0 2d7c                 	lds		YH,sensors_pressure_ini+3
000c0a 91c0 2d7b                 	lds		YL,sensors_pressure_ini+2
000c0c d03c                      	rcall	sensor_limit_range
000c0d 2f1a                      	mov		R17,XL
000c0e 91b0 2d74                 	lds		XH,sensors_flow_max+3					; flow
000c10 91a0 2d73                 	lds		XL,sensors_flow_max+2
000c12 91d0 2d80                 	lds		YH,sensors_flow_ini+3
000c14 91c0 2d7f                 	lds		YL,sensors_flow_ini+2
000c16 d032                      	rcall	sensor_limit_range
                                 
000c17 3011                      	cpi		R17,1									; sensor disconnect: pressure and flow low
000c18 f434                      	brge	check_alarm_no_sensors
000c19 30a1                      	cpi		XL,1
000c1a f424                      	brge	check_alarm_no_sensors
000c1b e001                      	ldi		R16,1
000c1c 9300 2ca4                 	sts		stepper_sensors_alarm,R16
000c1e c01e                      	rjmp	check_alarms_ko
                                 check_alarm_no_sensors:
                                 
000c1f 9100 1490                 	lds		R16,EEPROM_START+ee_dis_alarm_pres_thr	; patient disconnect: pressure low, flow high
000c21 3000                      	cpi		R16,0
000c22 f051                      	breq	check_alarm_no_disconnect
000c23 1710                      	cp		R17,R16
000c24 f444                      	brge	check_alarm_no_disconnect
000c25 9100 1491                 	lds		R16,EEPROM_START+ee_dis_alarm_flow_thr
000c27 17a0                      	cp		XL,R16
000c28 f024                      	brlt	check_alarm_no_disconnect
000c29 e001                      	ldi		R16,1
000c2a 9300 2ca5                 	sts		stepper_disconnect_alarm,R16
000c2c c010                      	rjmp	check_alarms_ko
                                 check_alarm_no_disconnect:
                                 
000c2d 9100 1492                 	lds		R16,EEPROM_START+ee_obs_alarm_pres_thr	; obstruction: pressure high, flow low
000c2f 3000                      	cpi		R16,0
000c30 f051                      	breq	check_alarm_no_obstruction
000c31 1710                      	cp		R17,R16
000c32 f044                      	brlt	check_alarm_no_obstruction
000c33 9100 1493                 	lds		R16,EEPROM_START+ee_obs_alarm_flow_thr
000c35 17a0                      	cp		XL,R16
000c36 f424                      	brge	check_alarm_no_obstruction
000c37 e001                      	ldi		R16,1
000c38 9300 2ca6                 	sts		stepper_obstruction_alarm,R16
000c3a c002                      	rjmp	check_alarms_ko
                                 check_alarm_no_obstruction:
                                 
                                 /*	mul		XL,R17								; flow power
                                 	ldi		YH,high(2100)		; 1400
                                 	ldi		YL,low(2100)
                                 	cp		R0,YL
                                 	cpc		R1,YH
                                 	brlo	check_alarms_no_ovl
                                 	ldi		R16,1
                                 	sts		stepper_obstruction_alarm,R16
                                 	rjmp	check_alarms_ko
                                 check_alarms_no_ovl:
                                 */
                                 
                                 check_alarms_ok:
000c3b 9418                      	sez
000c3c c00b                      	rjmp	check_alarms_ret
                                 check_alarms_ko:
000c3d 9100 2ca0                 	lds		R16,stepper_alarm					; set alarm flag
000c3f 6002                      	ori		R16,$02
000c40 9300 2ca0                 	sts		stepper_alarm,R16
000c42 e000                      	ldi		R16,0								; stop motor
000c43 9300 2c9a                 	sts		stepper_speed_sp,R16
000c45 9300 2c9b                 	sts		stepper_speed_sp+1,R16
000c47 9498                      	clz
                                 check_alarms_ret:
000c48 9508                      	ret
                                 
                                 
                                 sensor_limit_range:
000c49 1bac                      	sub		XL,YL						; max-min
000c4a 0bbd                      	sbc		XH,YH
000c4b f034                      	brlt	sensor_limit_range_neg
000c4c 30b0                      	cpi		XH,0
000c4d f411                      	brne	sensor_limit_range_top
000c4e ffa7                      	sbrs	XL,7
000c4f c007                      	rjmp	sensor_limit_range_ret
                                 sensor_limit_range_top:
000c50 e7af                      	ldi		XL,0x7f
000c51 c005                      	rjmp	sensor_limit_range_ret
                                 sensor_limit_range_neg:
000c52 3fbf                      	cpi		XH,0xff
000c53 f411                      	brne	sensor_limit_range_bottom
000c54 38a0                      	cpi		XL,0x80
000c55 f408                      	brsh	sensor_limit_range_ret
                                 sensor_limit_range_bottom:
000c56 e8a0                      	ldi		XL,0x80
                                 sensor_limit_range_ret:
000c57 9508                      	ret
                                 .include "screen.asm"
                                 
                                  * screen.asm
                                  *
                                  *  Created: 12/05/2020 09:50:13 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 
                                 ;	PF0: (HI-Z)		screen tx. usart 2
                                 ;   PF1: (HI-Z)     screen rx. usart 2
                                 .equ	screen_BPS = 115200
                                 .equ	screen_RX_BUFFER_LEN = 64
                                 .equ	screen_rx_TIMEOUT_ms = 100
                                 
                                 .dseg
002dbe                           screen_rx_buffer:	.byte screen_RX_BUFFER_LEN
002dfe                           screen_rx_ptrwr:	.byte 1
002dff                           screen_rx_ptrrd:	.byte 1
002e00                           screen_tx_tmr_ms:	.byte 1
002e01                           screen_rx_tmr_ms:	.byte 1
002e02                           screen_cmd_buffer:	.byte 2+screen_RX_BUFFER_LEN
002e44                           vent_mode_data:		.byte screen_RX_BUFFER_LEN
002e84                           screen_send_status:	.byte 1
                                 
                                 .cseg
                                 screen_task:
000c58 d00d                      	rcall	screen_init
                                 screen_loop:
000c59 d149                      	rcall	screen_rx_frame
000c5a d165                      	rcall	screen_cmd_stop
000c5b d170                      	rcall	screen_cmd_vc_cmv
000c5c d17c                      	rcall	screen_cmd_pc_cmv
000c5d d188                      	rcall	screen_cmd_psv
000c5e d19c                      	rcall	screen_cmd_shutdown
000c5f d1ab                      	rcall	screen_cmd_buzzer
000c60 d1c1                      	rcall	screen_cmd_status_sensors
000c61 d1cc                      	rcall	screen_cmd_calibra_O2
000c62 d227                      	rcall	screen_cmd_autotest
000c63 d232                      	rcall	screen_cmd_ee_write
000c64 d273                      	rcall	screen_cmd_ee_read
000c65 cff3                      	rjmp	screen_loop
                                 
                                 
                                 
                                 
                                 screen_init:
000c66 ef0a                      	ldi		R16,250
000c67 d286                      	rcall	screen_delay_ms
                                 
000c68 e400                      	ldi		R16,0x40							; screeen power enable
000c69 9300 0465                 	sts		PORTD_OUTSET,R16
                                 
000c6b 2700                      	clr		R16
000c6c 9300 0845                 	sts		USART2_CTRLA,R16					; disable interrupts
000c6e 9300 2dfe                 	sts		screen_rx_ptrwr,R16					; clear buffer pointers
000c70 9300 2dff                 	sts		screen_rx_ptrrd,R16
000c72 9300 2e84                 	sts		screen_send_status,R16
                                 
000c74 e001                      	ldi		R16,0x01							; init tx(PF0)
000c75 9300 04a5                 	sts		PORTF_OUTSET,R16
000c77 9300 04a1                 	sts		PORTF_DIRSET,R16
000c79 e000                      	ldi		R16,0x00
000c7a 9300 04b0                 	sts		PORTF_PIN0CTRL,R16
000c7c e002                      	ldi		R16,0x02							; init rx(PF1)
000c7d 9300 04a6                 	sts		PORTF_OUTCLR,R16
000c7f 9300 04a2                 	sts		PORTF_DIRCLR,R16
000c81 e000                      	ldi		R16,0x00
000c82 9300 04b1                 	sts		PORTF_PIN1CTRL,R16
                                 
000c84 e800                      	ldi		R16, low(64*fosc/(screen_BPS*16))	; set baudrate
000c85 e012                      	ldi		R17, high(64*fosc/(screen_BPS*16))
000c86 9300 0848                 	sts		USART2_BAUDL,R16				
000c88 9310 0849                 	sts		USART2_BAUDH,R17
                                 
000c8a e003                      	ldi		R16,0x03							; Async mode, parity disable, 
000c8b 9300 0847                 	sts		USART2_CTRLC,R16					; 1 stop bit, 8 bits
                                 
000c8d e800                      	ldi		R16,USART_RXCIE_bm					; rxcie interrupt
000c8e 9300 0845                 	sts		USART2_CTRLA,R16
000c90 ec00                      	ldi		R16,0xc0							; Enable receiver and transmitter
000c91 9300 0846                 	sts		USART2_CTRLB,R16					; Normal mode
000c93 9508                      	ret
                                 
                                 
                                 
                                 screen_isr_rxc:
000c94 930f                      	push	R16
000c95 b70f                      	in		R16,CPU_SREG
000c96 930f                      	push	R16
000c97 93af                      	push	XL
000c98 93bf                      	push	XH
                                 
000c99 e2bd                      	ldi		XH,high(screen_rx_buffer)
000c9a ebae                      	ldi		XL,low(screen_rx_buffer)
000c9b 9100 2dfe                 	lds		R16,screen_rx_ptrwr
000c9d 0fa0                      	add		XL,R16
000c9e e000                      	ldi		R16,0
000c9f 1fb0                      	adc		XH,R16
000ca0 9100 0840                 	lds		R16,USART2_RXDATAL
000ca2 930c                      	st		X,R16
000ca3 9100 2dfe                 	lds		R16,screen_rx_ptrwr
000ca5 9503                      	inc		R16
000ca6 3400                      	cpi		R16,screen_RX_BUFFER_LEN
000ca7 f008                      	brlo	screen_isr_rxc_ovf
000ca8 e000                      	ldi		R16,0
                                 screen_isr_rxc_ovf:
000ca9 9300 2dfe                 	sts		screen_rx_ptrwr,R16
                                 
000cab 91bf                      	pop		XH
000cac 91af                      	pop		XL
000cad 910f                      	pop		R16
000cae bf0f                      	out		CPU_SREG,R16
000caf 910f                      	pop		R16
000cb0 9518                      	reti
                                 
                                 
                                 
                                 screen_rx_byte_tout:
000cb1 e604                      	ldi		R16,screen_rx_TIMEOUT_ms
000cb2 9300 2e01                 	sts		screen_rx_tmr_ms,R16
                                 screen_rx_byte_tout_loop:
000cb4 940e 00fc                 	task_change
000cb6 9100 2dff                 	lds		R16,screen_rx_ptrrd
000cb8 9110 2dfe                 	lds		R17,screen_rx_ptrwr
000cba 1701                      	cp		R16,R17
000cbb f431                      	brne	screen_rx_byte_tout_data
000cbc 9100 2e01                 	lds		R16,screen_rx_tmr_ms
000cbe 3000                      	cpi		R16,0
000cbf f7a1                      	brne	screen_rx_byte_tout_loop
000cc0 9498                      	clz
000cc1 c00f                      	rjmp	screen_rx_byte_tout_ret
                                 screen_rx_byte_tout_data:
000cc2 e2bd                      	ldi		XH,high(screen_rx_buffer)
000cc3 ebae                      	ldi		XL,low(screen_rx_buffer)
000cc4 0fa0                      	add		XL,R16
000cc5 e000                      	ldi		R16,0
000cc6 1fb0                      	adc		XH,R16
000cc7 910c                      	ld		R16,X
000cc8 9110 2dff                 	lds		R17,screen_rx_ptrrd
000cca 9513                      	inc		R17
000ccb 3410                      	cpi		R17,screen_RX_BUFFER_LEN
000ccc f008                      	brlo	screen_rx_byte_tout_ovf
000ccd e010                      	ldi		R17,0
                                 screen_rx_byte_tout_ovf:
000cce 9310 2dff                 	sts		screen_rx_ptrrd,R17
000cd0 9418                      	sez
                                 screen_rx_byte_tout_ret:
000cd1 9508                      	ret
                                 
                                 screen_tx_byte:
000cd2 930f                      	push	R16
                                 screen_tx_byte_Lazo:
000cd3 9100 0844                 	lds		R16,USART2_STATUS
000cd5 fd05                      	sbrc	R16,USART_DREIF_bp
000cd6 c003                      	rjmp	screen_tx_byte_tx
000cd7 940e 00fc                 	task_change
000cd9 cff9                      	rjmp	screen_tx_byte_Lazo
                                 screen_tx_byte_tx:
000cda 910f                      	pop		R16
000cdb 9300 0842                 	sts		USART2_TXDATAL,R16
000cdd 9508                      	ret
                                 
                                 
                                 screen_wait_txc:
000cde e400                      	ldi		R16,USART_TXCIF_bm				; clear txc flag
000cdf 9300 0844                 	sts		USART2_STATUS,R16
                                 screen_wait_txc_loop:
000ce1 940e 00fc                 	task_change
000ce3 9100 0844                 	lds		R16,USART2_STATUS
000ce5 ff06                      	sbrs	R16,USART_TXCIF_bp
000ce6 cffa                      	rjmp	screen_wait_txc_loop
000ce7 9508                      	ret
                                 
                                 
                                 
                                 
                                 screen_tx_header:
000ce8 e50a                      	ldi		R16,$5a
000ce9 dfe8                      	rcall	screen_tx_byte
000cea ea05                      	ldi		R16,$a5
000ceb dfe6                      	rcall	screen_tx_byte
000cec 9508                      	ret
                                 
                                 
                                 screen_tx_float:
000ced 910d                      	ld		R16,X+
000cee 911d                      	ld		R17,X+
000cef 912d                      	ld		R18,X+
000cf0 913d                      	ld		R19,X+
                                 
000cf1 940e 04a4                 	call	int16_16_to_float
                                 
000cf3 933f                      	push	R19
000cf4 932f                      	push	R18
000cf5 931f                      	push	R17
000cf6 dfdb                      	rcall	screen_tx_byte
000cf7 910f                      	pop		R16
000cf8 dfd9                      	rcall	screen_tx_byte
000cf9 910f                      	pop		R16
000cfa dfd7                      	rcall	screen_tx_byte
000cfb 910f                      	pop		R16
000cfc dfd5                      	rcall	screen_tx_byte
000cfd 9508                      	ret
                                 
                                 
                                 
                                 screen_check_data_tx:
000cfe 9100 2e00                 	lds		R16,screen_tx_tmr_ms
000d00 3000                      	cpi		R16,0
000d01 f421                      	brne	screen_check_data_tx_ret
000d02 e00a                      	ldi		R16,10
000d03 9300 2e00                 	sts		screen_tx_tmr_ms,R16
                                 
000d05 d001                      	rcall	screen_tx_data_PFV
                                 
                                 screen_check_data_tx_ret:
000d06 9508                      	ret
                                 
                                 
                                 
                                 
                                 screen_tx_data_PFV:
000d07 e001                      	ldi		R16,1
000d08 9300 2c97                 	sts		debug_print,R16
                                 
000d0a 940e 1948                 	call	chk_power_button
                                 
000d0c ddff                      	rcall	sensors_calc_max
                                 
000d0d dfda                      	rcall	screen_tx_header
                                 
000d0e e00d                      	ldi		R16,1+12
000d0f dfc2                      	rcall	screen_tx_byte
000d10 ea01                      	ldi		R16,$a1
000d11 dfc0                      	rcall	screen_tx_byte
                                 
000d12 e2bc                      	ldi		XH,high(sensors_pressure_value)
000d13 eba3                      	ldi		XL,low(sensors_pressure_value)
000d14 dfd8                      	rcall	screen_tx_float
                                 
000d15 e2bc                      	ldi		XH,high(sensors_flow_value)
000d16 eda7                      	ldi		XL,low(sensors_flow_value)
000d17 dfd5                      	rcall	screen_tx_float
                                 
000d18 e2bd                      	ldi		XH,high(sensors_volume_value)
000d19 e6a9                      	ldi		XL,low(sensors_volume_value)
000d1a dfd2                      	rcall	screen_tx_float
                                 
                                 
000d1b 9100 2e84                 	lds		R16,screen_send_status
000d1d 3001                      	cpi		R16,1
000d1e f421                      	brne	screen_tx_data_PFV_ret
000d1f e000                      	ldi		R16,0
000d20 9300 2e84                 	sts		screen_send_status,R16
000d22 d00f                      	rcall	screen_tx_data_sensors
                                 screen_tx_data_PFV_ret:
000d23 9508                      	ret
                                 
                                 
                                 
                                 screen_tx_event:
000d24 930f                      	push	R16
000d25 dfc2                      	rcall	screen_tx_header
                                 
000d26 e003                      	ldi		R16,1+2
000d27 dfaa                      	rcall	screen_tx_byte
000d28 ea03                      	ldi		R16,$a3
000d29 dfa8                      	rcall	screen_tx_byte
                                 
000d2a 910f                      	pop		R16
000d2b dfa6                      	rcall	screen_tx_byte
                                 
000d2c 9100 2ef7                 	lds		R16,flow_apnea
000d2e e011                      	ldi		R17,1
000d2f 2701                      	eor		R16,R17
000d30 dfa1                      	rcall	screen_tx_byte
                                 
000d31 9508                      	ret
                                 
                                 
                                 
                                 
                                 screen_tx_data_sensors:
000d32 dfb5                      	rcall	screen_tx_header
                                 
000d33 e00f                      	ldi		R16,1+14
000d34 df9d                      	rcall	screen_tx_byte
000d35 ea04                      	ldi		R16,$a4
000d36 df9b                      	rcall	screen_tx_byte
                                 
                                 ;	lds		R16,sensors_oxygen_value+2		; oxygen
000d37 dc97                      	rcall	sensors_o2_cal
000d38 2400                      	clr		R0
000d39 2f0a                      	mov		R16,XL
000d3a 0fdd                      	lsl		YH
000d3b 1d00                      	adc		R16,R0
000d3c df95                      	rcall	screen_tx_byte
                                 
000d3d 9100 2dbd                 	lds		R16,bat_adc_data+1				; Bat hi-lo
000d3f df92                      	rcall	screen_tx_byte
000d40 9100 2dbc                 	lds		R16,bat_adc_data
000d42 df8f                      	rcall	screen_tx_byte
                                 
000d43 9100 2d61                 	lds		R16,sensors_current_value+2		; current
000d45 df8c                      	rcall	screen_tx_byte
000d46 9100 2d62                 	lds		R16,sensors_current_value+3
000d48 df89                      	rcall	screen_tx_byte
                                 
000d49 9110 0428                 	lds		R17,PORTB_IN					; AC
000d4b e000                      	ldi		R16,0
000d4c ff15                      	sbrs	R17,5
000d4d e001                      	ldi		R16,1
000d4e df83                      	rcall	screen_tx_byte
                                 
000d4f 9100 2ca1                 	lds		R16,stepper_pressure_alarm		; pressure alarm
000d51 df80                      	rcall	screen_tx_byte
                                 
000d52 9100 2ca2                 	lds		R16,stepper_flow_alarm			; flow alarm
000d54 df7d                      	rcall	screen_tx_byte
                                 
000d55 9100 2ca3                 	lds		R16,stepper_pos_alarm			; position alarm
000d57 df7a                      	rcall	screen_tx_byte
                                 
000d58 9100 2ef7                 	lds		R16,flow_apnea					; apnea alarm
000d5a df77                      	rcall	screen_tx_byte
                                 
000d5b 9100 2ca4                 	lds		R16,stepper_sensors_alarm		; sensors alarm
000d5d df74                      	rcall	screen_tx_byte
                                 
000d5e 9100 2ca5                 	lds		R16,stepper_disconnect_alarm	; disconecction alarm
000d60 df71                      	rcall	screen_tx_byte
                                 
000d61 9100 2ca6                 	lds		R16,stepper_obstruction_alarm	; obstruction alarm
000d63 9110 2ca7                 	lds		R17,stepper_resistance_alarm
000d65 2b01                      	or		R16,R17
000d66 df6b                      	rcall	screen_tx_byte
                                 
000d67 9100 2f2a                 	lds		R16,vent_mode					; ventilation mode
000d69 df68                      	rcall	screen_tx_byte
                                 
000d6a 9508                      	ret
                                 
                                 
                                 
                                 
                                 screen_tx_shut_down:
000d6b df7c                      	rcall	screen_tx_header
                                 
000d6c e002                      	ldi		R16,1+1
000d6d df64                      	rcall	screen_tx_byte
000d6e ea05                      	ldi		R16,$a5
000d6f df62                      	rcall	screen_tx_byte
                                 
000d70 e505                      	ldi		R16,0x55
000d71 df60                      	rcall	screen_tx_byte
000d72 9508                      	ret
                                 
                                 
                                 
                                 screen_tx_ack_O2:
000d73 930f                      	push	R16
000d74 df73                      	rcall	screen_tx_header
                                 
000d75 e002                      	ldi		R16,1+1
000d76 df5b                      	rcall	screen_tx_byte
000d77 ea06                      	ldi		R16,$a6
000d78 df59                      	rcall	screen_tx_byte
                                 
000d79 910f                      	pop		R16
000d7a df57                      	rcall	screen_tx_byte
                                 
000d7b 9508                      	ret
                                 
                                 
                                 screen_tx_autotest:
000d7c 930f                      	push	R16
000d7d df6a                      	rcall	screen_tx_header
                                 
000d7e e002                      	ldi		R16,1+1
000d7f df52                      	rcall	screen_tx_byte
000d80 ea07                      	ldi		R16,$a7
000d81 df50                      	rcall	screen_tx_byte
                                 
000d82 910f                      	pop		R16
000d83 df4e                      	rcall	screen_tx_byte
                                 
000d84 9508                      	ret
                                 
                                 
                                 
                                 .dseg
002e85                           screen_tx_ee_read_cont:	.byte 1
002e86                           screen_tx_ee_read_ptr:	.byte 2
                                 
                                 .cseg
                                 screen_tx_ee_read:
000d85 9300 2e85                 	sts		screen_tx_ee_read_cont,R16
000d87 93a0 2e86                 	sts		screen_tx_ee_read_ptr,XL
000d89 93b0 2e87                 	sts		screen_tx_ee_read_ptr+1,XH
                                 
000d8b df5c                      	rcall	screen_tx_header
000d8c 9100 2e85                 	lds		R16,screen_tx_ee_read_cont
000d8e 9503                      	inc		R16
000d8f df42                      	rcall	screen_tx_byte
000d90 ea08                      	ldi		R16,$a8
000d91 df40                      	rcall	screen_tx_byte
                                 
                                 screen_tx_ee_read_loop:
000d92 91a0 2e86                 	lds		XL,screen_tx_ee_read_ptr
000d94 91b0 2e87                 	lds		XH,screen_tx_ee_read_ptr+1
000d96 910d                      	ld		R16,X+
000d97 93a0 2e86                 	sts		screen_tx_ee_read_ptr,XL
000d99 93b0 2e87                 	sts		screen_tx_ee_read_ptr+1,XH
000d9b df36                      	rcall	screen_tx_byte
000d9c 9100 2e85                 	lds		R16,screen_tx_ee_read_cont
000d9e 950a                      	dec		R16
000d9f 9300 2e85                 	sts		screen_tx_ee_read_cont,R16
000da1 f781                      	brne	screen_tx_ee_read_loop
000da2 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 screen_rx_frame:
000da3 df0d                      	rcall	screen_rx_byte_tout
000da4 f7f1                      	brne	screen_rx_frame
                                 screen_rx_frame_header:
000da5 350a                      	cpi		R16,0x5a					; frame header
000da6 f7e1                      	brne	screen_rx_frame
                                 
000da7 df09                      	rcall	screen_rx_byte_tout
000da8 f7d1                      	brne	screen_rx_frame
000da9 3a05                      	cpi		R16,0xa5
000daa f7d1                      	brne	screen_rx_frame_header
                                 
000dab df05                      	rcall	screen_rx_byte_tout			; frame len
000dac f7b1                      	brne	screen_rx_frame
000dad 3400                      	cpi		R16,screen_RX_BUFFER_LEN
000dae f7a0                      	brsh	screen_rx_frame
000daf 9300 2e02                 	sts		screen_cmd_buffer,R16
000db1 2f10                      	mov		R17,R16
000db2 e2be                      	ldi		XH,high(screen_cmd_buffer+1)
000db3 e0a3                      	ldi		XL,low(screen_cmd_buffer+1)
                                 screen_rx_frame_data:
000db4 931f                      	push	R17
000db5 93af                      	push	XL
000db6 93bf                      	push	XH
000db7 def9                      	rcall	screen_rx_byte_tout
000db8 91bf                      	pop		XH
000db9 91af                      	pop		XL
000dba 911f                      	pop		R17
000dbb f739                      	brne	screen_rx_frame
000dbc 930d                      	st		X+,R16
000dbd 951a                      	dec		R17
000dbe f7a9                      	brne	screen_rx_frame_data
000dbf 9508                      	ret
                                 
                                 
                                 
                                 screen_cmd_stop:
000dc0 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000dc2 3b01                      	cpi		R16,0xb1
000dc3 f439                      	brne	screen_cmd_stop_ret
000dc4 9100 2e02                 	lds		R16,screen_cmd_buffer
000dc6 3002                      	cpi		R16,1+1
000dc7 f419                      	brne	screen_cmd_stop_ret
                                 
000dc8 e000                      	ldi		R16,0
000dc9 9300 2f2b                 	sts		vent_mode_new,R16
                                 screen_cmd_stop_ret:
000dcb 9508                      	ret
                                 
                                 screen_cmd_vc_cmv:
000dcc 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000dce 3b02                      	cpi		R16,0xb2
000dcf f441                      	brne	screen_cmd_vc_cmv_ret
000dd0 9100 2e02                 	lds		R16,screen_cmd_buffer
000dd2 300f                      	cpi		R16,1+14
000dd3 f421                      	brne	screen_cmd_vc_cmv_ret
                                 
000dd4 d01e                      	rcall	screen_cmd_cpy_vent_data
000dd5 e001                      	ldi		R16,1
000dd6 9300 2f2b                 	sts		vent_mode_new,R16
                                 screen_cmd_vc_cmv_ret:
000dd8 9508                      	ret
                                 
                                 screen_cmd_pc_cmv:
000dd9 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000ddb 3b03                      	cpi		R16,0xb3
000ddc f441                      	brne	screen_cmd_pc_cmv_ret
000ddd 9100 2e02                 	lds		R16,screen_cmd_buffer
000ddf 300b                      	cpi		R16,1+10
000de0 f421                      	brne	screen_cmd_pc_cmv_ret
                                 
000de1 d011                      	rcall	screen_cmd_cpy_vent_data
000de2 e002                      	ldi		R16,2
000de3 9300 2f2b                 	sts		vent_mode_new,R16
                                 screen_cmd_pc_cmv_ret:
000de5 9508                      	ret
                                 
                                 screen_cmd_psv:
000de6 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000de8 3b04                      	cpi		R16,0xb4
000de9 f441                      	brne	screen_cmd_psv_ret
000dea 9100 2e02                 	lds		R16,screen_cmd_buffer
000dec 300b                      	cpi		R16,1+10
000ded f421                      	brne	screen_cmd_psv_ret
                                 
000dee d004                      	rcall	screen_cmd_cpy_vent_data
000def e003                      	ldi		R16,3
000df0 9300 2f2b                 	sts		vent_mode_new,R16
                                 screen_cmd_psv_ret:
000df2 9508                      	ret
                                 
                                 
                                 screen_cmd_cpy_vent_data:
000df3 e2de                      	ldi		YH,high(screen_cmd_buffer+2)
000df4 e0c4                      	ldi		YL,low(screen_cmd_buffer+2)
000df5 e2be                      	ldi		XH,high(vent_mode_data)
000df6 e4a4                      	ldi		XL,low(vent_mode_data)
000df7 e400                      	ldi		R16,screen_RX_BUFFER_LEN
000df8 940e 03f2                 	call	cpynYaX
000dfa 9508                      	ret
                                 
                                 
                                 
                                 screen_cmd_shutdown:
000dfb 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000dfd 3b05                      	cpi		R16,0xb5
000dfe f459                      	brne	screen_cmd_shutdown_ret
000dff 9100 2e02                 	lds		R16,screen_cmd_buffer
000e01 3002                      	cpi		R16,1+1
000e02 f439                      	brne	screen_cmd_shutdown_ret
                                 
000e03 9100 2e04                 	lds		R16,screen_cmd_buffer+2
000e05 3505                      	cpi		R16,0x55
000e06 f419                      	brne	screen_cmd_shutdown_ret
                                 
000e07 e001                      	ldi		R16,1
000e08 9300 2e8d                 	sts		power_shut_down,R16
                                 screen_cmd_shutdown_ret:
000e0a 9508                      	ret
                                 
                                 
                                 
                                 screen_cmd_buzzer:
000e0b 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000e0d 3b06                      	cpi		R16,0xb6
000e0e f491                      	brne	screen_cmd_buzzer_ret
000e0f 9100 2e02                 	lds		R16,screen_cmd_buffer
000e11 3002                      	cpi		R16,1+1
000e12 f471                      	brne	screen_cmd_buzzer_ret
                                 
000e13 9100 2e04                 	lds		R16,screen_cmd_buffer+2
000e15 3000                      	cpi		R16,0x00
000e16 f421                      	brne	screen_cmd_buzzer_no0
000e17 e000                      	ldi		R16,0						; buzzer off
000e18 9300 2e91                 	sts		buzzer_flag,R16
000e1a c006                      	rjmp	screen_cmd_buzzer_ret
                                 screen_cmd_buzzer_no0:
                                 
000e1b 3001                      	cpi		R16,0x01
000e1c f421                      	brne	screen_cmd_buzzer_no1
000e1d e001                      	ldi		R16,1						; buzzer on
000e1e 9300 2e91                 	sts		buzzer_flag,R16
000e20 c000                      	rjmp	screen_cmd_buzzer_ret
                                 screen_cmd_buzzer_no1:
                                 
                                 screen_cmd_buzzer_ret:
000e21 9508                      	ret
                                 
                                 
                                 
                                 screen_cmd_status_sensors:
000e22 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000e24 3b07                      	cpi		R16,0xb7
000e25 f439                      	brne	screen_cmd_status_sensors_ret
000e26 9100 2e02                 	lds		R16,screen_cmd_buffer
000e28 3001                      	cpi		R16,1+0
000e29 f419                      	brne	screen_cmd_status_sensors_ret
                                 
000e2a e001                      	ldi		R16,1
000e2b 9300 2e84                 	sts		screen_send_status,R16
                                 screen_cmd_status_sensors_ret:
000e2d 9508                      	ret
                                 
                                 
                                 	
                                 screen_cmd_calibra_O2:
000e2e 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000e30 3b08                      	cpi		R16,0xb8
000e31 f009                      	breq	screen_cmd_calibra_O2_cont
                                 screen_cmd_calibra_O2_ret1:
000e32 c056                      	rjmp	screen_cmd_calibra_O2_ret
                                 screen_cmd_calibra_O2_cont:
000e33 9100 2e02                 	lds		R16,screen_cmd_buffer
000e35 3002                      	cpi		R16,1+1
000e36 f7d9                      	brne	screen_cmd_calibra_O2_ret1
000e37 9100 2e04                 	lds		R16,screen_cmd_buffer+2
000e39 3105                      	cpi		R16,21
000e3a f511                      	brne	screen_cmd_calibra_O2_cal21
000e3b 9030 2d36                 	lds		R3,sensors_oxygen_value+3
000e3d 9020 2d35                 	lds		R2,sensors_oxygen_value+2
000e3f 9010 2d34                 	lds		R1,sensors_oxygen_value+1
000e41 9000 2d33                 	lds		R0,sensors_oxygen_value+0
000e43 9230 2d91                 	sts		sensors_o2_21_cal+3,R3
000e45 9220 2d90                 	sts		sensors_o2_21_cal+2,R2
000e47 9210 2d8f                 	sts		sensors_o2_21_cal+1,R1
000e49 9200 2d8e                 	sts		sensors_o2_21_cal+0,R0
000e4b e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_21_cal)
000e4c e0a8                      	ldi		XL,low(EEPROM_START+ee_o2_21_cal)
000e4d 9100 2d8e                 	lds		R16,sensors_o2_21_cal+0
000e4f d12b                      	rcall	eeprom_write_byte
000e50 9100 2d8f                 	lds		R16,sensors_o2_21_cal+1
000e52 d128                      	rcall	eeprom_write_byte
000e53 9100 2d90                 	lds		R16,sensors_o2_21_cal+2
000e55 d125                      	rcall	eeprom_write_byte
000e56 9100 2d91                 	lds		R16,sensors_o2_21_cal+3
000e58 d122                      	rcall	eeprom_write_byte
000e59 e001                      	ldi		R16,1
000e5a 9300 2f2e                 	sts		calibrate_o2_flag,R16
000e5c c02c                      	rjmp	screen_cmd_calibra_O2_ret
                                 screen_cmd_calibra_O2_cal21:
000e5d 330c                      	cpi		R16,60
000e5e f150                      	brlo	screen_cmd_calibra_O2_ret
000e5f 3605                      	cpi		R16,100+1
000e60 f540                      	brsh	screen_cmd_calibra_O2_ret
000e61 9300 2d96                 	sts		sensors_o2_Hi_ref,R16
000e63 9030 2d36                 	lds		R3,sensors_oxygen_value+3
000e65 9020 2d35                 	lds		R2,sensors_oxygen_value+2
000e67 9010 2d34                 	lds		R1,sensors_oxygen_value+1
000e69 9000 2d33                 	lds		R0,sensors_oxygen_value+0
000e6b 9230 2d95                 	sts		sensors_o2_Hi_cal+3,R3
000e6d 9220 2d94                 	sts		sensors_o2_Hi_cal+2,R2
000e6f 9210 2d93                 	sts		sensors_o2_Hi_cal+1,R1
000e71 9200 2d92                 	sts		sensors_o2_Hi_cal+0,R0
000e73 e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_hi_cal)
000e74 e0ac                      	ldi		XL,low(EEPROM_START+ee_o2_hi_cal)
000e75 9100 2d92                 	lds		R16,sensors_o2_Hi_cal+0
000e77 d103                      	rcall	eeprom_write_byte
000e78 9100 2d93                 	lds		R16,sensors_o2_Hi_cal+1
000e7a d100                      	rcall	eeprom_write_byte
000e7b 9100 2d94                 	lds		R16,sensors_o2_Hi_cal+2
000e7d d0fd                      	rcall	eeprom_write_byte
000e7e 9100 2d95                 	lds		R16,sensors_o2_Hi_cal+3
000e80 d0fa                      	rcall	eeprom_write_byte
                                 
000e81 e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_hi_ref)
000e82 e1a0                      	ldi		XL,low(EEPROM_START+ee_o2_hi_ref)
000e83 9100 2d96                 	lds		R16,sensors_o2_Hi_ref
000e85 d0f5                      	rcall	eeprom_write_byte
000e86 e001                      	ldi		R16,1
000e87 9300 2f2e                 	sts		calibrate_o2_flag,R16
                                 
                                 screen_cmd_calibra_O2_ret:
000e89 9508                      	ret
                                 
                                 
                                 	
                                 screen_cmd_autotest:
000e8a 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000e8c 3b09                      	cpi		R16,0xb9
000e8d f439                      	brne	screen_cmd_autotest_ret
000e8e 9100 2e02                 	lds		R16,screen_cmd_buffer
000e90 3001                      	cpi		R16,1+0
000e91 f419                      	brne	screen_cmd_autotest_ret
                                 
000e92 e001                      	ldi		R16,1
000e93 9300 2f2d                 	sts		autotest_flag,R16
                                 screen_cmd_autotest_ret:
000e95 9508                      	ret
                                 
                                 
                                 
                                 screen_cmd_ee_write:
000e96 9100 2e93                 	lds		R16,ee_write_tmr_s				; ee write only first 20 seconds at power on
000e98 3000                      	cpi		R16,0
000e99 f0d1                      	breq	screen_cmd_ee_write_ret
                                 
000e9a 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000e9c 3b0a                      	cpi		R16,0xba
000e9d f4b1                      	brne	screen_cmd_ee_write_ret
                                 
000e9e 9100 2e04                 	lds		R16,screen_cmd_buffer+2			; address H
000ea0 3104                      	cpi		R16,0x14
000ea1 f491                      	brne	screen_cmd_ee_write_ret
                                 
000ea2 9100 2e06                 	lds		R16,screen_cmd_buffer+4			; data length
000ea4 3000                      	cpi		R16,0
000ea5 f071                      	breq	screen_cmd_ee_write_ret
000ea6 9110 2e02                 	lds		R17,screen_cmd_buffer			; cmd length
000ea8 5014                      	subi	R17,(1+3)
000ea9 1701                      	cp		R16,R17
000eaa f449                      	brne	screen_cmd_ee_write_ret
                                 
000eab 91b0 2e04                 	lds		XH,screen_cmd_buffer+2			; address H-L
000ead 91a0 2e05                 	lds		XL,screen_cmd_buffer+3
000eaf e2de                      	ldi		YH,high(screen_cmd_buffer+5)
000eb0 e0c7                      	ldi		YL,low(screen_cmd_buffer+5)
000eb1 9100 2e06                 	lds		R16,screen_cmd_buffer+4			; data length
000eb3 d001                      	rcall	screen_tx_ee_write
                                 
                                 screen_cmd_ee_write_ret:
000eb4 9508                      	ret
                                 
                                 
                                 screen_tx_ee_write:
000eb5 9119                      	ld		R17,Y+
000eb6 931d                      	st		X+,R17
                                 
000eb7 2f1a                      	mov		R17,XL
000eb8 731f                      	andi	R17,$3f
000eb9 f421                      	brne	screen_tx_ee_write_next
000eba d007                      	rcall	screen_tx_ee_write_page
000ebb 950a                      	dec		R16
000ebc f021                      	breq	screen_tx_ee_write_ret
000ebd cff7                      	rjmp	screen_tx_ee_write
                                 screen_tx_ee_write_next:
                                 
000ebe 950a                      	dec		R16
000ebf f7a9                      	brne	screen_tx_ee_write
000ec0 d001                      	rcall	screen_tx_ee_write_page
                                 
                                 screen_tx_ee_write_ret:
000ec1 9508                      	ret
                                 
                                 
                                 .dseg
002e88                           screen_tx_ee_write_page_buff:	.byte 5
                                 .cseg
                                 screen_tx_ee_write_page:
000ec2 9300 2e88                 	sts		screen_tx_ee_write_page_buff,R16
000ec4 93a0 2e89                 	sts		screen_tx_ee_write_page_buff+1,XL
000ec6 93b0 2e8a                 	sts		screen_tx_ee_write_page_buff+2,XH
000ec8 93c0 2e8b                 	sts		screen_tx_ee_write_page_buff+3,YL
000eca 93d0 2e8c                 	sts		screen_tx_ee_write_page_buff+4,YH
000ecc d0b5                      	rcall	eeprom_write_page
000ecd 91d0 2e8c                 	lds		YH,screen_tx_ee_write_page_buff+4
000ecf 91c0 2e8b                 	lds		YL,screen_tx_ee_write_page_buff+3
000ed1 91b0 2e8a                 	lds		XH,screen_tx_ee_write_page_buff+2
000ed3 91a0 2e89                 	lds		XL,screen_tx_ee_write_page_buff+1
000ed5 9100 2e88                 	lds		R16,screen_tx_ee_write_page_buff
000ed7 9508                      	ret
                                 
                                 screen_cmd_ee_read:
000ed8 9100 2e03                 	lds		R16,screen_cmd_buffer+1
000eda 3b0b                      	cpi		R16,0xbb
000edb f489                      	brne	screen_cmd_ee_read_ret
                                 
000edc 9100 2e02                 	lds		R16,screen_cmd_buffer			; cmd length
000ede 3004                      	cpi		R16,1+3
000edf f469                      	brne	screen_cmd_ee_read_ret
                                 
000ee0 91b0 2e04                 	lds		XH,screen_cmd_buffer+2			; address H
000ee2 31b4                      	cpi		XH,0x14
000ee3 f449                      	brne	screen_cmd_ee_read_ret
                                 
000ee4 e001                      	ldi		R16,1
000ee5 d008                      	rcall	screen_delay_ms
                                 
000ee6 91b0 2e04                 	lds		XH,screen_cmd_buffer+2			; address H-L
000ee8 91a0 2e05                 	lds		XL,screen_cmd_buffer+3
000eea 9100 2e06                 	lds		R16,screen_cmd_buffer+4			; data length
000eec de98                      	rcall	screen_tx_ee_read
                                 screen_cmd_ee_read_ret:
000eed 9508                      	ret
                                 
                                 
                                 
                                 screen_delay_ms:
000eee 9300 2e00                 	sts		screen_tx_tmr_ms,R16
                                 screen_delay_ms_loop:
000ef0 940e 00fc                 	task_change
000ef2 9100 2e00                 	lds		R16,screen_tx_tmr_ms
000ef4 3000                      	cpi		R16,0
000ef5 f7d1                      	brne	screen_delay_ms_loop
000ef6 9508                      
                                 .include "power.asm"
                                 
                                  * power.asm
                                  *
                                  *  Created: 26/05/2020 01:15:01 a. m.
                                  *   Author: Javier
                                  */ 
                                  .equ	power_normal_off	= 10		; 1 second normal shut down
                                  .equ	power_force_off		= 150		; 15 seconds force shut down
                                 
                                 .dseg
002e8d                           power_shut_down:		.byte 1
002e8e                           power_screen_flag:		.byte 1
002e8f                           power_tmr_ds:			.byte 1
002e90                           power_buzzer_tmr_ms:	.byte 1
                                 .cseg
                                 power_task:
000ef7 e000                      	ldi		R16,0
000ef8 9300 2e8d                 	sts		power_shut_down,R16
                                 power_task_reset:
000efa e906                      	ldi		R16,power_force_off
000efb 9300 2e8f                 	sts		power_tmr_ds,R16
000efd e000                      	ldi		R16,0
000efe 9300 2e8e                 	sts		power_screen_flag,R16
                                 power_task_loop:
000f00 940e 00fc                 	task_change
                                 ;	rjmp	power_task_loop
000f02 9100 2e8d                 	lds		R16,power_shut_down						; screen shutdown?
000f04 3001                      	cpi		R16,1
000f05 f091                      	breq	power_task_shut_down
                                 
000f06 9100 0448                 	lds		R16,PORTC_IN							; off switch
000f08 7004                      	andi	R16,0x04
000f09 f781                      	brne	power_task_reset
                                 
000f0a 9100 2e8f                 	lds		R16,power_tmr_ds						; force shutdown?
000f0c 3000                      	cpi		R16,0
000f0d f051                      	breq	power_task_shut_down
                                 
000f0e 380c                      	cpi		R16,power_force_off-power_normal_off	; normal shutdown?
000f0f f780                      	brsh	power_task_loop
                                 
000f10 9100 2e8e                 	lds		R16,power_screen_flag
000f12 3000                      	cpi		R16,0
000f13 f761                      	brne	power_task_loop
000f14 e001                      	ldi		R16,1
000f15 9300 2e8e                 	sts		power_screen_flag,R16
000f17 cfe8                      	rjmp	power_task_loop
                                 
                                 
                                 
                                 power_task_shut_down:
000f18 e001                      	ldi		R16,1
000f19 9300 2e8d                 	sts		power_shut_down,R16
                                 
000f1b e004                       	ldi		R16,0x04							; motor disable
000f1c 9300 0425                 	sts		PORTB_OUTSET,R16
000f1e e000                      	ldi		R16,0x00
000f1f 9300 0a00                 	sts		TCA0_SINGLE_CTRLA,R16				; stop TCA0
000f21 9300 0a03                 	sts		TCA0_SINGLE_CTRLD,R16				; no split
000f23 9300 0a01                 	sts		TCA0_SINGLE_CTRLB,R16
000f25 9300 0a0b                 	sts		TCA0_SINGLE_INTFLAGS,R16			; tca_ovf interrupt flag clear
000f27 9300 0a0a                 	sts		TCA0_SINGLE_INTCTRL,R16				; tca_ovf interrupt enable
000f29 e003                       	ldi		R16,0x03							; motor dir,pulse
000f2a 9300 0426                 	sts		PORTB_OUTCLR,R16
                                 
000f2c e400                      	ldi		R16,0x40							; screeen power enable
000f2d 9300 0466                 	sts		PORTD_OUTCLR,R16
                                 
000f2f e000                      	ldi		R16,0x00							; power unlock
000f30 9300 0444                 	sts		PORTC_OUT,R16
                                 power_task_shut_down_wait:
000f32 e001                      	ldi		R16,1
000f33 9300 2e91                 	sts		buzzer_flag,R16
000f35 940e 00fc                 	task_change
000f37 cffa                      	rjmp	power_task_shut_down_wait
                                 
                                 
                                 
                                 
                                 buzzer_tgl:
000f38 e614                      	ldi		R17,100
                                 buzzer_tgl_loop:
000f39 931f                      	push	R17
000f3a e400                      	ldi		R16,0x40					; toggle buzzer
000f3b 9300 0447                 	sts		PORTC_OUTTGL,R16
000f3d e001                      	ldi		R16,1
000f3e d006                      	rcall	power_delayms
000f3f 911f                      	pop		R17
000f40 951a                      	dec		R17
000f41 f7b9                      	brne	buzzer_tgl_loop
                                 
000f42 e604                      	ldi		R16,100
000f43 d001                      	rcall	power_delayms
000f44 9508                      	ret
                                 
                                 
                                 
                                 power_delayms:
000f45 9300 2e90                 	sts		power_buzzer_tmr_ms,R16
                                 power_delayms_loop:
000f47 940e 00fc                 	task_change
000f49 9100 2e90                 	lds		R16,power_buzzer_tmr_ms
000f4b 3000                      	cpi		R16,0
000f4c f7d1                      	brne	power_delayms_loop
                                 .include "buzzer.asm"
000f4d 9508                      
                                  * buzzer.asm
                                  *
                                  *  Created: 05/06/2020 03:48:13 a. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .dseg
002e91                           buzzer_flag:	.byte 1
002e92                           buzzer_tmr_cs:	.byte 1
                                 
                                 .cseg
                                 buzzer_task:
000f4e e000                      	ldi		R16,0
000f4f 9300 2e91                 	sts		buzzer_flag,R16
000f51 e400                      	ldi		R16,0x40					; buzzer off
000f52 9300 0446                 	sts		PORTC_OUTCLR,R16
                                 buzzer_task_loop:
000f54 940e 00fc                 	task_change
000f56 9100 2e91                 	lds		R16,buzzer_flag
000f58 3000                      	cpi		R16,0
000f59 f3d1                      	breq	buzzer_task_loop
                                 
000f5a d00a                      	rcall	buzzer_pulse
000f5b cff8                      	rjmp	buzzer_task_loop
                                 
                                 
                                 buzzer_delay_cs:
000f5c 9300 2e92                 	sts		buzzer_tmr_cs,R16
                                 buzzer_delay_cs_loop:
000f5e 940e 00fc                 	task_change
000f60 9100 2e92                 	lds		R16,buzzer_tmr_cs
000f62 3000                      	cpi		R16,0
000f63 f7d1                      	brne	buzzer_delay_cs_loop
000f64 9508                      	ret
                                 
                                 
                                 buzzer_pulse:
000f65 e400                      	ldi		R16,0x40					; buzzer on
000f66 9300 0445                 	sts		PORTC_OUTSET,R16
000f68 e00a                      	ldi		R16,10
000f69 dff2                      	rcall	buzzer_delay_cs
000f6a e400                      	ldi		R16,0x40					; buzzer off
000f6b 9300 0446                 	sts		PORTC_OUTCLR,R16
000f6d e00a                      	ldi		R16,10
000f6e dfed                      	rcall	buzzer_delay_cs
000f6f 9508                      	ret
                                 
                                 
                                 buzzer:
000f70 940e 00fc                 	task_change
000f72 e001                      	ldi		R16,1
000f73 9300 2e91                 	sts		buzzer_flag,R16
000f75 940e 00fc                 	task_change
000f77 e000                      	ldi		R16,0
000f78 9300 2e91                 	sts		buzzer_flag,R16
                                 .include "eeprom.asm"
000f7a 9508                      
                                  * eeprom.asm
                                  *
                                  *  Created: 07/07/2020 11:54:46 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .eseg
                                 ; EEPROM_START+
000000 88
000001 76
000002 05
000003 00                        ee_pressure_zero_cal:		.db 0x88,0x76,0x05,0x00		; LO-HI
000004 aa
000005 82
000006 fe
000007 ff                        ee_flow_zero_cal:			.db 0xaa,0x82,0xfe,0xff		; LO-HI
                                 
000008 e5
000009 f8
00000a 1b
00000b 00                        ee_o2_21_cal:				.db 0xe5,0xf8,0x1b,0x00		; LO-HI
00000c 72
00000d f4
00000e 9b
00000f 00                        ee_o2_hi_cal:				.db 0x72,0xf4,0x9b,0x00		; LO-HI
000010 61                        ee_o2_hi_ref:				.db 97
                                 
000011 40
000012 00                        ee_flow_insp_range0:		.db 0x40,0x00				; LO-HI
000013 00
000014 00
000015 00                        ee_flow_insp_gain0_cal:		.db 0x00,0x00,0x00			; LO-HI
000016 00
000017 00
000018 00                        ee_flow_insp_off0_cal:		.db 0x00,0x00,0x00			; LO-HI
                                 
000019 40
00001a 13                        ee_flow_insp_range1:		.db 0x40,0x13				; LO-HI
00001b 55
00001c 55
00001d 01                        ee_flow_insp_gain1_cal:		.db 0x55,0x55,0x01			; LO-HI
00001e 55
00001f 55
000020 00                        ee_flow_insp_off1_cal:		.db 0x55,0x55,0x00			; LO-HI
                                 
000021 40
000022 2d                        ee_flow_insp_range2:		.db 0x40,0x2d				; LO-HI
000023 00
000024 00
000025 01                        ee_flow_insp_gain2_cal:		.db 0x00,0x00,0x01			; LO-HI
000026 00
000027 c0
000028 06                        ee_flow_insp_off2_cal:		.db 0x00,0xc0,0x06			; LO-HI
                                 
000029 00
00002a fe                        ee_flow_insp_range3:		.db 0x00,0xfe				; LO-HI
00002b 8f
00002c b5
00002d 00                        ee_flow_insp_gain3_cal:		.db 0x8f,0xb5,0x00			; LO-HI
00002e b0
00002f db
000030 13                        ee_flow_insp_off3_cal:		.db 0xb0,0xdb,0x13			; LO-HI
                                 
000031 ff
000032 ff                        ee_flow_insp_range4:		.db 0xff,0xff				; LO-HI
000033 ff
000034 ff
000035 ff                        ee_flow_insp_gain4_cal:		.db 0xff,0xff,0xff			; LO-HI
000036 ff
000037 ff
000038 ff                        ee_flow_insp_off4_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
                                 
                                 
000039 40
00003a 00                        ee_flow_exp_range0:			.db 0x40,0x00				; LO-HI
00003b 00
00003c 00
00003d 00                        ee_flow_exp_gain0_cal:		.db 0x00,0x00,0x00			; LO-HI
00003e 00
00003f 40
000040 00                        ee_flow_exp_off0_cal:		.db 0x00,0x40,0x00			; LO-HI
                                 
000041 01
000042 2a                        ee_flow_exp_range1:			.db 0x01,0x2a				; LO-HI
000043 08
000044 1e
000045 01                        ee_flow_exp_gain1_cal:		.db 0x08,0x1e,0x01			; LO-HI
000046 08
000047 1e
000048 01                        ee_flow_exp_off1_cal:		.db 0x08,0x1e,0x01			; LO-HI
                                 
000049 00
00004a fe                        ee_flow_exp_range2:			.db 0x00,0xfe				; LO-HI
00004b 00
00004c c8
00004d 00                        ee_flow_exp_gain2_cal:		.db 0x00,0xc8,0x00			; LO-HI
00004e 00
00004f 3c
000050 0f                        ee_flow_exp_off2_cal:		.db 0x00,0x3c,0x0f			; LO-HI
                                 
000051 ff
000052 ff                        ee_flow_exp_range3:			.db 0xff,0xff				; LO-HI
000053 ff
000054 ff
000055 ff                        ee_flow_exp_gain3_cal:		.db 0xff,0xff,0xff			; LO-HI
000056 ff
000057 ff
000058 ff                        ee_flow_exp_off3_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
000059 ff
00005a ff                        ee_flow_exp_range4:			.db 0xff,0xff				; LO-HI
00005b ff
00005c ff
00005d ff                        ee_flow_exp_gain4_cal:		.db 0xff,0xff,0xff			; LO-HI
00005e ff
00005f ff
000060 ff                        ee_flow_exp_off4_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
                                 
                                 
000061 00
000062 fe                        ee_press_range0:		.db 0x00,0xfe				; LO-HI
000063 00
000064 00
000065 01                        ee_press_gain0_cal:		.db 0x00,0x00,0x01			; LO-HI
000066 00
000067 00
000068 00                        ee_press_off0_cal:		.db 0x00,0x00,0x00			; LO-HI
                                 
000069 ff
00006a ff                        ee_press_range1:		.db 0xff,0xff				; LO-HI
00006b ff
00006c ff
00006d ff                        ee_press_gain1_cal:		.db 0xff,0xff,0xff			; LO-HI
00006e ff
00006f ff
000070 ff                        ee_press_off1_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
000071 ff
000072 ff                        ee_press_range2:		.db 0xff,0xff				; LO-HI
000073 ff
000074 ff
000075 ff                        ee_press_gain2_cal:		.db 0xff,0xff,0xff			; LO-HI
000076 ff
000077 ff
000078 ff                        ee_press_off2_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
000079 ff
00007a ff                        ee_press_range3:		.db 0xff,0xff				; LO-HI
00007b ff
00007c ff
00007d ff                        ee_press_gain3_cal:		.db 0xff,0xff,0xff			; LO-HI
00007e ff
00007f ff
000080 ff                        ee_press_off3_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
000081 ff
000082 ff                        ee_press_range4:		.db 0xff,0xff				; LO-HI
000083 ff
000084 ff
000085 ff                        ee_press_gain4_cal:		.db 0xff,0xff,0xff			; LO-HI
000086 ff
000087 ff
000088 ff                        ee_press_off4_cal:		.db 0xff,0xff,0xff			; LO-HI
                                 
                                 
                                 
000089 00                        ee_pulse_time:				.db 00						; pulse time (ej:50)
00008a 19                        ee_pulse_flow_sp:			.db 25						; flow set point (ej:25)
00008b 46                        ee_pulse_min_speed:			.db 70						; minimum motor speed (ej:70)
                                 
00008c 26                        ee_pressure_max:			.db 38						; maximum pressure
00008d 96                        ee_flow_max:				.db 150						; maximum flow
00008e dc
00008f 05                        ee_pos_alarm_thr:			.db low(1500),high(1500)	; stepper position for alarm evaluation
000090 01                        ee_dis_alarm_pres_thr:		.db 1						; pressure (cmh2o) threshold for patient disconection alarm. 0=disable
000091 05                        ee_dis_alarm_flow_thr:		.db 5						; flow (l/m) threshold for patient disconection alarm
000092 26                        ee_obs_alarm_pres_thr:		.db 38						; pressure (cmh2o) threshold for obstruction alarm. 0=disable
000093 0a                        ee_obs_alarm_flow_thr:		.db 10						; flow (l/m) threshold for obstruction alarm
000094 64                        ee_res_alarm_thr:			.db 100						; resistance threshold for obstruction alarm. 0=disable
000095 02                        ee_res_alarm_drv_press_thr:	.db 2						; minimum driving pressure for resistance calculation
                                 
                                 .dseg
002e93                           ee_write_tmr_s:			.byte 1
                                 
                                 
                                 .cseg
                                 eeprom_write_byte:
000f7b 930d                      	st		X+,R16
                                 
000f7c 93af                      	push	XL
000f7d 93bf                      	push	XH
000f7e d003                      	rcall	eeprom_write_page
000f7f 91bf                      	pop		XH
000f80 91af                      	pop		XL
000f81 9508                      	ret
                                 
                                 
                                 eeprom_write_page:
000f82 e91d                      	ldi		R17,CPU_CCP_SPM_gc
000f83 e023                      	ldi		R18,0x03					; ERWP Erase and write page
000f84 94f8                      	cli
000f85 bf14                      	out		CPU_CCP,R17
000f86 9320 1000                 	sts		NVMCTRL_CTRLA,R18
000f88 9478                      	sei
                                 eeprom_write_page_loop:
000f89 940e 00fc                 	task_change
000f8b 9100 1002                 	lds		R16,NVMCTRL_STATUS
000f8d fd01                      	sbrc	R16,NVMCTRL_EEBUSY_bp
000f8e cffa                      	rjmp	eeprom_write_page_loop
000f8f 9508                      	ret
                                 
                                 .include "pid.asm"
                                 
                                  * pid.asm
                                  *
                                  *  Created: 13/05/2020 04:25:14 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .equ	pid_SAMPLING_TIME_ms = 10
                                 
                                 .dseg
002e94                           pid_sp:			.byte 2			; int16 (LO-HI)
002e96                           pid_kp:			.byte 2			; frac8+int8
002e98                           pid_ki:			.byte 2			; frac8+int8
002e9a                           pid_kd:			.byte 2			; frac8+int8
                                 
002e9c                           pid_e:			.byte 2			; frac8+int8
002e9e                           pid_ei:			.byte 2			; frac8+int8
002ea0                           pid_ei_max:		.byte 2			; frac8+int8
002ea2                           pid_ei_min:		.byte 2			; frac8+int8
                                 
002ea4                           pid_out_max:	.byte 2			; int16 (LO-HI)
002ea6                           pid_out_min:	.byte 2			; int16 (LO-HI)
                                 
002ea8                           pid_tmr_ms:		.byte 1
                                 .cseg
                                 ; input:	XH:XL:R15 -> input process variable (frac8+int16)
                                 ; output:	XH:XL	  -> output control variable (int16)
                                 pid_process:
000f90 d004                      	rcall	pid_process_kp
000f91 d048                      	rcall	pid_process_ki
000f92 d060                      	rcall	pid_process_kd
000f93 d072                      	rcall	pid_process_out
000f94 9508                      	ret	
                                 
                                 
                                 ; input:	XH:XL:R15 -> input process variable (frac8+int16)
                                 ; output:	YH:YL	  -> error (frac8+int8)
                                 pid_process_kp:
000f95 27cc                      	clr		YL						;   e =  sp-in
000f96 91d0 2e94                 	lds		YH,pid_sp
000f98 9180 2e95                 	lds		R24,pid_sp+1
000f9a 19cf                      	sub		YL,R15
000f9b 0bda                      	sbc		YH,XL
000f9c 0b8b                      	sbc		R24,XH
000f9d fd87                      	sbrc	R24,7					; error limits
000f9e c005                      	rjmp	pid_process_kp_e_neg
000f9f 3080                      	cpi		R24,0
000fa0 f459                      	brne	pid_process_kp_e_max
000fa1 fdd7                      	sbrc	YH,7
000fa2 c009                      	rjmp	pid_process_kp_e_max
000fa3 c00a                      	rjmp	pid_process_kp_out
                                 pid_process_kp_e_neg:
000fa4 3f8f                      	cpi		R24,0xff
000fa5 f419                      	brne	pid_process_kp_e_min
000fa6 ffd7                      	sbrs	YH,7
000fa7 c001                      	rjmp	pid_process_kp_e_min
000fa8 c005                      	rjmp	pid_process_kp_out
                                 pid_process_kp_e_min:
000fa9 e8d0                      	ldi		YH,0x80				; min error
000faa e0c0                      	ldi		YL,0x00
000fab c002                      	rjmp	pid_process_kp_out
                                 pid_process_kp_e_max:
000fac e7df                      	ldi		YH,0x7f				; max error
000fad efcf                      	ldi		YL,0xff
                                 
                                 pid_process_kp_out:
                                 ;	rcall	pid_e2
000fae 2f4c                      	mov		R20,YL				; out += kp*e
000faf 2f5d                      	mov		R21,YH
000fb0 9160 2e96                 	lds		R22,pid_kp
000fb2 9170 2e97                 	lds		R23,pid_kp+1
                                 ;	rcall	mac16x16_32_method_B
000fb4 940e 0494                 	call	muls16x16_32
000fb6 9508                      	ret
                                 
                                 
                                 pid_e2:
000fb7 e000                      	ldi		R16,0
000fb8 ffd7                      	sbrs	YH,7
000fb9 c004                      	rjmp	pid_e2_pos
000fba e001                      	ldi		R16,1
000fbb 95d0                      	com		YH
000fbc 95c1                      	neg		YL
000fbd 4fdf                      	sbci	YH,255
                                 pid_e2_pos:
000fbe 9fcc                      	mul		YL,YL
000fbf 2d40                      	mov		R20,R0
000fc0 2d51                      	mov		R21,R1
                                 
000fc1 9fdd                      	mul		YH,YH
000fc2 2d60                      	mov		R22,R0
000fc3 2d71                      	mov		R23,R1
                                 
000fc4 9fdc                      	mul		YH,YL
000fc5 0d50                      	add		R21,R0
000fc6 1d61                      	adc		R22,R1
000fc7 2422                      	clr		R2
000fc8 1d72                      	adc		R23,R2
000fc9 0d50                      	add		R21,R0
000fca 1d61                      	adc		R22,R1
000fcb 1d72                      	adc		R23,R2
                                 	
000fcc 3070                      	cpi		R23,0
000fcd f411                      	brne	pid_e2_max
000fce ff67                      	sbrs	R22,7
000fcf c002                      	rjmp	pid_e2_no_max
                                 pid_e2_max:
000fd0 ef5e                      	ldi		R21,0xfe
000fd1 e76f                      	ldi		R22,0x7f
                                 pid_e2_no_max:
000fd2 2fc5                      	mov		YL,R21
000fd3 2fd6                      	mov		YH,R22
000fd4 ff00                      	sbrs	R16,0
000fd5 c003                      	rjmp	pid_e2_ret
000fd6 95d0                      	com		YH
000fd7 95c1                      	neg		YL
000fd8 4fdf                      	sbci	YH,255
                                 pid_e2_ret:
000fd9 9508                      	ret
                                 
                                 
                                 
                                 ; input:	YH:YL	  -> error (frac8+int8)
                                 pid_process_ki:
000fda 9140 2e9e                 	lds		R20,pid_ei			;  ei += e
000fdc 9150 2e9f                 	lds		R21,pid_ei+1
000fde 0f4c                      	add		R20,YL
000fdf 1f5d                      	adc		R21,YH
000fe0 f43b                      	brvc	pid_process_ki_ei_add
000fe1 fdd7                      	sbrc	YH,7
000fe2 c003                      	rjmp	pid_process_ki_ei_min
000fe3 ef4f                      	ldi		R20,low(0x7fff)
000fe4 e75f                      	ldi		R21,high(0x7fff)
000fe5 c002                      	rjmp	pid_process_ki_ei_add
                                 pid_process_ki_ei_min:
000fe6 e040                      	ldi		R20,low(0x8000)
000fe7 e850                      	ldi		R21,high(0x8000)
                                 pid_process_ki_ei_add:
                                 
                                 /*	sbrc	R21,7						; check programable limit
                                 	rjmp	pid_process_ki_ei_neg
                                 	cpi		R21,high(70*16)
                                 	brlo	pid_process_ki_ei_process
                                 	brne	pid_process_ki_ei_max2
                                 	cpi		R20,low(70*16)
                                 	brlo	pid_process_ki_ei_process
                                 pid_process_ki_ei_max2:
                                 	ldi		R21,high(70*16)
                                 	ldi		R20,low(70*16)
                                 	rjmp	pid_process_ki_ei_process
                                 pid_process_ki_ei_neg:
                                 	cpi		R21,high(-70*16)
                                 	brlt	pid_process_ki_ei_min2
                                 	brne	pid_process_ki_ei_process
                                 	cpi		R20,low(-70*16)
                                 	brge	pid_process_ki_ei_process
                                 pid_process_ki_ei_min2:
                                 	ldi		R21,high(-70*16)
                                 	ldi		R20,low(-70*16)
                                 pid_process_ki_ei_process:
                                 */
                                 
000fe8 9340 2e9e                 	sts		pid_ei,R20
000fea 9350 2e9f                 	sts		pid_ei+1,R21
                                 
000fec 9160 2e98                 	lds		R22,pid_ki			; out += ki*ei
000fee 9170 2e99                 	lds		R23,pid_ki+1
000ff0 940e 0481                 	call	mac16x16_32_method_B
000ff2 9508                      	ret
                                 
                                 
                                 ; input:	YH:YL	  -> error (frac8+int8)
                                 pid_process_kd:
000ff3 9140 2e9c                 	lds		R20,pid_e				;    ed =  e-e_old
000ff5 9150 2e9d                 	lds		R21,pid_e+1				; e_old =  e
000ff7 93c0 2e9c                 	sts		pid_e,YL
000ff9 93d0 2e9d                 	sts		pid_e+1,YH
000ffb 1bc4                      	sub		YL,R20
000ffc 0bd5                      	sbc		YH,R21
000ffd 2f4c                      	mov		R20,YL
000ffe 2f5d                      	mov		R21,YH
000fff 9160 2e9a                 	lds		R22,pid_kd				;   out += kd*ed
001001 9170 2e9b                 	lds		R23,pid_kd+1
001003 940e 0481                 	call	mac16x16_32_method_B
001005 9508                      	ret
                                 
                                 
                                 ; output:	XH:XL	-> output control
                                 pid_process_out:
001006 2fb3                      	mov		XH,R19
001007 2fa2                      	mov		XL,R18
001008 91c0 2ea6                 	lds		YL,pid_out_min				; check minimum
00100a 91d0 2ea7                 	lds		YH,pid_out_min+1
00100c 17ac                      	cp		XL,YL
00100d 07bd                      	cpc		XH,YH
00100e f41c                      	brge	pid_process_out_check_max
00100f 2fac                      	mov		XL,YL
001010 2fbd                      	mov		XH,YH
001011 c009                      	rjmp	pid_process_out_ret
                                 
                                 pid_process_out_check_max:
001012 91c0 2ea4                 	lds		YL,pid_out_max				; check maximum
001014 91d0 2ea5                 	lds		YH,pid_out_max+1
001016 17ac                      	cp		XL,YL
001017 07bd                      	cpc		XH,YH
001018 f014                      	brlt	pid_process_out_ret
001019 2fac                      	mov		XL,YL
00101a 2fbd                      	mov		XH,YH
                                 
                                 pid_process_out_ret:
00101b 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 pid_wait_sampling_time:
00101c 940e 00fc                 	task_change
00101e 9100 2ea8                 	lds		R16,pid_tmr_ms
001020 3000                      	cpi		R16,0
001021 f7d1                      	brne	pid_wait_sampling_time
001022 e00a                      	ldi		R16,pid_SAMPLING_TIME_ms
001023 9300 2ea8                 	sts		pid_tmr_ms,R16
001025 9508                      	ret
                                 
                                 pid_check_sampling_time:
001026 940e 00fc                 	task_change
001028 9100 2ea8                 	lds		R16,pid_tmr_ms
00102a 3000                      	cpi		R16,0
00102b f419                      	brne	pid_check_sampling_time_ret
00102c e00a                      	ldi		R16,pid_SAMPLING_TIME_ms
00102d 9300 2ea8                 	sts		pid_tmr_ms,R16
                                 pid_check_sampling_time_ret:
                                 .include "expiration.asm"
00102f 9508                      
                                  * expiration.asm
                                  *
                                  *  Created: 19/05/2020 12:18:40 a. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 
                                 .dseg
002ea9                           exp_zero2:			.byte 2
002eab                           exp_fall_time:		.byte 1
002eac                           exp_start_flag:		.byte 1
                                 
                                 .cseg
                                 expiration_pid_parameters:
001030 0700                      	.dw		int( 7.00 *256)			; kp (int8+frac8)
001031 0000                      	.dw		int( 0.00 *256)			; ki (int8+frac8)
001032 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
001033 ff81                      	.dw		-127					; out_min
001034 0000                      	.dw		0						; out_max
001035 2ea9                      	.dw		exp_zero2
                                 
                                 
                                 expiration_load_pid_settings:
001036 e208                      	ldi		R16,40
001037 9300 2ea9                 	sts		exp_zero2,R16			; int8
001039 e000                      	ldi		R16,0
00103a 9300 2eaa                 	sts		exp_zero2+1,R16			; frac8
                                 
                                 load_pid_settings:
00103c 91a5                      	lpm		XL,Z+
00103d 91b5                      	lpm		XH,Z+
00103e 93a0 2e96                 	sts		pid_kp,XL
001040 93b0 2e97                 	sts		pid_kp+1,XH
                                 
001042 91a5                      	lpm		XL,Z+
001043 91b5                      	lpm		XH,Z+
001044 93a0 2e98                 	sts		pid_ki,XL
001046 93b0 2e99                 	sts		pid_ki+1,XH
                                 
001048 91a5                      	lpm		XL,Z+
001049 91b5                      	lpm		XH,Z+
00104a 93a0 2e9a                 	sts		pid_kd,XL
00104c 93b0 2e9b                 	sts		pid_kd+1,XH
                                 
00104e 91a5                      	lpm		XL,Z+
00104f 91b5                      	lpm		XH,Z+
001050 93a0 2ea6                 	sts		pid_out_min,XL
001052 93b0 2ea7                 	sts		pid_out_min+1,XH
                                 
001054 91a5                      	lpm		XL,Z+
001055 91b5                      	lpm		XH,Z+
001056 93a0 2ea4                 	sts		pid_out_max,XL
001058 93b0 2ea5                 	sts		pid_out_max+1,XH
                                 
00105a 91a5                      	lpm		XL,Z+
00105b 91b5                      	lpm		XH,Z+
00105c 910d                      	ld		R16,X+
00105d 911d                      	ld		R17,X+
00105e 9300 2e94                 	sts		pid_sp,R16
001060 9310 2e95                 	sts		pid_sp+1,R17
                                 
001062 2700                      	clr		R16
001063 9300 2e9c                 	sts		pid_e,R16
001065 9300 2e9d                 	sts		pid_e+1,R16
001067 9300 2e9e                 	sts		pid_ei,R16
001069 9300 2e9f                 	sts		pid_ei+1,R16
00106b 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 process_expiration:
00106c e003                      	ldi		R16,3								; transmit expiration event to screen
00106d 9300 2f2c                 	sts		vent_phase,R16
00106f dcb4                      	rcall	screen_tx_event
                                 
001070 e2f0                      	ldi		ZH,high(expiration_pid_parameters*2)
001071 e6e0                      	ldi		ZL,low(expiration_pid_parameters*2)
001072 dfc3                      	rcall	expiration_load_pid_settings
001073 d07a                      	rcall	process_trigger_init
001074 e000                      	ldi		R16,0								; Limit switch count
001075 9300 2ead                 	sts		exp_limit_sw,R16
001077 9300 2eab                 	sts		exp_fall_time,R16
001079 9300 2eac                 	sts		exp_start_flag,R16
                                 
00107b 91a0 2f1e                 	lds		XL,set_exp_time_cs
00107d 91b0 2f1f                 	lds		XH,set_exp_time_cs+1
                                 process_expiration_loop:
00107f 93af                      	push	XL
001080 93bf                      	push	XH
001081 df9a                      	rcall	pid_wait_sampling_time				; wait pid sampling time
001082 94f8
001083 91a0 2c9e
001085 91b0 2c9f
001087 9478                      	stepper_read_pos
001088 24ff                      	clr		R15
001089 df06                      	rcall	pid_process							; pid control
00108a 93a0 2c9a                 	sts		stepper_speed_sp,XL					; update control variable
00108c 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
00108e 940e 0d07                 	call	screen_tx_data_PFV					; transmit data
001090 d00a                      	rcall	check_expiration_start
001091 d066                      	rcall	process_trigger						; z flag indicate trigger!!!
                                 
001092 91bf                      	pop		XH
001093 91af                      	pop		XL
001094 f021                      	breq	process_expiration_chk_res_alarm
                                 	
001095 d021                      	rcall	check_limit_sw						; detect limit switch
001096 f411                      	brne	process_expiration_chk_res_alarm
                                 
001097 9711                      	sbiw	XL,1
001098 f731                      	brne	process_expiration_loop
                                 
                                 process_expiration_chk_res_alarm:
001099 d02d                      	rcall	chk_resistance_alarm
                                 
00109a 9508                      	ret
                                 
                                 
                                 
                                 check_expiration_start:
00109b 9120 2eac                 	lds		R18,exp_start_flag
00109d 3021                      	cpi		R18,1
00109e f0b9                      	breq	check_expiration_start_ret
                                 
00109f 91f0 2cda                 	lds		ZH,sensors_flow_value+3
0010a1 91e0 2cd9                 	lds		ZL,sensors_flow_value+2
0010a3 fff7                      	sbrs	ZH,7
0010a4 c004                      	rjmp	check_expiration_start_ok
0010a5 3fff                      	cpi		ZH,0xff
0010a6 f459                      	brne	check_expiration_start_flag
0010a7 3fee                      	cpi		ZL,-2
0010a8 f04c                      	brlt	check_expiration_start_flag
                                 
                                 check_expiration_start_ok:
0010a9 9120 2eab                 	lds		R18,exp_fall_time
0010ab 3322                      	cpi		R18,50
0010ac f428                      	brsh	check_expiration_start_flag
0010ad 9523                      	inc		R18
0010ae 9320 2eab                 	sts		exp_fall_time,R18
0010b0 9498                      	clz
0010b1 c004                      	rjmp	check_expiration_start_ret
                                 
                                 check_expiration_start_flag:
0010b2 e021                      	ldi		R18,1
0010b3 9320 2eac                 	sts		exp_start_flag,R18
0010b5 9418                      	sez
                                 check_expiration_start_ret:
0010b6 9508                      	ret
                                 
                                 .dseg
002ead                           exp_limit_sw:		.byte 1
                                 .cseg
                                 check_limit_sw:
0010b7 9110 2ead                 	lds		R17,exp_limit_sw					; detect limit switch
0010b9 9100 0488                 	lds		R16,PORTE_IN
0010bb ff01                      	sbrs	R16,stepper_sw_open_pin				; normal sbrs
0010bc 9513                      	inc		R17
0010bd 9310 2ead                 	sts		exp_limit_sw,R17
0010bf 3015                      	cpi		R17,5
0010c0 f020                      	brlo	check_limit_sw_ok
0010c1 940e 05e7                 	call	stepper_home						; restore position
0010c3 9498                      	clz
0010c4 c001                      	rjmp	check_limit_sw_ret
                                 check_limit_sw_ok:
0010c5 9418                      	sez
                                 check_limit_sw_ret:
0010c6 9508                      	ret
                                 
                                 
                                 
                                 chk_resistance_alarm:
0010c7 9100 1494                 	lds		R16,EEPROM_START+ee_res_alarm_thr	; resistance threshold
0010c9 3000                      	cpi		R16,0
0010ca f111                      	breq	chk_resistance_alarm_ret
                                 
0010cb 91b0 2d6f                 	lds		XH,sensors_pressure_max+2			; calc driving pressure
0010cd 91a0 2d6e                 	lds		XL,sensors_pressure_max+1
0010cf 91d0 2cb5                 	lds		YH,sensors_pressure_value+2
0010d1 91c0 2cb4                 	lds		YL,sensors_pressure_value+1
0010d3 1bac                      	sub		XL,YL
0010d4 0bbd                      	sbc		XH,YH
0010d5 f0bc                      	brlt	chk_resistance_alarm_ret
0010d6 fda7                      	sbrc	XL,7
0010d7 95b3                      	inc		XH
0010d8 9110 1495                 	lds		R17,EEPROM_START+ee_res_alarm_drv_press_thr
0010da 17b1                      	cp		XH,R17
0010db f088                      	brlo	chk_resistance_alarm_ret
                                 
0010dc 91d0 2d73                 	lds		YH,sensors_flow_max+2				; if (P*60>R*F) => obstruction
0010de 91c0 2d72                 	lds		YL,sensors_flow_max+1
0010e0 fdc7                      	sbrc	YL,7
0010e1 95d3                      	inc		YH
0010e2 9f0d                      	mul		R16,YH
0010e3 2c20                      	mov		R2,R0
0010e4 2c31                      	mov		R3,R1
0010e5 e31c                      	ldi		R17,60
0010e6 9fb1                      	mul		XH,R17
0010e7 1802                      	sub		R0,R2
0010e8 0813                      	sbc		R1,R3
0010e9 f018                      	brlo	chk_resistance_alarm_ret
0010ea e001                      	ldi		R16,1
0010eb 9300 2ca7                 	sts		stepper_resistance_alarm,R16
                                 chk_resistance_alarm_ret:
                                 .include "trigger.asm"
0010ed 9508                      
                                  * trigger.asm
                                  *
                                  *  Created: 19/05/2020 12:24:44 a. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 
                                 .equ trigger_base_count = 8			; 2,4,8,16,32,64	promedio de valores
                                 .equ trigger_width		= 2			; 10 cs				tiempo del pulso trigger respecto a la base
                                 .equ trigger_pos_width	= 4			; 4 cs				tiempo del pulso trigger para flujo positivos
                                 .equ trigger_neg_width	= 10		; 10 cs				tiempo de flujo negativo antes de evaluar flujo positivo
                                 
                                 .dseg
002eae                           flow_buff:		.byte 64
002eee                           flow_count:		.byte 1
002eef                           flow_base:		.byte 2
002ef1                           flow_sum:		.byte 3
002ef4                           flow_idx:		.byte 1
002ef5                           flow_flag:		.byte 1
002ef6                           flow_trigger:	.byte 1
002ef7                           flow_apnea:		.byte 1
002ef8                           flow_pos_count:	.byte 1
002ef9                           flow_neg_count:	.byte 1
002efa                           flow_end:		.byte 0
                                 
                                 .cseg
                                 process_trigger_init:
0010ee e2be                      	ldi		XH,high(flow_buff)
0010ef eaae                      	ldi		XL,low(flow_buff)
0010f0 e000                      	ldi		R16,0
0010f1 e41c                      	ldi		R17,flow_end-flow_buff
                                 process_trigger_init_loop:
0010f2 930d                      	st		X+,R16
0010f3 951a                      	dec		R17
0010f4 f7e9                      	brne	process_trigger_init_loop
0010f5 9300 2ef5                 	sts		flow_flag,R16
0010f7 9508                      	ret
                                 
                                 
                                 ; output:	->	sez - trigger detected
                                 ;				clz - trigger not detected
                                 process_trigger:
0010f8 e2de                      	ldi		YH,high(flow_buff)		; point to flow_buffer+idx
0010f9 eace                      	ldi		YL,low(flow_buff)
0010fa 9100 2ef4                 	lds		R16,flow_idx
0010fc 0f00                      	lsl		R16
0010fd 0fc0                      	add		YL,R16
0010fe e000                      	ldi		R16,0
0010ff 1fd0                      	adc		YH,R16
                                 
001100 91e0 2ef1                 	lds		ZL,flow_sum				; flow_sum -= buffer[idx]
001102 91f0 2ef2                 	lds		ZH,flow_sum+1
001104 81a8                      	ldd		XL,Y+0
001105 81b9                      	ldd		XH,Y+1
001106 1bea                      	sub		ZL,XL
001107 0bfb                      	sbc		ZH,XH
                                 
001108 91a0 2cd9                 	lds		XL,sensors_flow_value+2	; flow_sum += flow
00110a 91b0 2cda                 	lds		XH,sensors_flow_value+3
00110c 0fea                      	add		ZL,XL
00110d 1ffb                      	adc		ZH,XH
00110e 93e0 2ef1                 	sts		flow_sum,ZL
001110 93f0 2ef2                 	sts		flow_sum+1,ZH
                                 
001112 83a8                      	std		Y+0,XL					; buffer[idx] = flow
001113 83b9                      	std		Y+1,XH
                                 
001114 9100 2ef4                 	lds		R16,flow_idx			; if (++idx==trigger_base_count) idx=0
001116 9503                      	inc		R16
001117 3008                      	cpi		R16,trigger_base_count
001118 f008                      	brlo	process_trigger_no_0
001119 2700                      	clr		R16
                                 process_trigger_no_0:
00111a 9300 2ef4                 	sts		flow_idx,R16
                                 
                                 
                                 /*	rcall	process_trigger_pos_flow	; Analiza flujos positivos antes de apertura de paletas
                                 ;	breq	process_trigger_ret
                                 	brne	process_trigger_nopos
                                 	rjmp	process_trigger_ret
                                 process_trigger_nopos:
                                 */
                                 
                                 
00111c 94f8
00111d 91a0 2c9e
00111f 91b0 2c9f
001121 9478                      	stepper_read_pos				; if (pos>40) return .... if (pos>0) return
001122 fdb7                      	sbrc	XH,7
001123 c008                      	rjmp	process_trigger_pos
                                 ;	or		XH,XL
                                 ;	breq	process_trigger_pos
                                 ;	rjmp	process_trigger_ko
001124 30b0                      	cpi		XH,0
001125 f411                      	brne	process_trigger_ko2
001126 32a9                      	cpi		XL,41
001127 f020                      	brlo	process_trigger_pos
                                 process_trigger_ko2:
001128 e000                      	ldi		R16,0						; Reinicia contador tiempo pulso positivo
001129 9300 2ef8                 	sts		flow_pos_count,R16
00112b c04d                      	rjmp	process_trigger_ko
                                 process_trigger_pos:
                                 
00112c 91a0 2cd9                 	lds		XL,sensors_flow_value+2		; if (|flow|>6) flow_count=0 else flow_count++
00112e 91b0 2cda                 	lds		XH,sensors_flow_value+3
001130 9100 2eee                 	lds		R16,flow_count
001132 ffb7                      	sbrs	XH,7
001133 c003                      	rjmp	process_trigger_abs
001134 95b0                      	com		XH
001135 95a1                      	neg		XL
001136 4fbf                      	sbci	XH,255
                                 process_trigger_abs:
001137 30b0                      	cpi		XH,0
001138 f431                      	brne	process_trigger_count0
001139 30a6                      	cpi		XL,6
00113a f420                      	brsh	process_trigger_count0
00113b 3008                      	cpi		R16,trigger_base_count
00113c f418                      	brsh	process_trigger_count1
00113d 9503                      	inc		R16
00113e c001                      	rjmp	process_trigger_count1
                                 process_trigger_count0:
00113f e000                      	ldi		R16,0
                                 process_trigger_count1:
001140 9300 2eee                 	sts		flow_count,R16
                                 
001142 9120 2ef5                 	lds		R18,flow_flag				; if ((flag==0) && (count>=trigger_base_count)) base=sum/32, flag=1
001144 3020                      	cpi		R18,0
001145 f469                      	brne	process_trigger_nordy
001146 3008                      	cpi		R16,trigger_base_count
001147 f058                      	brlo	process_trigger_nordy
                                 process_trigger_base:
001148 95f5                      	asr		ZH
001149 95e7                      	ror		ZL
00114a 9506                      	lsr		R16
00114b f7e1                      	brne	process_trigger_base
00114c 93e0 2eef                 	sts		flow_base,ZL
00114e 93f0 2ef0                 	sts		flow_base+1,ZH
001150 e001                      	ldi		R16,1
001151 9300 2ef5                 	sts		flow_flag,R16
                                 process_trigger_nordy:
                                 
001153 d02d                      	rcall	process_trigger_pos_flow	; Analiza flujos positivos despues de apertura de paletas
001154 f159                      	breq	process_trigger_ret
                                 
001155 9100 2ef5                 	lds		R16,flow_flag				; if ((flag==1) && (flow-base)>trigger) flow_trigger++ else flow_trigger=0
001157 3001                      	cpi		R16,1
001158 f501                      	brne	process_trigger_ko
001159 91b0 2cda                 	lds		XH,sensors_flow_value+3
00115b 91a0 2cd9                 	lds		XL,sensors_flow_value+2
00115d 91f0 2ef0                 	lds		ZH,flow_base+1
00115f 91e0 2eef                 	lds		ZL,flow_base
001161 27ee                      	clr		ZL							; base=0
001162 27ff                      	clr		ZH
001163 1bae                      	sub		XL,ZL
001164 0bbf                      	sbc		XH,ZH
001165 f09c                      	brlt	process_trigger_ko
001166 91f0 2f27                 	lds		ZH,set_trigger+1
001168 91e0 2f26                 	lds		ZL,set_trigger
00116a 1bae                      	sub		XL,ZL
00116b 0bbf                      	sbc		XH,ZH
00116c f064                      	brlt	process_trigger_ko
00116d 9100 2ef6                 	lds		R16,flow_trigger
00116f 9503                      	inc		R16
001170 9300 2ef6                 	sts		flow_trigger,R16
001172 3002                      	cpi		R16,trigger_width				; if  (flow_trigger>=trigger_width) return 1;
001173 f040                      	brlo	process_trigger_ko1
001174 e000                      	ldi		R16,0
001175 9300 2ef7                 	sts		flow_apnea,R16
001177 9418                      	sez
001178 c007                      	rjmp	process_trigger_ret
                                 process_trigger_ko:
001179 e000                      	ldi		R16,0
00117a 9300 2ef6                 	sts		flow_trigger,R16
                                 process_trigger_ko1:
00117c e001                      	ldi		R16,1
00117d 9300 2ef7                 	sts		flow_apnea,R16
00117f 9498                      	clz
                                 
                                 process_trigger_ret:
001180 9508                      	ret
                                 
                                 
                                 
                                 ; Analiza flujos positivos
                                 ; lanza triger si flow>trigger por el tiempo trigger_pos_width
                                 ; y previamente  flow<-6 por el tiempo trigger_neg_width
                                 process_trigger_pos_flow:
001181 91a0 2cd9                 	lds		XL,sensors_flow_value+2				; Solo analiza flujo positivo
001183 91b0 2cda                 	lds		XH,sensors_flow_value+3
001185 fdb7                      	sbrc	XH,7
001186 c02e                      	rjmp	process_trigger_pos_ko
001187 c017                      	rjmp	process_trigger_pos_flow_pos_pulse
                                 
                                 
                                 
001188 91a0 2cd9                 	lds		XL,sensors_flow_value+2
00118a 91b0 2cda                 	lds		XH,sensors_flow_value+3
00118c ffb7                      	sbrs	XH,7
00118d c00d                      	rjmp	process_trigger_pos_flow_cmp_pos
00118e 5faa                      	subi	XL,low(-6)					; if (flow<6) flow_neg_count++
00118f 4fbf                      	sbci	XH,high(-6)
001190 f4dc                      	brge	process_trigger_pos_flow_cmp_fin
001191 e000                      	ldi		R16,0						; Reinicia contador tiempo pulso positivo
001192 9300 2ef8                 	sts		flow_pos_count,R16
001194 9100 2ef9                 	lds		R16,flow_neg_count			; flow_neg_count++
001196 9503                      	inc		R16
001197 f0a1                      	breq	process_trigger_pos_flow_cmp_fin
001198 9300 2ef9                 	sts		flow_neg_count,R16
00119a c011                      	rjmp	process_trigger_pos_flow_cmp_fin
                                 
                                 process_trigger_pos_flow_cmp_pos:
00119b 9100 2ef9                 	lds		R16,flow_neg_count			; verifica (flow_neg_count >= trigger_neg_width)
00119d 300a                      	cpi		R16,trigger_neg_width
00119e f068                      	brlo	process_trigger_pos_flow_cmp_fin
                                 
                                 process_trigger_pos_flow_pos_pulse:
00119f 91f0 2f27                 	lds		ZH,set_trigger+1
0011a1 91e0 2f26                 	lds		ZL,set_trigger
0011a3 1bae                      	sub		XL,ZL
0011a4 0bbf                      	sbc		XH,ZH
0011a5 f034                      	brlt	process_trigger_pos_flow_cmp_fin
0011a6 9100 2ef8                 	lds		R16,flow_pos_count
0011a8 9503                      	inc		R16
0011a9 f011                      	breq	process_trigger_pos_flow_cmp_fin
0011aa 9300 2ef8                 	sts		flow_pos_count,R16
                                 process_trigger_pos_flow_cmp_fin:
                                 
0011ac 9100 2ef8                 	lds		R16,flow_pos_count			; verifica (flow_pos_count >= trigger_pos_width)
0011ae 3004                      	cpi		R16,trigger_pos_width
0011af f028                      	brlo	process_trigger_pos_ko
0011b0 e000                      	ldi		R16,0						; trigger detected
0011b1 9300 2ef7                 	sts		flow_apnea,R16
0011b3 9418                      	sez
0011b4 c001                      	rjmp	process_trigger_pos_ret
                                 
                                 process_trigger_pos_ko:
0011b5 9498                      	clz
                                 
                                 process_trigger_pos_ret:
                                 .include "pc_cmv.asm"
0011b6 9508                      
                                  * PC_CMV.asm
                                  *
                                  *  Created: 17/05/2020 06:20:14 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .cseg
                                 pressure_pid_10:
0011b7 1400                      	.dw		int(20.00 *256)			; kp (int8+frac8)
0011b8 0006                      	.dw		int( 0.025 *256)			; ki (int8+frac8)
0011b9 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011ba 0000                      	.dw		0						; out_min
0011bb 00fa                      	.dw		250						; out_max
0011bc 2f20                      	.dw		set_pressure
                                 
                                 pressure_pid_16:
0011bd 0f00                      	.dw		int(15.00 *256)			; kp (int8+frac8)
0011be 0007                      	.dw		int( 0.03 *256)			; ki (int8+frac8)
0011bf 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011c0 0000                      	.dw		0						; out_min
0011c1 00fa                      	.dw		250						; out_max
0011c2 2f20                      	.dw		set_pressure
                                 
0011c3 0a00                      	.dw		int(10.00 *256)			; kp (int8+frac8)
0011c4 0000                      	.dw		int( 0.00 *256)			; ki (int8+frac8)
0011c5 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011c6 0000                      	.dw		0						; out_min
0011c7 00fa                      	.dw		250						; out_max
0011c8 2f20                      	.dw		set_pressure
                                 
                                 pressure_pid_22:
0011c9 0e00                      	.dw		int( 14.00 *256)		; kp (int8+frac8)
0011ca 0040                      	.dw		int( 0.25 *256)			; ki (int8+frac8)
                                 ;	.dw		int( 15.00 *256)		; kp (int8+frac8)
                                 ;	.dw		int( 0.00 *256)			; ki (int8+frac8)
0011cb 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011cc 0000                      	.dw		0						; out_min
0011cd 00fa                      	.dw		250						; out_max
0011ce 2f20                      	.dw		set_pressure
                                 
                                 pressure_pid_28:
0011cf 0d00                      	.dw		int(13.00 *256)			; kp (int8+frac8) 10
0011d0 0000                      	.dw		int( 0.00 *256)			; ki (int8+frac8)
0011d1 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011d2 0000                      	.dw		0						; out_min
0011d3 00fa                      	.dw		250						; out_max
0011d4 2f20                      	.dw		set_pressure
                                 
                                 pressure_pid_34:
0011d5 0b00                      	.dw		int(11.00 *256)			; kp (int8+frac8)
0011d6 0000                      	.dw		int( 0.00 *256)			; ki (int8+frac8)
0011d7 0000                      	.dw		int( 0.00 *256)			; kd (int8+frac8)
0011d8 0000                      	.dw		0						; out_min
0011d9 00fa                      	.dw		250						; out_max
0011da 2f20                      	.dw		set_pressure
                                 
                                 
                                 pc_cmv_pid_table:
                                 	; presure<sp, t<1.0 pid, t>=1.0 pid
0011db 000d
0011dc 11b7                      	.dw		13,pressure_pid_10
0011dd 0014
0011de 11bd                      	.dw		19+1,pressure_pid_16
0011df 001a
0011e0 11c9                      	.dw		25+1,pressure_pid_22
0011e1 0020
0011e2 11cf                      	.dw		31+1,pressure_pid_28
0011e3 0024
0011e4 11d5                      	.dw		35+1,pressure_pid_34
                                 ; Verify range of last line!!!
                                 
                                 
                                 
                                 .dseg
002efa                           pc_pressure_add:		.byte 1
                                 
                                 .cseg
                                 ; pressure control continous mandatory ventilation
                                 pc_cmv_process:
0011e5 e2f3                      	ldi		ZH,high(pc_cmv_pid_table*2)			; pid settings
0011e6 ebe6                      	ldi		ZL,low(pc_cmv_pid_table*2)
0011e7 9100 2f20                 	lds		R16,set_pressure					; sp pressure
0011e9 d00d                      	rcall	pc_cmv_load_pid_settings
                                 
0011ea d8ce                      	rcall	sensors_volume_reset				; clear volume data
0011eb d8d7                      	rcall	sensors_max_reset
                                 
0011ec 940e 0692                 	call	stepper_alarm_enable				; stepper alarm enable
0011ee d044                      	rcall	process_inspiration_pressure
0011ef db42                      	rcall	screen_tx_data_sensors
0011f0 940e 06a3                 	call	stepper_alarm_disable				; clear alarm flag
                                 
                                 
0011f2 d334                      	rcall	vc_cmv_calc_time_exp
0011f3 de78                      	rcall	process_expiration
0011f4 d34d                      	rcall	vc_cmv_restore_time_exp
                                 
0011f5 d064                      	rcall	pc_cmv_follow_pressure
0011f6 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; input:	z   -> pid settings table
                                 ;			R16 -> set point
                                 pc_cmv_load_pid_settings:
0011f7 9115                      	lpm		R17,Z+									; setpoint
0011f8 9125                      	lpm		R18,Z+
0011f9 9125                      	lpm		R18,Z+									; pid table
0011fa 9135                      	lpm		R19,Z+
                                 
0011fb 1701                      	cp		R16,R17
0011fc f7d0                      	brsh	pc_cmv_load_pid_settings
                                 
0011fd 2fe2                      	mov		ZL,R18
0011fe 2ff3                      	mov		ZH,R19
0011ff 0fee                      	lsl		ZL
001200 1fff                      	rol		ZH
                                 
001201 de3a                      	rcall	load_pid_settings
                                 
001202 9100 2f20                 	lds		R16,set_pressure					; sp pressure
001204 9110 2efa                 	lds		R17,pc_pressure_add
001206 0f01                      	add		R16,R17
001207 9300 2e94                 	sts		pid_sp,R16
001209 9508                      	ret
                                 
                                 
                                 
                                 
                                 pc_cmv_copy_set_values:
00120a 911d                      	ld		R17,X+
00120b 9310 2f20                 	sts		set_pressure,R17
00120d 911d                      	ld		R17,X+
00120e 9310 2f21                 	sts		set_pressure+1,R17
                                 
001210 911d                      	ld		R17,X+
001211 9310 2f1a                 	sts		set_insp_time_cs,R17
001213 911d                      	ld		R17,X+
001214 9310 2f1b                 	sts		set_insp_time_cs+1,R17
                                 
001216 911d                      	ld		R17,X+
001217 9310 2f1e                 	sts		set_exp_time_cs,R17
001219 911d                      	ld		R17,X+
00121a 9310 2f1f                 	sts		set_exp_time_cs+1,R17
                                 
00121c 911d                      	ld		R17,X+
00121d 9310 2f26                 	sts		set_trigger,R17
00121f 911d                      	ld		R17,X+
001220 9310 2f27                 	sts		set_trigger+1,R17
                                 
001222 911d                      	ld		R17,X+
001223 9310 2f29                 	sts		set_fio2,R17
001225 911d                      	ld		R17,X+
001226 9310 2f2a                 	sts		set_fio2+1,R17
                                 
001228 e010                      	ldi		R17,0									; Init compensated flow
001229 9310 2efc                 	sts		vc_cmv_insp_time_extra,R17
00122b 9310 2eab                 	sts		exp_fall_time,R17
                                 
00122d e010                      	ldi		R17,0									; Init compensated flow
00122e 9310 2f0c                 	sts		insp_flow_add,R17
001230 9310 2efa                 	sts		pc_pressure_add,R17
                                 
001232 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 process_inspiration_pressure:
001233 e001                      	ldi		R16,1								; transmit inspiracion event to screen
001234 9300 2f2c                 	sts		vent_phase,R16
001236 daed                      	rcall	screen_tx_event
                                 
001237 91a0 2f1a                 	lds		XL,set_insp_time_cs					; inspiration time
001239 91b0 2f1b                 	lds		XH,set_insp_time_cs+1
                                 
00123b e000                      	ldi		R16,0
00123c 9300 2efd                 	sts		vc_cmv_insp_rise_time,R16
00123e 9300 2f0a                 	sts		vc_cmv_insp_flag,R16
001240 9300 2eac                 	sts		exp_start_flag,R16
                                 
                                 process_inspiration_pressure_loop:
001242 93af                      	push	XL
001243 93bf                      	push	XH
001244 ddd7                      	rcall	pid_wait_sampling_time				; wait pid sampling time
001245 d9ad                      	rcall	check_alarms						; skip if alarm detected
001246 f459                      	brne	process_inspiration_pressure_alarm
001247 91b0 2cb6                 	lds		XH,sensors_pressure_value+3			; control variable
001249 91a0 2cb5                 	lds		XL,sensors_pressure_value+2
00124b 90f0 2cb4                 	lds		R15,sensors_pressure_value+1
00124d dd42                      	rcall	pid_process							; pid control
00124e 93a0 2c9a                 	sts		stepper_speed_sp,XL					; update control variable
001250 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
                                 process_inspiration_pressure_alarm:
001252 dab4                      	rcall	screen_tx_data_PFV
                                 
001253 91bf                      	pop		XH
001254 91af                      	pop		XL
                                 
001255 d24c                      	rcall	check_inspiration_start
001256 f759                      	brne	process_inspiration_pressure_loop
                                 
001257 9711                      	sbiw	XL,1
001258 f749                      	brne	process_inspiration_pressure_loop
001259 9508                      	ret
                                 
                                 
                                 
                                 pc_cmv_follow_pressure:
00125a 9100 2f20                 	lds		R16,set_pressure					; sp pressure
00125c 9110 2d6f                 	lds		R17,sensors_pressure_max+2
00125e 9120 2d6e                 	lds		R18,sensors_pressure_max+1
001260 fd27                      	sbrc	R18,7
001261 9513                      	inc		R17
001262 9120 2efa                 	lds		R18,pc_pressure_add
001264 5000                      	subi	R16,-1+1
001265 1701                      	cp		R16,R17
001266 f040                      	brlo	pc_cmv_follow_pressure_dec
001267 5001                      	subi	R16,3-2
001268 1701                      	cp		R16,R17
001269 f408                      	brsh	pc_cmv_follow_pressure_inc
00126a c009                      	rjmp	pc_cmv_follow_pressure_ret
                                 pc_cmv_follow_pressure_inc:
00126b 3025                      	cpi		R18,4+1
00126c f43c                      	brge	pc_cmv_follow_pressure_ret
00126d 9523                      	inc		R18
00126e c003                      	rjmp	pc_cmv_follow_pressure_update
                                 pc_cmv_follow_pressure_dec:
00126f 3f2c                      	cpi		R18,-4
001270 f01c                      	brlt	pc_cmv_follow_pressure_ret
001271 952a                      	dec		R18
                                 pc_cmv_follow_pressure_update:
001272 9320 2efa                 	sts		pc_pressure_add,R18
                                 pc_cmv_follow_pressure_ret:
001274 9508                      	ret
                                 
                                 .include "vc_cmv.asm"
                                 
                                  * vc_cmv.asm
                                  *
                                  *  Created: 18/05/2020 07:47:10 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 .equ	pause_min_time_cs	= 10	; minimum pause time from 1 to 63
                                 .equ	ctrl_flow_max		= 90
                                 
                                 
                                 .cseg
                                 
                                 flow_pid_5:
001275 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8)
001276 004c                      	.dw		int( 0.3 *256)			; ki (int8+frac8)
001277 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
001278 000e                      	.dw		14						; out_min
001279 0032                      	.dw		50						; out_max
00127a 2f22                      	.dw		set_flow
                                 
                                 flow_pid_10:
00127b 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8)
00127c 004c                      	.dw		int( 0.3 *256)			; ki (int8+frac8)
00127d 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
00127e 0013                      	.dw		19						; out_min
00127f 00fa                      	.dw		250						; out_max
001280 2f22                      	.dw		set_flow
                                 
                                 flow_pid_15:
001281 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8) 5 l/m
001282 0033                      	.dw		int( 0.2 *256)			; ki (int8+frac8)
001283 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
001284 0012                      	.dw		18						; out_min
001285 00fa                      	.dw		250						; out_max
001286 2f22                      	.dw		set_flow
                                 
                                 flow_pid_20:
001287 0200                      	.dw		int( 2.0 *256)			; kp (int8+frac8) 10 l/m 6
001288 004c                      	.dw		int( 0.3 *256)			; ki (int8+frac8)		.15
001289 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
00128a 0016                      	.dw		22						; out_min
00128b 00fa                      	.dw		250						; out_max
00128c 2f22                      	.dw		set_flow
                                 
                                 flow_pid_25:
00128d 0200                      	.dw		int( 2.0 *256)			; kp (int8+frac8) 10 l/m
00128e 0066                      	.dw		int( 0.4 *256)			; ki (int8+frac8)
00128f 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
001290 0023                      	.dw		35						; out_min
001291 00fa                      	.dw		250						; out_max
001292 2f22                      	.dw		set_flow
                                 
                                 flow_pid_30:
001293 0200                      	.dw		int( 2.0 *256)			; kp (int8+frac8) 10 l/m
001294 0066                      	.dw		int( 0.4 *256)			; ki (int8+frac8)
001295 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
001296 0028                      	.dw		40						; out_min
001297 00fa                      	.dw		250						; out_max
001298 2f22                      	.dw		set_flow
                                 
                                 flow_pid_35:
001299 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8) 20 l/m
00129a 0066                      	.dw		int( 0.4 *256)			; ki (int8+frac8)
00129b 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
00129c 0023                      	.dw		35						; out_min
00129d 00fa                      	.dw		250						; out_max
00129e 2f22                      	.dw		set_flow
                                 
                                 flow_pid_40:
00129f 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8) 25 l/m
0012a0 0066                      	.dw		int( 0.4 *256)			; ki (int8+frac8)
0012a1 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
0012a2 0026                      	.dw		38						; out_min
0012a3 0096                      	.dw		150						; out_max
0012a4 2f22                      	.dw		set_flow
                                 
                                 flow_pid_45:
0012a5 0200                      	.dw		int( 2.0 *256)			; kp (int8+frac8) 25 l/m
0012a6 0080                      	.dw		int( 0.5 *256)			; ki (int8+frac8)
0012a7 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
0012a8 002d                      	.dw		45						; out_min
0012a9 00fa                      	.dw		250						; out_max
0012aa 2f22                      	.dw		set_flow
                                 
                                 flow_pid_50:
0012ab 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8) 25 l/m
0012ac 0080                      	.dw		int( 0.5 *256)			; ki (int8+frac8)
0012ad 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
0012ae 003c                      	.dw		60						; out_min
0012af 00fa                      	.dw		250						; out_max
0012b0 2f22                      	.dw		set_flow
                                 
                                 flow_pid_55:
0012b1 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8) 25 l/m
0012b2 00b3                      	.dw		int( 0.7 *256)			; ki (int8+frac8)
0012b3 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
0012b4 0034                      	.dw		52						; out_min
0012b5 00fa                      	.dw		250						; out_max
0012b6 2f22                      	.dw		set_flow
                                 
                                 flow_pid_60:
0012b7 0300                      	.dw		int( 3.0 *256)			; kp (int8+frac8)	60 l/m
0012b8 00b3                      	.dw		int( 0.7 *256)			; ki (int8+frac8)
0012b9 0000                      	.dw		int( 0.0 *256)			; kd (int8+frac8)
0012ba 003c                      	.dw		60						; out_min
0012bb 00fa                      	.dw		250						; out_max
0012bc 2f22                      	.dw		set_flow
                                 
                                 
                                 vc_cmv_pid_table:
                                 	; flow<sp, pid
0012bd 0008
0012be 1275                      	.dw		8,flow_pid_5
0012bf 000d
0012c0 127b                      	.dw		13,flow_pid_10
0012c1 0012
0012c2 1281                      	.dw		18,flow_pid_15
0012c3 0017
0012c4 1287                      	.dw		23,flow_pid_20
0012c5 001c
0012c6 128d                      	.dw		28,flow_pid_25
0012c7 0021
0012c8 1293                      	.dw		33,flow_pid_30
0012c9 0026
0012ca 1299                      	.dw		38,flow_pid_35
0012cb 002b
0012cc 129f                      	.dw		43,flow_pid_40
0012cd 0030
0012ce 12a5                      	.dw		48,flow_pid_45
0012cf 0035
0012d0 12ab                      	.dw		53,flow_pid_50
0012d1 003a
0012d2 12b1                      	.dw		58,flow_pid_55
0012d3 003d
0012d4 12b7                      	.dw		61,flow_pid_60
                                 
                                 ; Verify range of last line!!!
                                 
                                 
                                 .equ flow_table_first = 14
                                 .equ flow_table_last  = 78
                                 vc_cmv_flow_table:
0012d5 0027
0012d6 000f                      	.dw  39 , 15      ; 14
0012d7 0029
0012d8 0010                      	.dw  41 , 16      ; 15
0012d9 002b
0012da 0012                      	.dw  43 , 18      ; 16
0012db 002d
0012dc 0014                      	.dw  45 , 20      ; 17
0012dd 0030
0012de 0016                      	.dw  48 , 22      ; 18
0012df 0033
0012e0 0019                      	.dw  51 , 25      ; 19
0012e1 0036
0012e2 001c                      	.dw  54 , 28      ; 20
0012e3 0039
0012e4 001f                      	.dw  57 , 31      ; 21
0012e5 003c
0012e6 0022                      	.dw  60 , 34      ; 22
0012e7 003f
0012e8 0026                      	.dw  63 , 38      ; 23
0012e9 0042
0012ea 002a                      	.dw  66 , 42      ; 24
0012eb 0045
0012ec 002e                      	.dw  69 , 46      ; 25
0012ed 0048
0012ee 0032                      	.dw  72 , 50      ; 26
0012ef 004b
0012f0 0037                      	.dw  75 , 55      ; 27
0012f1 004e
0012f2 003c                      	.dw  78 , 60      ; 28
0012f3 0051
0012f4 0041                      	.dw  81 , 65      ; 29
0012f5 0054
0012f6 0046                      	.dw  84 , 70      ; 30
0012f7 0057
0012f8 004c                      	.dw  87 , 76      ; 31
0012f9 005a
0012fa 0052                      	.dw  90 , 82      ; 32
0012fb 005d
0012fc 0058                      	.dw  93 , 88      ; 33
0012fd 0060
0012fe 005e                      	.dw  96 , 94      ; 34
0012ff 0063
001300 0064                      	.dw  99 , 100      ; 35
001301 0066
001302 006b                      	.dw  102 , 107      ; 36
001303 0069
001304 0072                      	.dw  105 , 114      ; 37
001305 006c
001306 0079                      	.dw  108 , 121      ; 38
001307 006f
001308 0080                      	.dw  111 , 128      ; 39
001309 0072
00130a 0087                      	.dw  114 , 135      ; 40
00130b 0075
00130c 008f                      	.dw  117 , 143      ; 41
00130d 0078
00130e 0097                      	.dw  120 , 151      ; 42
00130f 007b
001310 009f                      	.dw  123 , 159      ; 43
001311 007e
001312 00a7                      	.dw  126 , 167      ; 44
001313 0081
001314 00af                      	.dw  129 , 175      ; 45
001315 0084
001316 00b8                      	.dw  132 , 184      ; 46
001317 0088
001318 00c1                      	.dw  136 , 193      ; 47
001319 008c
00131a 00ca                      	.dw  140 , 202      ; 48
00131b 0090
00131c 00d3                      	.dw  144 , 211      ; 49
00131d 0094
00131e 00dc                      	.dw  148 , 220      ; 50
00131f 0098
001320 00e5                      	.dw  152 , 229      ; 51
001321 009c
001322 00ef                      	.dw  156 , 239      ; 52
001323 00a0
001324 00f9                      	.dw  160 , 249      ; 53
001325 00a4
001326 0103                      	.dw  164 , 259      ; 54
001327 00a7
001328 010d                      	.dw  167 , 269      ; 55
001329 00aa
00132a 0117                      	.dw  170 , 279      ; 56
00132b 00ad
00132c 0121                      	.dw  173 , 289      ; 57
00132d 00b0
00132e 012c                      	.dw  176 , 300      ; 58
00132f 00b3
001330 0137                      	.dw  179 , 311      ; 59
001331 00b6
001332 0142                      	.dw  182 , 322      ; 60
001333 00b9
001334 014d                      	.dw  185 , 333      ; 61
001335 00bc
001336 0158                      	.dw  188 , 344      ; 62
001337 00bf
001338 0163                      	.dw  191 , 355      ; 63
001339 00c2
00133a 016e                      	.dw  194 , 366      ; 64
00133b 00c5
00133c 017a                      	.dw  197 , 378      ; 65
00133d 00c8
00133e 0186                      	.dw  200 , 390      ; 66
00133f 00cb
001340 0192                      	.dw  203 , 402      ; 67
001341 00ce
001342 019e                      	.dw  206 , 414      ; 68
001343 00d1
001344 01aa                      	.dw  209 , 426      ; 69
001345 00d4
001346 01b5                      	.dw  212 , 437      ; 70
001347 00d7
001348 01c0                      	.dw  215 , 448      ; 71
001349 00da
00134a 01cb                      	.dw  218 , 459      ; 72
00134b 00dd
00134c 01d6                      	.dw  221 , 470      ; 73
00134d 00e0
00134e 01e1                      	.dw  224 , 481      ; 74
00134f 00e3
001350 01ec                      	.dw  227 , 492      ; 75
001351 00e6
001352 01f7                      	.dw  230 , 503      ; 76
001353 00e9
001354 0202                      	.dw  233 , 514      ; 77
001355 00ec
001356 020d                      	.dw  236 , 525      ; 78
                                 
                                 
                                 
                                 
                                 
                                 .dseg
002efb                           vc_cmv_ctrl_curr_flow:		.byte 1
002efc                           vc_cmv_insp_time_extra:		.byte 1
002efd                           vc_cmv_insp_rise_time:		.byte 1
002efe                           vc_cmv_exp_time_save:		.byte 2
002f00                           vc_cmv_vol_thr_low:			.byte 2
002f02                           vc_cmv_vol_thr_high:		.byte 2
002f04                           vc_cmv_vol_err_min:			.byte 1
                                 
002f05                           vc_cmv_last_set_vol:		.byte 2
002f07                           vc_cmv_last_set_time:		.byte 2
                                 
002f09                           vc_cmv_alarm:				.byte 1
002f0a                           vc_cmv_insp_flag:			.byte 1
002f0b                           vc_cmv_over_flag:			.byte 1
                                 
002f0c                           insp_flow_add:			.byte 1
002f0d                           vc_cmv_vol_low:			.byte 2
002f0f                           vc_cmv_vol_high:		.byte 2
002f11                           vc_cmd_last_set_vol:	.byte 2
002f13                           vc_cmd_last_set_flow:	.byte 1
002f14                           vc_cmd_last_set_time:	.byte 2
                                 
                                 
                                 .cseg
                                 main_vc_cmv_pid:
001357 e2f5                      	ldi		ZH,high(vc_cmv_pid_table*2)			; pid settings
001358 e7ea                      	ldi		ZL,low(vc_cmv_pid_table*2)
001359 d016                      	rcall	vc_cmv_sp_flow						; sp flow compensated
00135a 2f0a                      	mov		R16,XL
00135b d04d                      	rcall	vc_cmv_load_pid_settings
                                 
00135c d013                      	rcall	vc_cmv_sp_flow						; sp flow compensated
00135d 93a0 2e94                 	sts		pid_sp,XL
00135f 93b0 2e95                 	sts		pid_sp+1,XH
                                 
001361 940e 0ab9                 	call	sensors_volume_reset				; clear volume data
001363 940e 0ac3                 	call	sensors_max_reset
                                 
001365 940e 0692                 	call	stepper_alarm_enable				; stepper alarm enable
001367 d084                      	rcall	process_inspiration_flow_pid
001368 d0a2                      	rcall	process_inspiration_flow_vol		; extra time to try complete minimum volume
001369 d9c8                      	rcall	screen_tx_data_sensors
00136a 940e 06a3                 	call	stepper_alarm_disable				; clear alarm flag
                                 
00136c d266                      	rcall	process_pause
00136d dcfe                      	rcall	process_expiration
                                 
00136e d016                      	rcall	main_vc_cmv_follow_volume
00136f 9508                      	ret
                                 
                                 
                                 
                                 ; sp flow compensated
                                 vc_cmv_sp_flow:
001370 91b0 2f23                 	lds		XH,set_flow+1						; compensated target flow
001372 91a0 2f22                 	lds		XL,set_flow
001374 9100 2f0c                 	lds		R16,insp_flow_add
001376 0fa0                      	add		XL,R16
001377 e000                      	ldi		R16,0
001378 1fb0                      	adc		XH,R16
001379 30b0                      	cpi		XH,0
00137a f439                      	brne	vc_cmv_sp_flow_top
00137b 33ac                      	cpi		XL,60
00137c f428                      	brsh	vc_cmv_sp_flow_top
00137d 30a5                      	cpi		XL,5
00137e f428                      	brsh	vc_cmv_sp_flow_ret
00137f e0a5                      	ldi		XL,5
001380 e0b0                      	ldi		XH,0
001381 c002                      	rjmp	vc_cmv_sp_flow_ret
                                 vc_cmv_sp_flow_top:
001382 e3ac                      	ldi		XL,60
001383 e0b0                      	ldi		XH,00
                                 vc_cmv_sp_flow_ret:
001384 9508                      	ret
                                 
                                 
                                 
                                 
                                 main_vc_cmv_follow_volume:
001385 9100 2efc                 	lds		R16,vc_cmv_insp_time_extra			; check if extra inspiration time was needed
001387 300e                      	cpi		R16,14
001388 f4c8                      	brsh	main_vc_cmv_follow_volume_inc
                                 
001389 91d0 2d78                 	lds		YH,sensors_volume_max+3				; check tidal volume
00138b 91c0 2d77                 	lds		YL,sensors_volume_max+2
00138d 91f0 2f10                 	lds		ZH,vc_cmv_vol_high+1
00138f 91e0 2f0f                 	lds		ZL,vc_cmv_vol_high
001391 17ce                      	cp		YL,ZL
001392 07df                      	cpc		YH,ZH
001393 f038                      	brlo	main_vc_cmv_follow_volume_no_dec
001394 9100 2f0c                 	lds		R16,insp_flow_add
001396 950a                      	dec		R16
001397 f081                      	breq	main_vc_cmv_follow_volume_ret
001398 9300 2f0c                 	sts		insp_flow_add,R16
00139a c00d                      	rjmp	main_vc_cmv_follow_volume_ret
                                 main_vc_cmv_follow_volume_no_dec:
                                 
                                 
00139b 91f0 2f0e                 	lds		ZH,vc_cmv_vol_low+1
00139d 91e0 2f0d                 	lds		ZL,vc_cmv_vol_low
00139f 17ce                      	cp		YL,ZL
0013a0 07df                      	cpc		YH,ZH
0013a1 f430                      	brsh	main_vc_cmv_follow_volume_ret
                                 main_vc_cmv_follow_volume_inc:
0013a2 9100 2f0c                 	lds		R16,insp_flow_add
0013a4 9503                      	inc		R16
0013a5 f011                      	breq	main_vc_cmv_follow_volume_ret
0013a6 9300 2f0c                 	sts		insp_flow_add,R16
                                 
                                 main_vc_cmv_follow_volume_ret:
0013a8 9508                      	ret
                                 
                                 
                                 
                                 
                                 ; input:	z   -> pid settings table
                                 ;			R16 -> set point
                                 vc_cmv_load_pid_settings:
0013a9 9115                      	lpm		R17,Z+									; setpoint
0013aa 9125                      	lpm		R18,Z+
0013ab 9125                      	lpm		R18,Z+									; pid table
0013ac 9135                      	lpm		R19,Z+
                                 
0013ad 1701                      	cp		R16,R17
0013ae f7d0                      	brsh	vc_cmv_load_pid_settings
                                 
0013af 2fe2                      	mov		ZL,R18
0013b0 2ff3                      	mov		ZH,R19
0013b1 0fee                      	lsl		ZL
0013b2 1fff                      	rol		ZH
                                 
0013b3 dc88                      	rcall	load_pid_settings
                                 
0013b4 9508                      	ret
                                 
                                 
                                 
                                 ; do not modify R16
                                 vc_cmv_chk_compensated_flow:
0013b5 9110 2f0c                 	lds		R17,insp_flow_add						; check compensated flow
0013b7 91f0 2f25                 	lds		ZH,set_vol+1
0013b9 91e0 2f24                 	lds		ZL,set_vol
0013bb 9120 2f1a                 	lds		R18,set_insp_time_cs
0013bd 9130 2f1b                 	lds		R19,set_insp_time_cs+1
0013bf 91c0 2f22                 	lds		YL,set_flow
0013c1 91a0 2f11                 	lds		XL,vc_cmd_last_set_vol
0013c3 91b0 2f12                 	lds		XH,vc_cmd_last_set_vol+1
0013c5 9140 2f14                 	lds		R20,vc_cmd_last_set_time
0013c7 9150 2f15                 	lds		R21,vc_cmd_last_set_time+1
0013c9 91d0 2f13                 	lds		YH,vc_cmd_last_set_flow
0013cb 3010                      	cpi		R17,0
0013cc f089                      	breq	vc_cmv_chk_compensated_flow_restart
                                 
0013cd 17ea                      	cp		ZL,XL									; check volume change
0013ce 07fb                      	cpc		ZH,XH
0013cf f070                      	brlo	vc_cmv_chk_compensated_flow_restart
0013d0 f021                      	breq	vc_cmv_chk_compensated_flow_no_vol_change
0013d1 1742                      	cp		R20,R18
0013d2 0753                      	cpc		R21,R19
0013d3 f050                      	brlo	vc_cmv_chk_compensated_flow_restart
0013d4 c004                      	rjmp	vc_cmv_chk_compensated_flow_calc
                                 vc_cmv_chk_compensated_flow_no_vol_change:
                                 
0013d5 1742                      	cp		R20,R18									; check time change
0013d6 0753                      	cpc		R21,R19
0013d7 f030                      	brlo	vc_cmv_chk_compensated_flow_restart
0013d8 f091                      	breq	vc_cmv_chk_compensated_flow_ret
                                 vc_cmv_chk_compensated_flow_calc:
                                 
0013d9 0f1d                      	add		R17,YH									; check last compensated flow
0013da 17c1                      	cp		YL,R17
0013db f410                      	brsh	vc_cmv_chk_compensated_flow_restart
0013dc 1b1c                      	sub		R17,YL
0013dd c001                      	rjmp	vc_cmv_chk_compensated_flow_update
                                 
                                 vc_cmv_chk_compensated_flow_restart:
0013de e010                      	ldi		R17,0									; Init compensated flow
                                 
                                 vc_cmv_chk_compensated_flow_update:
0013df 9310 2f0c                 	sts		insp_flow_add,R17
0013e1 93e0 2f11                 	sts		vc_cmd_last_set_vol,ZL
0013e3 93f0 2f12                 	sts		vc_cmd_last_set_vol+1,ZH
0013e5 9320 2f14                 	sts		vc_cmd_last_set_time,R18
0013e7 9330 2f15                 	sts		vc_cmd_last_set_time+1,R19
0013e9 93c0 2f13                 	sts		vc_cmd_last_set_flow,YL
                                 
                                 vc_cmv_chk_compensated_flow_ret:
0013eb 9508                      	ret
                                 
                                 
                                 
                                 process_inspiration_flow_pid:
0013ec e001                      	ldi		R16,1								; transmit inspiracion event to screen
0013ed 9300 2f2c                 	sts		vent_phase,R16
0013ef d934                      	rcall	screen_tx_event
                                 
0013f0 91a0 2f1a                 	lds		XL,set_insp_time_cs					; inspiration time
0013f2 91b0 2f1b                 	lds		XH,set_insp_time_cs+1
                                 process_inspiration_flow_pid_loop:
0013f4 93af                      	push	XL
0013f5 93bf                      	push	XH
0013f6 dc25                      	rcall	pid_wait_sampling_time				; wait pid sampling time
0013f7 91b0 2cda                 	lds		XH,sensors_flow_value+3				; control variable
0013f9 91a0 2cd9                 	lds		XL,sensors_flow_value+2
0013fb 9100 2cd8                 	lds		R16,sensors_flow_value+1
0013fd db92                      	rcall	pid_process							; pid control
0013fe 93a0 2c9a                 	sts		stepper_speed_sp,XL					; update control variable
001400 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
001402 d904                      	rcall	screen_tx_data_PFV
                                 
001403 940e 0bf3                 	call	check_alarms						; skip if alarm detected
001405 91bf                      	pop		XH
001406 91af                      	pop		XL
001407 f411                      	brne	process_inspiration_flow_pid_ret
                                 
001408 9711                      	sbiw	XL,1
001409 f751                      	brne	process_inspiration_flow_pid_loop
                                 process_inspiration_flow_pid_ret:
00140a 9508                      	ret
                                 
                                 
                                 
                                 
                                 process_inspiration_flow_vol:
00140b e000                      	ldi		R16,0								; extra inpiration time for tidal volume
00140c 9300 2efc                 	sts		vc_cmv_insp_time_extra,R16
00140e 91d0 2d78                 	lds		YH,sensors_volume_max+3				; check tidal volume
001410 91c0 2d77                 	lds		YL,sensors_volume_max+2
001412 91f0 2f0e                 	lds		ZH,vc_cmv_vol_low+1
001414 91e0 2f0d                 	lds		ZL,vc_cmv_vol_low
001416 17ce                      	cp		YL,ZL
001417 07df                      	cpc		YH,ZH
001418 f510                      	brsh	process_inspiration_flow_vol_ret
                                 
                                 process_inspiration_flow_vol_loop:
001419 dc02                      	rcall	pid_wait_sampling_time				; wait pid sampling time
00141a 91b0 2cda                 	lds		XH,sensors_flow_value+3				; control variable
00141c 91a0 2cd9                 	lds		XL,sensors_flow_value+2
00141e 9100 2cd8                 	lds		R16,sensors_flow_value+1
001420 db6f                      	rcall	pid_process							; pid control
001421 93a0 2c9a                 	sts		stepper_speed_sp,XL					; update control variable
001423 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
001425 d8e1                      	rcall	screen_tx_data_PFV
001426 9100 2efc                 	lds		R16,vc_cmv_insp_time_extra
001428 9503                      	inc		R16
001429 9300 2efc                 	sts		vc_cmv_insp_time_extra,R16
                                 
00142b 940e 0bf3                 	call	check_alarms						; skip if alarm detected
00142d f469                      	brne	process_inspiration_flow_vol_ret
                                 
00142e 91b0 2d6c                 	lds		XH,sensors_volume_value+3			; control variable
001430 91a0 2d6b                 	lds		XL,sensors_volume_value+2
001432 91f0 2f0e                 	lds		ZH,vc_cmv_vol_low+1
001434 91e0 2f0d                 	lds		ZL,vc_cmv_vol_low
001436 17ae                      	cp		XL,ZL
001437 07bf                      	cpc		XH,ZH
001438 f410                      	brsh	process_inspiration_flow_vol_ret
001439 3f0f                      	cpi		R16,255
00143a f6f1                      	brne	process_inspiration_flow_vol_loop
                                 process_inspiration_flow_vol_ret:
00143b 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; volume control continous mandatory ventilation
                                 main_vc_cmv:
00143c e2f5                      	ldi		ZH,high(vc_cmv_pid_table*2)			; pid settings
00143d e7ea                      	ldi		ZL,low(vc_cmv_pid_table*2)
00143e d019                      	rcall	vc_cmv_load_sp
                                 ;	lds		R16,set_flow
00143f df69                      	rcall	vc_cmv_load_pid_settings
                                 
                                 ;	ldi		R16,15
                                 ;	sts		insp_flow_add,R16
                                 ;	rcall	vc_cmv_sp_flow						; sp flow compensated
                                 ;	ldi		XL,25 ;25
001440 91a0 148a                 	lds		XL,EEPROM_START+ee_pulse_flow_sp
001442 93a0 2e94                 	sts		pid_sp,XL
                                 ;	sts		pid_sp+1,XH
                                 
001444 940e 0ab9                 	call	sensors_volume_reset				; clear volume data
001446 940e 0ac3                 	call	sensors_max_reset
                                 
001448 940e 0692                 	call	stepper_alarm_enable				; stepper alarm enable
00144a d017                      	rcall	process_inspiration_flow
00144b d8e6                      	rcall	screen_tx_data_sensors
                                 
00144c 9100 2ca1                 	lds		R16,stepper_pressure_alarm			; save alarm pressure for later
00144e 9300 2f09                 	sts		vc_cmv_alarm,R16
001450 940e 06a3                 	call	stepper_alarm_disable				; clear alarm flag
                                 
001452 d180                      	rcall	process_pause
                                 
001453 d0d3                      	rcall	vc_cmv_calc_time_exp
001454 dc17                      	rcall	process_expiration
001455 d0ec                      	rcall	vc_cmv_restore_time_exp
                                 
001456 d19a                      	rcall	vc_cmv_follow_volume
001457 9508                      	ret
                                 
                                 
                                 vc_cmv_load_sp:
001458 9100 148a                 	lds		R16,EEPROM_START+ee_pulse_flow_sp
00145a 300f                      	cpi		R16,15
00145b f410                      	brsh	vc_cmv_load_sp_top
00145c e00f                      	ldi		R16,15
00145d c003                      	rjmp	vc_cmv_load_sp_ret
                                 vc_cmv_load_sp_top:
00145e 3302                      	cpi		R16,50
00145f f008                      	brlo	vc_cmv_load_sp_ret
001460 e302                      	ldi		R16,50
                                 vc_cmv_load_sp_ret:
                                 ;	ldi		R16,25
001461 9508                      	ret
                                 
                                 
                                 
                                 .dseg
002f16                           process_flow_init_pulse_time:	.byte 1
                                 .cseg
                                 process_inspiration_flow:
001462 e001                      	ldi		R16,1								; transmit inspiracion event to screen
001463 9300 2f2c                 	sts		vent_phase,R16
001465 d8be                      	rcall	screen_tx_event
                                 
001466 91a0 2f1a                 	lds		XL,set_insp_time_cs					; inspiration time
001468 91b0 2f1b                 	lds		XH,set_insp_time_cs+1
00146a 9100 2efc                 	lds		R16,vc_cmv_insp_time_extra
00146c 0fa0                      	add		XL,R16
00146d e000                      	ldi		R16,0
00146e 1fb0                      	adc		XH,R16
00146f 9300 2efd                 	sts		vc_cmv_insp_rise_time,R16
001471 9300 2f0a                 	sts		vc_cmv_insp_flag,R16
001473 9300 2eac                 	sts		exp_start_flag,R16
001475 9300 2f0b                 	sts		vc_cmv_over_flag,R16
                                 
                                 	;ldi		R16,50 ;15
001477 9100 1489                 	lds		R16,EEPROM_START+ee_pulse_time
001479 9300 2f16                 	sts		process_flow_init_pulse_time,R16
00147b d08f                      	rcall	ctrl_flow_parameters_read
00147c 9310 2c9a                 	sts		stepper_speed_sp,R17				; update control variable
00147e 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 process_inspiration_flow_loop1:
001480 930f                      	push	R16
001481 931f                      	push	R17
001482 93af                      	push	XL
001483 93bf                      	push	XH
001484 93cf                      	push	YL
001485 93df                      	push	YH
001486 db95                      	rcall	pid_wait_sampling_time				; wait pid sampling time
001487 940e 0bf3                 	call	check_alarms						; skip if alarm detected
001489 d87d                      	rcall	screen_tx_data_PFV
00148a 91df                      	pop		YH
00148b 91cf                      	pop		YL
00148c 91bf                      	pop		XH
00148d 91af                      	pop		XL
00148e 911f                      	pop		R17
00148f 910f                      	pop		R16
001490 1b0c                      	sub		R16,YL
001491 0b1d                      	sbc		R17,YH
001492 d036                      	rcall	vc_cmv_check_overflow
001493 931f                      	push	R17
001494 d051                      	rcall	vc_cmv_check_init_pulse
001495 9310 2c9a                 	sts		stepper_speed_sp,R17				; update control variable
001497 911f                      	pop		R17
                                 
001498 d009                      	rcall	check_inspiration_start
001499 f731                      	brne	process_inspiration_flow_loop1
                                 
00149a 9711                      	sbiw	XL,1
00149b f721                      	brne	process_inspiration_flow_loop1
                                 
00149c e000                      	ldi		R16,0
00149d 9300 2c9a                 	sts		stepper_speed_sp,R16				; pause stepper
00149f 9300 2c9b                 	sts		stepper_speed_sp+1,R16
0014a1 9508                      	ret
                                 
                                 
                                 
                                 ; do not change X,Y,R16,R17
                                 check_inspiration_start:
0014a2 9120 2f0a                 	lds		R18,vc_cmv_insp_flag
0014a4 3021                      	cpi		R18,1
0014a5 f111                      	breq	check_inspiration_start_ret
                                 
0014a6 91f0 2cda                 	lds		ZH,sensors_flow_value+3
0014a8 91e0 2cd9                 	lds		ZL,sensors_flow_value+2
0014aa fdf7                      	sbrc	ZH,7
0014ab c004                      	rjmp	check_inspiration_start_ko
0014ac 30f0                      	cpi		ZH,0
0014ad f459                      	brne	check_inspiration_start_ok
0014ae 30e2                      	cpi		ZL,2							; inspiration flow threshold
0014af f448                      	brsh	check_inspiration_start_ok
                                 check_inspiration_start_ko:
0014b0 9120 2efd                 	lds		R18,vc_cmv_insp_rise_time
0014b2 3926                      	cpi		R18,150							; max inspiration time
0014b3 f428                      	brsh	check_inspiration_start_ok
0014b4 9523                      	inc		R18
0014b5 9320 2efd                 	sts		vc_cmv_insp_rise_time,R18
0014b7 9498                      	clz
0014b8 c00f                      	rjmp	check_inspiration_start_ret
                                 check_inspiration_start_ok:
0014b9 9120 2efd                 	lds		R18,vc_cmv_insp_rise_time
0014bb 9120 2eab                 	lds		R18,exp_fall_time				; compensate time with expiration fall
0014bd 1ba2                      	sub		XL,R18
0014be e020                      	ldi		R18,0
0014bf 0bb2                      	sbc		XH,R18
0014c0 f008                      	brcs	check_inspiration_start_min_exp
0014c1 f411                      	brne	check_inspiration_start_flag
                                 check_inspiration_start_min_exp:
0014c2 e0a1                      	ldi		XL,1
0014c3 e0b0                      	ldi		XH,0
                                 check_inspiration_start_flag:
0014c4 e021                      	ldi		R18,1
0014c5 9320 2f0a                 	sts		vc_cmv_insp_flag,R18
0014c7 9418                      	sez
                                 check_inspiration_start_ret:
0014c8 9508                      	ret
                                 
                                 
                                 ; do not modify R16,R17,XL,XH,YL,YH
                                 ; but if overflow -> R17=0
                                 vc_cmv_check_overflow:
0014c9 9130 2d78                 	lds		R19,sensors_volume_max+3				; course flow tunning up
0014cb 9120 2d77                 	lds		R18,sensors_volume_max+2
0014cd 91f0 2f25                 	lds		ZH,set_vol+1
0014cf 91e0 2f24                 	lds		ZL,set_vol
0014d1 9140 2efb                 	lds		R20,vc_cmv_ctrl_curr_flow			; read flow index
0014d3 304f                      	cpi		R20,flow_table_first+1
0014d4 f028                      	brlo	vc_cmv_check_overflow_flow_min
0014d5 91f0 2f03                 	lds		ZH,vc_cmv_vol_thr_high+1
0014d7 91e0 2f02                 	lds		ZL,vc_cmv_vol_thr_high
0014d9 c004                      	rjmp	vc_cmv_check_overflow_flow_check
                                 vc_cmv_check_overflow_flow_min:
0014da 91f0 2f01                 	lds		ZH,vc_cmv_vol_thr_low+1
0014dc 91e0 2f00                 	lds		ZL,vc_cmv_vol_thr_low
                                 
                                 vc_cmv_check_overflow_flow_check:
0014de 172e                      	cp		R18,ZL
0014df 073f                      	cpc		R19,ZH
0014e0 f020                      	brlo	vc_cmv_check_overflow_ret
0014e1 e011                      	ldi		R17,1
0014e2 9310 2f0b                 	sts		vc_cmv_over_flag,R17
0014e4 e010                      	ldi		R17,0
                                 vc_cmv_check_overflow_ret:
0014e5 9508                      	ret
                                 
                                 
                                 vc_cmv_check_init_pulse:
0014e6 932f                      	push	R18
0014e7 9120 2f16                 	lds		R18,process_flow_init_pulse_time
0014e9 5021                      	subi	R18,1
0014ea f0f0                      	brcs	vc_cmv_check_init_pulse_ret
0014eb 9300 2f16                 	sts		process_flow_init_pulse_time,R16
0014ed 9120 148b                 	lds		R18,EEPROM_START+ee_pulse_min_speed
0014ef 1712                      	cp		R17,R18
0014f0 f4c0                      	brsh	vc_cmv_check_init_pulse_ret
0014f1 930f                      	push	R16
0014f2 931f                      	push	R17
0014f3 93af                      	push	XL
0014f4 93bf                      	push	XH
0014f5 93cf                      	push	YL
0014f6 93df                      	push	YH
0014f7 91b0 2cda                 	lds		XH,sensors_flow_value+3				; control variable
0014f9 91a0 2cd9                 	lds		XL,sensors_flow_value+2
0014fb 9100 2cd8                 	lds		R16,sensors_flow_value+1
0014fd da92                      	rcall	pid_process							; pid control
                                 ;	sts		stepper_speed_sp,XL					; update control variable
                                 ;	sts		stepper_speed_sp+1,XH
0014fe 30b0                      	cpi		XH,0
0014ff f009                      	breq	vc_cmv_check_init_pulse_set
001500 efaf                      	ldi		XL,$ff
                                 vc_cmv_check_init_pulse_set:
001501 2f2a                      	mov		R18,XL
001502 91df                      	pop		YH
001503 91cf                      	pop		YL
001504 91bf                      	pop		XH
001505 91af                      	pop		XL
001506 911f                      	pop		R17
001507 910f                      	pop		R16
001508 2f12                      	mov		R17,R18
                                 vc_cmv_check_init_pulse_ret:
001509 912f                      	pop		R18
00150a 9508                      	ret
                                 
                                 
                                 ctrl_flow_parameters_read:
00150b 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow			; read flow index
00150d 500e                      	subi	R16,flow_table_first
                                 
00150e f420                      	brcc	ctrl_flow_parameters_read_min		; check minimum value
00150f e00e                      	ldi		R16,flow_table_first
001510 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
001512 2700                      	clr		R16
                                 ctrl_flow_parameters_read_min:
                                 
001513 3401                      	cpi		R16,(flow_table_last-flow_table_first)+1	; check maximun value
001514 f020                      	brlo	ctrl_flow_parameters_read_max
001515 e40e                      	ldi		R16,flow_table_last
001516 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
001518 e400                      	ldi		R16,flow_table_last-flow_table_first
                                 ctrl_flow_parameters_read_max:
                                 
001519 e2f5                      	ldi		ZH,high(vc_cmv_flow_table*2)		; read table
00151a eaea                      	ldi		ZL,low(vc_cmv_flow_table*2)
00151b 2711                      	clr		R17
00151c 0f00                      	lsl		R16
00151d 1f11                      	rol		R17
00151e 0f00                      	lsl		R16
00151f 1f11                      	rol		R17
001520 0fe0                      	add		ZL,R16
001521 1ff1                      	adc		ZH,R17
001522 9115                      	lpm		R17,Z+
001523 9105                      	lpm		R16,Z+
001524 91c5                      	lpm		YL,Z+
001525 91d5                      	lpm		YH,Z+
001526 9508                      	ret
                                 
                                 
                                 vc_cmv_calc_time_exp:
001527 9100 2efd                 	lds		R16,vc_cmv_insp_rise_time
001529 91b0 2f1f                 	lds		XH,set_exp_time_cs+1
00152b 91a0 2f1e                 	lds		XL,set_exp_time_cs
00152d 93b0 2eff                 	sts		vc_cmv_exp_time_save+1,XH
00152f 93a0 2efe                 	sts		vc_cmv_exp_time_save,XL
001531 1ba0                      	sub		XL,R16
001532 e000                      	ldi		R16,0
001533 0bb0                      	sbc		XH,R16
001534 f008                      	brcs	vc_cmv_sub_time_exp_min
001535 f411                      	brne	vc_cmv_sub_time_exp_update
                                 vc_cmv_sub_time_exp_min:
001536 e0a1                      	ldi		XL,1
001537 e0b0                      	ldi		XH,0
                                 vc_cmv_sub_time_exp_update:
001538 9100 2eab                 	lds		R16,exp_fall_time
00153a 0fa0                      	add		XL,R16
00153b e000                      	ldi		R16,0
00153c 1fb0                      	adc		XH,R16
00153d 93b0 2f1f                 	sts		set_exp_time_cs+1,XH
00153f 93a0 2f1e                 	sts		set_exp_time_cs,XL
001541 9508                      	ret
                                 
                                 
                                 vc_cmv_restore_time_exp:
001542 91b0 2eff                 	lds		XH,vc_cmv_exp_time_save+1
001544 91a0 2efe                 	lds		XL,vc_cmv_exp_time_save
001546 93b0 2f1f                 	sts		set_exp_time_cs+1,XH
001548 93a0 2f1e                 	sts		set_exp_time_cs,XL
00154a 9508                      	ret
                                 	
                                 
                                 vc_cmv_copy_set_values:
00154b 911d                      	ld		R17,X+
00154c 9310 2f24                 	sts		set_vol,R17
00154e 911d                      	ld		R17,X+
00154f 9310 2f25                 	sts		set_vol+1,R17
                                 
001551 911d                      	ld		R17,X+
001552 9310 2f22                 	sts		set_flow,R17
001554 911d                      	ld		R17,X+
001555 9310 2f23                 	sts		set_flow+1,R17
                                 
001557 911d                      	ld		R17,X+
001558 9310 2f1a                 	sts		set_insp_time_cs,R17
00155a 911d                      	ld		R17,X+
00155b 9310 2f1b                 	sts		set_insp_time_cs+1,R17
                                 
00155d 911d                      	ld		R17,X+
00155e 9310 2f1c                 	sts		set_pause_time_cs,R17
001560 911d                      	ld		R17,X+
001561 9310 2f1d                 	sts		set_pause_time_cs+1,R17
                                 
001563 911d                      	ld		R17,X+
001564 9310 2f1e                 	sts		set_exp_time_cs,R17
001566 911d                      	ld		R17,X+
001567 9310 2f1f                 	sts		set_exp_time_cs+1,R17
                                 
001569 911d                      	ld		R17,X+
00156a 9310 2f26                 	sts		set_trigger,R17
00156c 911d                      	ld		R17,X+
00156d 9310 2f27                 	sts		set_trigger+1,R17
                                 
00156f 911d                      	ld		R17,X+
001570 9310 2f29                 	sts		set_fio2,R17
001572 911d                      	ld		R17,X+
001573 9310 2f2a                 	sts		set_fio2+1,R17
                                 
001575 e010                      	ldi		R17,0
001576 9310 2efa                 	sts		pc_pressure_add,R17
                                 
001578 d002                      	rcall	vc_cmv_chk_ventilation_changes
001579 d02a                      	rcall	vc_cmv_calc_vol_thresholds
00157a 9508                      	ret
                                 
                                 
                                 ; do not modify R16
                                 vc_cmv_chk_ventilation_changes:
00157b 91b0 2f25                 	lds		XH,set_vol+1
00157d 91a0 2f24                 	lds		XL,set_vol
00157f 91d0 2f1b                 	lds		YH,set_insp_time_cs+1
001581 91c0 2f1a                 	lds		YL,set_insp_time_cs
                                 
001583 91e0 2f05                 	lds		ZL,vc_cmv_last_set_vol					; check volume change
001585 91f0 2f06                 	lds		ZH,vc_cmv_last_set_vol+1
001587 17ae                      	cp		XL,ZL
001588 07bf                      	cpc		XH,ZH
001589 f439                      	brne	vc_cmv_chk_ventilation_changes_update
                                 
00158a 91e0 2f07                 	lds		ZL,vc_cmv_last_set_time					; check time change
00158c 91f0 2f08                 	lds		ZH,vc_cmv_last_set_time+1
00158e 17ce                      	cp		YL,ZL
00158f 07df                      	cpc		YH,ZH
001590 f091                      	breq	vc_cmv_chk_ventilation_changes_ret
                                 
                                 vc_cmv_chk_ventilation_changes_update:
001591 93a0 2f05                 	sts		vc_cmv_last_set_vol,XL
001593 93b0 2f06                 	sts		vc_cmv_last_set_vol+1,XH
001595 93c0 2f07                 	sts		vc_cmv_last_set_time,YL
001597 93d0 2f08                 	sts		vc_cmv_last_set_time+1,YH
001599 e010                      	ldi		R17,0
00159a 9310 2efc                 	sts		vc_cmv_insp_time_extra,R17
00159c 9310 2eab                 	sts		exp_fall_time,R17
                                 
00159e 9110 2f22                 	lds		R17,set_flow
0015a0 5f1d                      	subi	R17,-3
0015a1 9310 2efb                 	sts		vc_cmv_ctrl_curr_flow,R17
                                 
                                 vc_cmv_chk_ventilation_changes_ret:
0015a3 9508                      	ret
                                 
                                 
                                 ; do not modify R16
                                 vc_cmv_calc_vol_thresholds:
0015a4 91f0 2f25                 	lds		ZH,set_vol+1							; calc vol thresholds within +/-6.25%
0015a6 91e0 2f24                 	lds		ZL,set_vol
0015a8 2fbf                      	mov		XH,ZH
0015a9 2fae                      	mov		XL,ZL
0015aa 95b6                      	lsr		XH
0015ab 95a7                      	ror		XL
0015ac 95b6                      	lsr		XH
0015ad 95a7                      	ror		XL
0015ae 95b6                      	lsr		XH
0015af 95a7                      	ror		XL
0015b0 95b6                      	lsr		XH
0015b1 95a7                      	ror		XL
                                 
0015b2 0fea                      	add		ZL,XL
0015b3 1ffb                      	adc		ZH,XH
0015b4 93f0 2f10                 	sts		vc_cmv_vol_high+1,ZH
0015b6 93e0 2f0f                 	sts		vc_cmv_vol_high,ZL
0015b8 93f0 2f03                 	sts		vc_cmv_vol_thr_high+1,ZH
0015ba 93e0 2f02                 	sts		vc_cmv_vol_thr_high,ZL
0015bc 91f0 2f25                 	lds		ZH,set_vol+1
0015be 91e0 2f24                 	lds		ZL,set_vol
0015c0 1bea                      	sub		ZL,XL
0015c1 0bfb                      	sbc		ZH,XH
0015c2 93f0 2f0e                 	sts		vc_cmv_vol_low+1,ZH
0015c4 93e0 2f0d                 	sts		vc_cmv_vol_low,ZL
0015c6 93f0 2f01                 	sts		vc_cmv_vol_thr_low+1,ZH
0015c8 93e0 2f00                 	sts		vc_cmv_vol_thr_low,ZL
0015ca 95b6                      	lsr		XH
0015cb 95a7                      	ror		XL
0015cc 95b6                      	lsr		XH
0015cd 95a7                      	ror		XL
0015ce e0b0                      	ldi		XH,0
0015cf 1fab                      	adc		XL,XH
0015d0 93a0 2f04                 	sts		vc_cmv_vol_err_min,XL
0015d2 9508                      	ret
                                 
                                 
                                 
                                 process_pause:
0015d3 e002                      	ldi		R16,2									; transmit pause event to screen
0015d4 9300 2f2c                 	sts		vent_phase,R16
0015d6 940e 0d24                 	call	screen_tx_event
0015d8 e000                      	ldi		R16,0
0015d9 9300 2c9a                 	sts		stepper_speed_sp,R16					; pause stepper
0015db 9300 2c9b                 	sts		stepper_speed_sp+1,R16
0015dd 91a0 2f1c                 	lds		XL,set_pause_time_cs
0015df 91b0 2f1d                 	lds		XH,set_pause_time_cs+1
                                 	
0015e1 91c0 2efc                 	lds		YL,vc_cmv_insp_time_extra				; compensate inspiration extra time
0015e3 1bac                      	sub		XL,YL
0015e4 f408                      	brsh	process_pause_min
0015e5 e0a0                      	ldi		XL,0
                                 process_pause_min:
0015e6 30aa                      	cpi		XL,pause_min_time_cs
0015e7 f408                      	brsh	process_pause_loop
0015e8 e0aa                      	ldi		XL,pause_min_time_cs
                                 
                                 process_pause_loop:
0015e9 93af                      	push	XL
0015ea da31                      	rcall	pid_wait_sampling_time					; wait pid sampling time
0015eb 940e 0d07                 	call	screen_tx_data_PFV
0015ed 91af                      	pop		XL
0015ee 95aa                      	dec		XL
0015ef f7c9                      	brne	process_pause_loop
0015f0 9508                      	ret
                                 
                                 
                                 
                                 
                                 vc_cmv_follow_volume:
0015f1 9100 2f09                 	lds		R16,vc_cmv_alarm					; decrement if pressure alarm
0015f3 3000                      	cpi		R16,0
0015f4 f031                      	breq	vc_cmv_follow_volume_no_alarm
0015f5 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow
0015f7 950a                      	dec		R16
0015f8 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
0015fa c00f                      	rjmp	vc_cmv_follow_volume_ret
                                 vc_cmv_follow_volume_no_alarm:
                                 
0015fb 9100 2f0b                 	lds		R16,vc_cmv_over_flag
0015fd 3000                      	cpi		R16,0
0015fe f031                      	breq	vc_cmv_follow_volume_no_overflow
0015ff 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow
001601 950a                      	dec		R16
001602 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
001604 c005                      	rjmp	vc_cmv_follow_volume_ret
                                 vc_cmv_follow_volume_no_overflow:
                                 
001605 d005                      	rcall	vc_cmv_flow_up						; course flow tunning up
001606 f019                      	breq	vc_cmv_follow_volume_ret
                                 
001607 d054                      	rcall	vc_cmv_flow_down					; flow tunning down
001608 f009                      	breq	vc_cmv_follow_volume_ret
                                 
001609 d078                      	rcall	vc_cmv_flow_fine
                                 vc_cmv_follow_volume_ret:
00160a 9508                      	ret
                                 
                                 
                                 
                                 vc_cmv_flow_up:
00160b 91b0 2d78                 	lds		XH,sensors_volume_max+3				; course flow tunning up
00160d 91a0 2d77                 	lds		XL,sensors_volume_max+2
00160f 91d0 2f01                 	lds		YH,vc_cmv_vol_thr_low+1
001611 91c0 2f00                 	lds		YL,vc_cmv_vol_thr_low
001613 17ac                      	cp		XL,YL
001614 07bd                      	cpc		XH,YH
001615 f038                      	brlo	vc_cmv_flow_course_calc
                                 
001616 91d0 2f03                 	lds		YH,vc_cmv_vol_thr_high+1
001618 91c0 2f02                 	lds		YL,vc_cmv_vol_thr_high
00161a 17ac                      	cp		XL,YL
00161b 07bd                      	cpc		XH,YH
00161c f1e8                      	brlo	vc_cmv_flow_up_ko
                                 
                                 vc_cmv_flow_course_calc:
00161d 91f0 2f25                 	lds		ZH,set_vol+1						; calc next flow. course flow up.
00161f 91e0 2f24                 	lds		ZL,set_vol
001621 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow
001623 340e                      	cpi		R16,flow_table_last
001624 f5a8                      	brsh	vc_cmv_flow_up_ko
001625 2477                      	clr		R7
001626 2466                      	clr		R6
001627 2e5b                      	mov		R5,XH
001628 2e4a                      	mov		R4,XL
001629 2433                      	clr		R3
00162a 9f0f                      	mul		R16,ZH
00162b 2c21                      	mov		R2,R1
00162c 2c80                      	mov		R8,R0
00162d 9f0e                      	mul		R16,ZL
00162e 0c18                      	add		R1,R8
00162f 1c23                      	adc		R2,R3
001630 1c33                      	adc		R3,R3
                                 ;*** Dividendo 	R3:R0 (H-L)
                                 ;*** Divisor	R7:R4 (H-L)
                                 ;*** = Cociente	R3:R0 (H-L)
                                 ;***   Residuo  R11:R8 (H-L)
001631 940e 044d                 	call	Divide32
001633 2832                      	or		R3,R2
001634 2821                      	or		R2,R1
001635 f419                      	brne	vc_cmv_flow_up_top
001636 2d00                      	mov		R16,R0
001637 340e                      	cpi		R16,flow_table_last
001638 f008                      	brlo	vc_cmv_flow_up_max
                                 vc_cmv_flow_up_top:
001639 e40e                      	ldi		R16,flow_table_last
                                 vc_cmv_flow_up_max:
                                 
00163a 300e                      	cpi		R16,flow_table_first
00163b f408                      	brsh	vc_cmv_flow_up_min
00163c e00e                      	ldi		R16,flow_table_first
                                 vc_cmv_flow_up_min:
                                 
00163d 9110 2efb                 	lds		R17,vc_cmv_ctrl_curr_flow
00163f 1701                      	cp		R16,R17
001640 f0c9                      	breq	vc_cmv_flow_up_ko
001641 f438                      	brsh	vc_cmv_flow_up_inc
001642 2f21                      	mov		R18,R17
001643 1b20                      	sub		R18,R16
001644 3124                      	cpi		R18,20
001645 f048                      	brlo	vc_cmv_flow_up_update
001646 2f01                      	mov		R16,R17
001647 5104                      	subi	R16,20
001648 c006                      	rjmp	vc_cmv_flow_up_update
                                 vc_cmv_flow_up_inc:
001649 2f20                      	mov		R18,R16
00164a 1b21                      	sub		R18,R17
00164b 3124                      	cpi		R18,20
00164c f010                      	brlo	vc_cmv_flow_up_update
00164d 2f01                      	mov		R16,R17
00164e 5e0c                      	subi	R16,-20
                                 vc_cmv_flow_up_update:
00164f 0f01                      	add		R16,R17
001650 9507                      	ror		R16
001651 e010                      	ldi		R17,0
001652 1f01                      	adc		R16,R17
001653 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
001655 e000                      	ldi		R16,0
001656 9300 2efc                 	sts		vc_cmv_insp_time_extra,R16
001658 9418                      	sez
001659 c001                      	rjmp	vc_cmv_flow_up_ret
                                 vc_cmv_flow_up_ko:
00165a 9498                      	clz
                                 vc_cmv_flow_up_ret:
00165b 9508                      	ret
                                 
                                 
                                 
                                 vc_cmv_flow_down:
00165c 9508                      	ret
00165d 91b0 2d78                 	lds		XH,sensors_volume_max+3				; course flow down?
00165f 91a0 2d77                 	lds		XL,sensors_volume_max+2
001661 91d0 2f03                 	lds		YH,vc_cmv_vol_thr_high+1
001663 91c0 2f02                 	lds		YL,vc_cmv_vol_thr_high
001665 17ac                      	cp		XL,YL
001666 07bd                      	cpc		XH,YH
001667 f458                      	brsh	vc_cmv_flow_down_ok
                                 
001668 9100 2efc                 	lds		R16,vc_cmv_insp_time_extra			; fine flow down?
00166a 3000                      	cpi		R16,0
00166b f4a1                      	brne	vc_cmv_flow_down_ko
                                 
00166c 91d0 2f25                 	lds		YH,set_vol+1
00166e 91c0 2f24                 	lds		YL,set_vol
001670 17ac                      	cp		XL,YL
001671 07bd                      	cpc		XH,YH
001672 f068                      	brlo	vc_cmv_flow_down_ko
                                 
                                 vc_cmv_flow_down_ok:
001673 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow					; course flow down.
001675 950a                      	dec		R16
001676 300e                      	cpi		R16,flow_table_first
001677 f408                      	brsh	vc_cmv_flow_down_min
001678 e00e                      	ldi		R16,flow_table_first
                                 vc_cmv_flow_down_min:
001679 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
00167b e000                      	ldi		R16,0
00167c 9300 2efc                 	sts		vc_cmv_insp_time_extra,R16
00167e 9418                      	sez
00167f c001                      	rjmp	vc_cmv_flow_down_ret
                                 vc_cmv_flow_down_ko:
001680 9498                      	clz
                                 vc_cmv_flow_down_ret:
001681 9508                      	ret
                                 
                                 
                                 vc_cmv_flow_fine:
001682 91d0 2f25                 	lds		YH,set_vol+1						; fine tunning
001684 91c0 2f24                 	lds		YL,set_vol
001686 91b0 2d78                 	lds		XH,sensors_volume_max+3
001688 91a0 2d77                 	lds		XL,sensors_volume_max+2
00168a 9100 2efc                 	lds		R16,vc_cmv_insp_time_extra
00168c 9110 2f04                 	lds		R17,vc_cmv_vol_err_min
                                 
00168e 17ac                      	cp		XL,YL
00168f 07bd                      	cpc		XH,YH
001690 f438                      	brsh	vc_cmv_flow_fine_pos
001691 1bca                      	sub		YL,XL
001692 0bdb                      	sbc		YH,XH
001693 30d0                      	cpi		YH,0
001694 f459                      	brne	vc_cmv_flow_fine_up
001695 17c1                      	cp		YL,R17
001696 f448                      	brsh	vc_cmv_flow_fine_up
001697 c00d                      	rjmp	vc_cmv_flow_fine_ret
                                 vc_cmv_flow_fine_pos:
                                 
001698 1bac                      	sub		XL,YL
001699 0bbd                      	sbc		XH,YH
00169a 30b0                      	cpi		XH,0
00169b f411                      	brne	vc_cmv_flow_fine_down
00169c 17a1                      	cp		XL,R17
00169d f038                      	brlo	vc_cmv_flow_fine_ret
                                 vc_cmv_flow_fine_down:
00169e 950a                      	dec		R16									; fine flow down.
00169f c001                      	rjmp	vc_cmv_flow_fine_set
                                 vc_cmv_flow_fine_up:
0016a0 9503                      	inc		R16									; fine flow up.
                                 vc_cmv_flow_fine_set:
0016a1 3302                      	cpi		R16,50
0016a2 f410                      	brsh	vc_cmv_flow_fine_ret
0016a3 9300 2efc                 	sts		vc_cmv_insp_time_extra,R16
                                 vc_cmv_flow_fine_ret:
0016a5 9508                      	ret
                                 
                                 
                                 
                                 vc_cmv_follow_volume_v3:
0016a6 91b0 2d78                 	lds		XH,sensors_volume_max+3				; course flow tunning up
0016a8 91a0 2d77                 	lds		XL,sensors_volume_max+2
0016aa 91f0 2f25                 	lds		ZH,set_vol+1						; calc next flow. course flow up.
0016ac 91e0 2f24                 	lds		ZL,set_vol
0016ae 2fcf                      	mov		YL,ZH
0016af 2fde                      	mov		YH,ZL
0016b0 0fdd                      	lsl		YH									; 1/32 error
0016b1 1fcc                      	rol		YL
0016b2 0fdd                      	lsl		YH
0016b3 1fcc                      	rol		YL
0016b4 0fdd                      	lsl		YH
0016b5 1fcc                      	rol		YL
0016b6 27dd                      	clr		YH
0016b7 17ae                      	cp		XL,ZL
0016b8 07bf                      	cpc		XH,ZH
0016b9 f058                      	brlo	vc_cmv_follow_volume_v3_inc
0016ba 1bae                      	sub		XL,ZL
0016bb 0bbf                      	sbc		XH,ZH
0016bc 17ac                      	cp		XL,YL
0016bd 07bd                      	cpc		XH,YH
0016be f080                      	brlo	vc_cmv_follow_volume_v3_ret
0016bf 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow
0016c1 950a                      	dec		R16
0016c2 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
0016c4 c00a                      	rjmp	vc_cmv_follow_volume_v3_ret
                                 vc_cmv_follow_volume_v3_inc:
0016c5 1bea                      	sub		ZL,XL
0016c6 0bfb                      	sbc		ZH,XH
0016c7 17ec                      	cp		ZL,YL
0016c8 07fd                      	cpc		ZH,YH
0016c9 f028                      	brlo	vc_cmv_follow_volume_v3_ret
0016ca 9100 2efb                 	lds		R16,vc_cmv_ctrl_curr_flow
0016cc 9503                      	inc		R16
0016cd 9300 2efb                 	sts		vc_cmv_ctrl_curr_flow,R16
                                 vc_cmv_follow_volume_v3_ret:
0016cf 9508                      	ret
                                 .include "psv.asm"
                                 
                                  * psv.asm
                                  *
                                  *  Created: 18/05/2020 07:48:14 p. m.
                                  *   Author: Javier
                                  */ 
                                 
                                 
                                 .cseg
                                 
                                 
                                 
                                 ; pressure support ventilation
                                 main_psv:
0016d0 e2f3                      	ldi		ZH,high(pc_cmv_pid_table*2)				; pid settings
0016d1 ebe6                      	ldi		ZL,low(pc_cmv_pid_table*2)
0016d2 9100 2f20                 	lds		R16,set_pressure						; sp pressure
0016d4 db22                      	rcall	pc_cmv_load_pid_settings
                                 
0016d5 940e 0ab9                 	call	sensors_volume_reset				; clear volume data
0016d7 940e 0ac3                 	call	sensors_max_reset
                                 
0016d9 940e 0692                 	call	stepper_alarm_enable				; stepper alarm enable
0016db d038                      	rcall	process_inspiration_psv
0016dc 940e 0d32                 	call	screen_tx_data_sensors
0016de 940e 06a3                 	call	stepper_alarm_disable				; clear alarm flag
                                 
0016e0 d98b                      	rcall	process_expiration
0016e1 9508                      	ret
                                 
                                 
                                 
                                 
                                 psv_copy_set_values:
0016e2 911d                      	ld		R17,X+
0016e3 9310 2f20                 	sts		set_pressure,R17
0016e5 911d                      	ld		R17,X+
0016e6 9310 2f21                 	sts		set_pressure+1,R17
                                 
0016e8 91cd                      	ld		YL,X+
0016e9 93c0 2f28                 	sts		set_flow_cycle,YL
0016eb 91dd                      	ld		YH,X+
0016ec 93d0 2f29                 	sts		set_flow_cycle+1,YH
                                 
0016ee 911d                      	ld		R17,X+
0016ef 9310 2f26                 	sts		set_trigger,R17
0016f1 911d                      	ld		R17,X+
0016f2 9310 2f27                 	sts		set_trigger+1,R17
                                 
0016f4 911d                      	ld		R17,X+
0016f5 9310 2f29                 	sts		set_fio2,R17
0016f7 911d                      	ld		R17,X+
0016f8 9310 2f2a                 	sts		set_fio2+1,R17
                                 
0016fa 911d                      	ld		R17,X+
0016fb 9310 2f1e                 	sts		set_exp_time_cs,R17
0016fd 911d                      	ld		R17,X+
0016fe 9310 2f1f                 	sts		set_exp_time_cs+1,R17
                                 
001700 e0b2                      	ldi		XH,high(655)				; psv_cycle_factor = flow_cycle*2.56
001701 e8af                      	ldi		XL,low(655)
001702 9fca                      	mul		YL,XL
001703 2ca0                      	mov		R10,R0
001704 2cb1                      	mov		R11,R1
001705 9fcb                      	mul		YL,XH
001706 0cb0                      	add		R11,R0
001707 fca7                      	sbrc	R10,7
001708 94b3                      	inc		R11
001709 92b0 2f19                 	sts		psv_cycle_factor,R11
                                 
00170b e010                      	ldi		R17,0									; Init compensated flow
00170c 9310 2efc                 	sts		vc_cmv_insp_time_extra,R17
                                 
00170e e010                      	ldi		R17,0									; Init compensated flow
00170f 9310 2f0c                 	sts		insp_flow_add,R17
001711 9310 2efa                 	sts		pc_pressure_add,R17
001713 9508                      	ret
                                 
                                 
                                 
                                 .dseg
002f17                           psv_insp_time:		.byte 2
002f19                           psv_cycle_factor:	.byte 1
                                 .cseg
                                 process_inspiration_psv:
001714 e001                      	ldi		R16,1								; transmit inspiracion event to screen
001715 9300 2f2c                 	sts		vent_phase,R16
001717 940e 0d24                 	call	screen_tx_event
                                 
001719 e000                      	ldi		R16,0								; inspiration time
00171a 9300 2f17                 	sts		psv_insp_time,R16
00171c 9300 2f18                 	sts		psv_insp_time+1,R16
                                 process_inspiration_psv_loop:
00171e d8fd                      	rcall	pid_wait_sampling_time				; wait pid sampling time
00171f 91b0 2cb6                 	lds		XH,sensors_pressure_value+3			; control variable
001721 91a0 2cb5                 	lds		XL,sensors_pressure_value+2
001723 90f0 2cb4                 	lds		R15,sensors_pressure_value+1
001725 d86a                      	rcall	pid_process							; pid control
001726 93a0 2c9a                 	sts		stepper_speed_sp,XL					; update control variable
001728 93b0 2c9b                 	sts		stepper_speed_sp+1,XH
00172a 940e 0d07                 	call	screen_tx_data_PFV
                                 
00172c 940e 0bf3                 	call	check_alarms						; skip if alarm detected
00172e f531                      	brne	process_inspiration_psv_ret
                                 
00172f 91b0 2f18                 	lds		XH,psv_insp_time+1					; check more than 0.5 seg
001731 91a0 2f17                 	lds		XL,psv_insp_time
001733 30b0                      	cpi		XH,0
001734 f411                      	brne	process_inspiration_psv_cycling
001735 33a2                      	cpi		XL,50
001736 f0a8                      	brlo	process_inspiration_psv_timeout
                                 process_inspiration_psv_cycling:
001737 91d0 2d74                 	lds		YH,sensors_flow_max+3				; cycling threshold
001739 91c0 2d73                 	lds		YL,sensors_flow_max+2
00173b 9100 2f19                 	lds		R16,psv_cycle_factor
00173d 9fd0                      	mul		YH,R16
00173e 2cb0                      	mov		R11,R0
00173f 2cc1                      	mov		R12,R1
001740 9fc0                      	mul		YL,R16
001741 2ca0                      	mov		R10,R0
001742 0cb1                      	add		R11,R1
001743 e000                      	ldi		R16,0
001744 1ec0                      	adc		R12,R16
                                 
001745 91d0 2cda                 	lds		YH,sensors_flow_value+3				; flow<threshold?
001747 91c0 2cd9                 	lds		YL,sensors_flow_value+2
001749 15cb                      	cp		YL,R11
00174a 05dc                      	cpc		YH,R12
00174b f048                      	brlo	process_inspiration_psv_ret
                                 
                                 process_inspiration_psv_timeout:
00174c 9611                      	adiw	XL,1								; check inpiration timeout
00174d 93b0 2f18                 	sts		psv_insp_time+1,XH
00174f 93a0 2f17                 	sts		psv_insp_time,XL
001751 30b2                      	cpi		XH,high(750)
001752 f659                      	brne	process_inspiration_psv_loop
001753 3eae                      	cpi		XL,low(750)
001754 f649                      	brne	process_inspiration_psv_loop
                                 process_inspiration_psv_ret:
001755 9508                      	ret
                                 
                                 .dseg
                                 
                                 //*** SETTING
002f1a                           set_insp_time_cs:	.byte 2
002f1c                           set_pause_time_cs:	.byte 2
002f1e                           set_exp_time_cs:	.byte 2
002f20                           set_pressure:		.byte 2
002f22                           set_flow:			.byte 2
002f24                           set_vol:			.byte 2
002f26                           set_trigger:		.byte 2
002f28                           set_flow_cycle:		.byte 1
002f29                           set_fio2:			.byte 1
                                 
                                 //*** CONTROL
002f2a                           vent_mode:			.byte 1
002f2b                           vent_mode_new:		.byte 1
002f2c                           vent_phase:			.byte 1		; 0=stopped, 1=inspiration, 2=pause, 3=expiration
                                 
002f2d                           autotest_flag:		.byte 1
002f2e                           calibrate_o2_flag:	.byte 1
002f2f                           main_tmr_cs:		.byte 1
                                 
                                 
                                 .cseg
                                 
                                 test_default:
001756 e900                      	ldi		R16,low(400)
001757 9300 2f1a                 	sts		set_insp_time_cs,R16
001759 e001                      	ldi		R16,high(400)
00175a 9300 2f1b                 	sts		set_insp_time_cs+1,R16
                                 
00175c e10e                      	ldi		R16,low(30)
00175d 9300 2f1c                 	sts		set_pause_time_cs,R16
00175f e000                      	ldi		R16,high(30)
001760 9300 2f1d                 	sts		set_pause_time_cs+1,R16
                                 
001762 ec08                      	ldi		R16,low(200)
001763 9300 2f1e                 	sts		set_exp_time_cs,R16
001765 e000                      	ldi		R16,high(200)
001766 9300 2f1f                 	sts		set_exp_time_cs+1,R16
                                 
001768 e005                      	ldi		R16,low(5)
001769 9300 2f22                 	sts		set_flow,R16
00176b e000                      	ldi		R16,high(5)
00176c 9300 2f23                 	sts		set_flow+1,R16
                                 
00176e e00f                      	ldi		R16,low(15)
00176f 9300 2f20                 	sts		set_pressure,R16
001771 e000                      	ldi		R16,high(15)
001772 9300 2f21                 	sts		set_pressure+1,R16
                                 
001774 e010                      	ldi		R17,0					; Init compensated flow and presssure
001775 9310 2f0c                 	sts		insp_flow_add,R17
001777 9310 2efa                 	sts		pc_pressure_add,R17
001779 e000                      	ldi		R16,0
00177a 9300 2d85                 	sts		sensors_flow_calc_process,R16
00177c d134                      	rcall	ee_read_o2_calibration
00177d d176                      	rcall	calc_calibrate_o2
00177e d114                      	rcall	ee_read_pressure_calibration
00177f d122                      	rcall	ee_read_flow_calibration
                                 
001780 e30c                      	ldi		R16,60					; timeout for eeprom write enable
001781 9300 2e93                 	sts		ee_write_tmr_s,R16
001783 9508                      	ret
                                 
                                 .cseg
                                 main_task:
001784 dfd1                      	rcall	test_default			; default ventilation values for test
001785 d01b                      	rcall	main_init				; init variables
001786 940e 0f70                 	call	buzzer					; beep
001788 e604                      	ldi		R16,100
001789 d29b                      	rcall	main_delaycs
                                 
                                 /*	ldi		R16,1
                                 	sts		autotest_flag,R16
                                 	rcall	pressure_flow_cal_zero
                                 	ldi		R16,0
                                 	sts		autotest_flag,R16
                                 	rcall	buzzer					; beep
                                 */
                                 
                                 
                                 ;	rjmp	main_test_limits_no_tasks
00178a 940e 05e7                 	call	stepper_home			; stepper home
00178c e604                      	ldi		R16,100
00178d d297                      	rcall	main_delaycs
                                 
                                 main_task_loop:
                                 ;	rjmp	main_test
                                 ;	rjmp	main_test_limits
00178e 940e 00fc                 	task_change
                                 
001790 9100 2e8d                 	lds		R16,power_shut_down		; power down?
001792 3001                      	cpi		R16,1
001793 f3d1                      	breq	main_task_loop
                                 
001794 d1b3                      	rcall	chk_power_button
001795 d01e                      	rcall	chk_autotest
001796 d13c                      	rcall	chk_calibrate_o2
                                 
001797 9100 2f2a                 	lds		R16,vent_mode			; show data if stopped
001799 3000                      	cpi		R16,0
00179a f411                      	brne	main_task_loop_nostop
                                 ;	call	screen_check_data_tx
00179b 940e 0622                 	call	screen_chk_tx_data_PFV
                                 main_task_loop_nostop:
                                 
00179d d1b4                      	rcall	check_vent_mode			; checks ventilation mode
00179e f779                      	brne	main_task_loop
00179f d1d4                      	rcall	run_vent_mode			; run one ventilation mode cycle
0017a0 cfed                      	rjmp	main_task_loop
                                 
                                 
                                 
                                 main_init:
0017a1 e000                      	ldi		R16,0
0017a2 9300 2f2a                 	sts		vent_mode,R16
0017a4 ef0f                      	ldi		R16,0xff				; no new ventiation mode
0017a5 9300 2f2b                 	sts		vent_mode_new,R16
0017a7 e010                      	ldi		R17,0					; Init compensated flow
0017a8 9310 2efc                 	sts		vc_cmv_insp_time_extra,R17
0017aa 9310 2f2c                 	sts		vent_phase,R17			; ventilation stopped
0017ac 9310 2f2d                 	sts		autotest_flag,R17
0017ae 9310 2f2e                 	sts		calibrate_o2_flag,R17
                                 
0017b0 e000                      	ldi		R16,0					; apnea false inicial
0017b1 9300 2ef7                 	sts		flow_apnea,R16
0017b3 9508                      	ret
                                 
                                 
                                 chk_autotest:
0017b4 9100 2f2d                 	lds		R16,autotest_flag
0017b6 3000                      	cpi		R16,0
0017b7 f059                      	breq	chk_autotest_ret
                                 
0017b8 940e 05e7                 	call	stepper_home					; stepper home
0017ba ef0a                      	ldi		R16,250
0017bb d269                      	rcall	main_delaycs
                                 
0017bc d007                      	rcall	pressure_flow_cal_zero
                                 
0017bd e001                      	ldi		R16,1
0017be 940e 0d7c                 	call	screen_tx_autotest
0017c0 e000                      	ldi		R16,0
0017c1 9300 2f2d                 	sts		autotest_flag,R16
                                 chk_autotest_ret:
0017c3 9508                      	ret
                                 
                                 
                                 .dseg
002f30                           pressure_cal_zero:	.byte 5
002f35                           flow_cal_zero:		.byte 5
                                 .cseg
                                 pressure_flow_cal_zero:
0017c4 2400                      	clr		R0
0017c5 9200 2d8a                 	sts		sensors_pressure_offset_cal,R0
0017c7 9200 2d8b                 	sts		sensors_pressure_offset_cal+1,R0
0017c9 9200 2d8c                 	sts		sensors_pressure_offset_cal+2,R0
0017cb 9200 2d8d                 	sts		sensors_pressure_offset_cal+3,R0
0017cd 9200 2d86                 	sts		sensors_flow_offset_cal,R0
0017cf 9200 2d87                 	sts		sensors_flow_offset_cal+1,R0
0017d1 9200 2d88                 	sts		sensors_flow_offset_cal+2,R0
0017d3 9200 2d89                 	sts		sensors_flow_offset_cal+3,R0
0017d5 9200 2f30                 	sts		pressure_cal_zero,R0
0017d7 9200 2f31                 	sts		pressure_cal_zero+1,R0
0017d9 9200 2f32                 	sts		pressure_cal_zero+2,R0
0017db 9200 2f33                 	sts		pressure_cal_zero+3,R0
0017dd 9200 2f34                 	sts		pressure_cal_zero+4,R0
0017df 9200 2f35                 	sts		flow_cal_zero,R0
0017e1 9200 2f36                 	sts		flow_cal_zero+1,R0
0017e3 9200 2f37                 	sts		flow_cal_zero+2,R0
0017e5 9200 2f38                 	sts		flow_cal_zero+3,R0
0017e7 9200 2f39                 	sts		flow_cal_zero+4,R0
0017e9 e001                      	ldi		R16,1
0017ea 9300 2d85                 	sts		sensors_flow_calc_process,R16
0017ec e614                      	ldi		R17,100
                                 pressure_cal_zero_purge_loop:
0017ed 931f                      	push	R17
0017ee d82d                      	rcall	pid_wait_sampling_time
0017ef 911f                      	pop		R17
0017f0 f7e1                      	brne	pressure_cal_zero_purge_loop
                                 
0017f1 2711                      	clr		R17
                                 pressure_cal_zero_loop:
0017f2 931f                      	push	R17
0017f3 d828                      	rcall	pid_wait_sampling_time			; wait pid sampling time
0017f4 940e 0d07                 	call	screen_tx_data_PFV
0017f6 911f                      	pop		R17
0017f7 d009                      	rcall	pressure_zero_calc
0017f8 d02e                      	rcall	flow_zero_calc
0017f9 951a                      	dec		R17
0017fa f7b9                      	brne	pressure_cal_zero_loop
                                 
0017fb e000                      	ldi		R16,0
0017fc 9300 2d85                 	sts		sensors_flow_calc_process,R16
0017fe d04e                      	rcall	pressure_cal_save
0017ff d070                      	rcall	flow_cal_save
001800 9508                      	ret
                                 
                                 
                                 pressure_zero_calc:
001801 91b0 2cb6                 	lds		XH,sensors_pressure_value+3
001803 91a0 2cb5                 	lds		XL,sensors_pressure_value+2
001805 91d0 2cb4                 	lds		YH,sensors_pressure_value+1
001807 91c0 2cb3                 	lds		YL,sensors_pressure_value+0
001809 90a0 2f30                 	lds		R10,pressure_cal_zero
00180b 90b0 2f31                 	lds		R11,pressure_cal_zero+1
00180d 90c0 2f32                 	lds		R12,pressure_cal_zero+2
00180f 90d0 2f33                 	lds		R13,pressure_cal_zero+3
001811 90e0 2f34                 	lds		R14,pressure_cal_zero+4
001813 0eac                      	add		R10,YL
001814 1ebd                      	adc		R11,YH
001815 1eca                      	adc		R12,XL
001816 1edb                      	adc		R13,XH
001817 ffb7                      	sbrs	XH,7
001818 e000                      	ldi		R16,0
001819 fdb7                      	sbrc	XH,7
00181a ef0f                      	ldi		R16,$ff	
00181b 1ee0                      	adc		R14,R16
00181c 92a0 2f30                 	sts		pressure_cal_zero,R10
00181e 92b0 2f31                 	sts		pressure_cal_zero+1,R11
001820 92c0 2f32                 	sts		pressure_cal_zero+2,R12
001822 92d0 2f33                 	sts		pressure_cal_zero+3,R13
001824 92e0 2f34                 	sts		pressure_cal_zero+4,R14
001826 9508                      	ret
                                 
                                 flow_zero_calc:
001827 91b0 2cda                 	lds		XH,sensors_flow_value+3
001829 91a0 2cd9                 	lds		XL,sensors_flow_value+2
00182b 91d0 2cd8                 	lds		YH,sensors_flow_value+1
00182d 91c0 2cd7                 	lds		YL,sensors_flow_value+0
00182f 90a0 2f35                 	lds		R10,flow_cal_zero
001831 90b0 2f36                 	lds		R11,flow_cal_zero+1
001833 90c0 2f37                 	lds		R12,flow_cal_zero+2
001835 90d0 2f38                 	lds		R13,flow_cal_zero+3
001837 90e0 2f39                 	lds		R14,flow_cal_zero+4
001839 0eac                      	add		R10,YL
00183a 1ebd                      	adc		R11,YH
00183b 1eca                      	adc		R12,XL
00183c 1edb                      	adc		R13,XH
00183d ffb7                      	sbrs	XH,7
00183e e000                      	ldi		R16,0
00183f fdb7                      	sbrc	XH,7
001840 ef0f                      	ldi		R16,$ff
001841 1ee0                      	adc		R14,R16
001842 92a0 2f35                 	sts		flow_cal_zero,R10
001844 92b0 2f36                 	sts		flow_cal_zero+1,R11
001846 92c0 2f37                 	sts		flow_cal_zero+2,R12
001848 92d0 2f38                 	sts		flow_cal_zero+3,R13
00184a 92e0 2f39                 	sts		flow_cal_zero+4,R14
00184c 9508                      	ret
                                 
                                 pressure_cal_save:
00184d 90b0 2f31                 	lds		R11,pressure_cal_zero+1
00184f 90c0 2f32                 	lds		R12,pressure_cal_zero+2
001851 90d0 2f33                 	lds		R13,pressure_cal_zero+3
001853 90e0 2f34                 	lds		R14,pressure_cal_zero+4
001855 92e0 2d8d                 	sts		sensors_pressure_offset_cal+3,R14
001857 92d0 2d8c                 	sts		sensors_pressure_offset_cal+2,R13
001859 92c0 2d8b                 	sts		sensors_pressure_offset_cal+1,R12
00185b 92b0 2d8a                 	sts		sensors_pressure_offset_cal+0,R11
00185d e1b4                      	ldi		XH,high(EEPROM_START+ee_pressure_zero_cal)
00185e e0a0                      	ldi		XL,low(EEPROM_START+ee_pressure_zero_cal)
00185f 9100 2d8a                 	lds		R16,sensors_pressure_offset_cal+0
001861 940e 0f7b                 	call	eeprom_write_byte
001863 9100 2d8b                 	lds		R16,sensors_pressure_offset_cal+1
001865 940e 0f7b                 	call	eeprom_write_byte
001867 9100 2d8c                 	lds		R16,sensors_pressure_offset_cal+2
001869 940e 0f7b                 	call	eeprom_write_byte
00186b 9100 2d8d                 	lds		R16,sensors_pressure_offset_cal+3
00186d 940e 0f7b                 	call	eeprom_write_byte
00186f 9508                      	ret
                                 
                                 
                                 flow_cal_save:
001870 90b0 2f36                 	lds		R11,flow_cal_zero+1
001872 90c0 2f37                 	lds		R12,flow_cal_zero+2
001874 90d0 2f38                 	lds		R13,flow_cal_zero+3
001876 90e0 2f39                 	lds		R14,flow_cal_zero+4
001878 92e0 2d89                 	sts		sensors_flow_offset_cal+3,R14
00187a 92d0 2d88                 	sts		sensors_flow_offset_cal+2,R13
00187c 92c0 2d87                 	sts		sensors_flow_offset_cal+1,R12
00187e 92b0 2d86                 	sts		sensors_flow_offset_cal+0,R11
001880 e1b4                      	ldi		XH,high(EEPROM_START+ee_flow_zero_cal)
001881 e0a4                      	ldi		XL,low(EEPROM_START+ee_flow_zero_cal)
001882 9100 2d86                 	lds		R16,sensors_flow_offset_cal+0
001884 940e 0f7b                 	call	eeprom_write_byte
001886 9100 2d87                 	lds		R16,sensors_flow_offset_cal+1
001888 940e 0f7b                 	call	eeprom_write_byte
00188a 9100 2d88                 	lds		R16,sensors_flow_offset_cal+2
00188c 940e 0f7b                 	call	eeprom_write_byte
00188e 9100 2d89                 	lds		R16,sensors_flow_offset_cal+3
001890 940e 0f7b                 	call	eeprom_write_byte
001892 9508                      	ret
                                 
                                 
                                 ee_read_pressure_calibration:
001893 e1b4                      	ldi		XH,high(EEPROM_START+ee_pressure_zero_cal)
001894 e0a0                      	ldi		XL,low(EEPROM_START+ee_pressure_zero_cal)
001895 910d                      	ld		R16,X+
001896 9300 2d8a                 	sts		sensors_pressure_offset_cal,R16
001898 910d                      	ld		R16,X+
001899 9300 2d8b                 	sts		sensors_pressure_offset_cal+1,R16
00189b 910d                      	ld		R16,X+
00189c 9300 2d8c                 	sts		sensors_pressure_offset_cal+2,R16
00189e 910d                      	ld		R16,X+
00189f 9300 2d8d                 	sts		sensors_pressure_offset_cal+3,R16
0018a1 9508                      	ret
                                 
                                 
                                 
                                 ee_read_flow_calibration:
0018a2 e1b4                      	ldi		XH,high(EEPROM_START+ee_flow_zero_cal)
0018a3 e0a4                      	ldi		XL,low(EEPROM_START+ee_flow_zero_cal)
0018a4 910d                      	ld		R16,X+
0018a5 9300 2d86                 	sts		sensors_flow_offset_cal,R16
0018a7 910d                      	ld		R16,X+
0018a8 9300 2d87                 	sts		sensors_flow_offset_cal+1,R16
0018aa 910d                      	ld		R16,X+
0018ab 9300 2d88                 	sts		sensors_flow_offset_cal+2,R16
0018ad 910d                      	ld		R16,X+
0018ae 9300 2d89                 	sts		sensors_flow_offset_cal+3,R16
0018b0 9508                      	ret
                                 
                                 
                                 
                                 ee_read_o2_calibration:
0018b1 e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_21_cal)
0018b2 e0a8                      	ldi		XL,low(EEPROM_START+ee_o2_21_cal)
0018b3 910d                      	ld		R16,X+
0018b4 9300 2d8e                 	sts		sensors_o2_21_cal+0,R16
0018b6 910d                      	ld		R16,X+
0018b7 9300 2d8f                 	sts		sensors_o2_21_cal+1,R16
0018b9 910d                      	ld		R16,X+
0018ba 9300 2d90                 	sts		sensors_o2_21_cal+2,R16
0018bc 910d                      	ld		R16,X+
0018bd 9300 2d91                 	sts		sensors_o2_21_cal+3,R16
                                 
0018bf e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_hi_cal)
0018c0 e0ac                      	ldi		XL,low(EEPROM_START+ee_o2_hi_cal)
0018c1 910d                      	ld		R16,X+
0018c2 9300 2d92                 	sts		sensors_o2_Hi_cal+0,R16
0018c4 910d                      	ld		R16,X+
0018c5 9300 2d93                 	sts		sensors_o2_Hi_cal+1,R16
0018c7 910d                      	ld		R16,X+
0018c8 9300 2d94                 	sts		sensors_o2_Hi_cal+2,R16
0018ca 910d                      	ld		R16,X+
0018cb 9300 2d95                 	sts		sensors_o2_Hi_cal+3,R16
                                 
0018cd e1b4                      	ldi		XH,high(EEPROM_START+ee_o2_hi_ref)
0018ce e1a0                      	ldi		XL,low(EEPROM_START+ee_o2_hi_ref)
0018cf 910d                      	ld		R16,X+
0018d0 9300 2d96                 	sts		sensors_o2_Hi_ref,R16
0018d2 9508                      	ret
                                 
                                 
                                 
                                 chk_calibrate_o2:
0018d3 9100 2f2e                 	lds		R16,calibrate_o2_flag
0018d5 3000                      	cpi		R16,0
0018d6 f039                      	breq	chk_calibrate_o2_ret
                                 	
0018d7 d01c                      	rcall	calc_calibrate_o2
                                 
0018d8 e001                      	ldi		R16,1
0018d9 940e 0d73                 	call	screen_tx_ack_O2
0018db e000                      	ldi		R16,0
0018dc 9300 2f2e                 	sts		calibrate_o2_flag,R16
                                 chk_calibrate_o2_ret:
0018de 9508                      	ret
                                 
                                 
                                 
                                 ; factor for ref=(60 to 100): factor=(21/(ref-21)
                                 table_cal_o2:
0018df 868a
0018e0 8083
0018e1 7a7d
0018e2 7577
0018e3 7072                      	.db 138,134,131,128,125,122,119,117,114,112
0018e4 6c6e
0018e5 6769
0018e6 6465
0018e7 6062
0018e8 5d5e                      	.db 110,108,105,103,101,100, 98, 96, 94, 93
0018e9 5a5b
0018ea 5758
0018eb 5455
0018ec 5153
0018ed 4f50                      	.db	 91, 90, 88, 87, 85, 84, 83, 81, 80, 79
0018ee 4d4e
0018ef 4b4c
0018f0 494a
0018f1 4748
0018f2 4546                      	.db	 78, 77, 76, 75, 74, 73, 72, 71, 70, 69
0018f3 4444                      	.db	 68, 68
                                 
                                 calc_calibrate_o2:
0018f4 9100 2d96                 	lds		R16,sensors_o2_Hi_ref
0018f6 330c                      	cpi		R16,60
0018f7 f010                      	brlo	calc_calibrate_o2_ret1
0018f8 3605                      	cpi		R16,100+1
0018f9 f008                      	brlo	calc_calibrate_o2_cont
                                 calc_calibrate_o2_ret1:
0018fa c04c                      	rjmp	calc_calibrate_o2_ret
                                 calc_calibrate_o2_cont:
                                 
0018fb 9170 2d95                 	lds		R23,sensors_o2_Hi_cal+3		;	d=oHi-o21
0018fd 9160 2d94                 	lds		R22,sensors_o2_Hi_cal+2
0018ff 9150 2d93                 	lds		R21,sensors_o2_Hi_cal+1
001901 9140 2d92                 	lds		R20,sensors_o2_Hi_cal+0
001903 90d0 2d91                 	lds		R13,sensors_o2_21_cal+3
001905 90c0 2d90                 	lds		R12,sensors_o2_21_cal+2
001907 90b0 2d8f                 	lds		R11,sensors_o2_21_cal+1
001909 90a0 2d8e                 	lds		R10,sensors_o2_21_cal+0
00190b 194a                      	sub		R20,R10
00190c 095b                      	sbc		R21,R11
00190d 096c                      	sbc		R22,R12
00190e 097d                      	sbc		R23,R13
                                 
00190f e3f1                      	ldi		ZH,high(table_cal_o2*2)			; read calibration factor
001910 ebee                      	ldi		ZL,low(table_cal_o2*2)
001911 530c                      	subi	R16,60
001912 0fe0                      	add		ZL,R16
001913 e000                      	ldi		R16,0
001914 1ff0                      	adc		ZH,R16
                                 
001915 9104                      	lpm		R16,Z							; o0=o21-d*21/(hi-21)	; (70-21)=49
001916 e010                      	ldi		R17,0
001917 9f50                      	mul		R21,R16
001918 2c20                      	mov		R2,R0
001919 2c31                      	mov		R3,R1
00191a 9f70                      	mul		R23,R16
00191b 2c40                      	mov		R4,R0
00191c 2c51                      	mov		R5,R1
00191d 9f40                      	mul		R20,R16
00191e 0c21                      	add		R2,R1
00191f 1e31                      	adc		R3,R17
001920 1e41                      	adc		R4,R17
001921 1e51                      	adc		R5,R17
001922 9f60                      	mul		R22,R16
001923 0c30                      	add		R3,R0
001924 1c41                      	adc		R4,R1
001925 1e51                      	adc		R5,R17
001926 18a2                      	sub		R10,R2
001927 08b3                      	sbc		R11,R3
001928 08c4                      	sbc		R12,R4
001929 08d5                      	sbc		R13,R5
00192a 92a0 2d97                 	sts		sensors_o2_0_cal+0,R10
00192c 92b0 2d98                 	sts		sensors_o2_0_cal+1,R11
00192e 92c0 2d99                 	sts		sensors_o2_0_cal+2,R12
001930 92d0 2d9a                 	sts		sensors_o2_0_cal+3,R13
                                 
                                 
001932 9100 2d96                 	lds		R16,sensors_o2_Hi_ref			;	g=(hi-21)*256*256*256/d
001934 5105                      	subi	R16,21
001935 2e30                      	mov		R3,R16
001936 2422                      	clr		R2
001937 2411                      	clr		R1
001938 2400                      	clr		R0
001939 2e77                      	mov		R7,R23
00193a 2e66                      	mov		R6,R22
00193b 2e55                      	mov		R5,R21
00193c 2e44                      	mov		R4,R20
00193d 940e 044d                 	call	Divide32
00193f 9200 2d9b                 	sts		sensors_o2_gain_cal+0,R0
001941 9210 2d9c                 	sts		sensors_o2_gain_cal+1,R1
001943 9220 2d9d                 	sts		sensors_o2_gain_cal+2,R2
001945 9230 2d9e                 	sts		sensors_o2_gain_cal+3,R3
                                 calc_calibrate_o2_ret:
001947 9508                      	ret
                                 
                                 
                                 
                                 chk_power_button:
001948 9100 2e8e                 	lds		R16,power_screen_flag
00194a 3001                      	cpi		R16,1
00194b f429                      	brne	chk_power_button_ret
00194c e002                      	ldi		R16,2
00194d 9300 2e8e                 	sts		power_screen_flag,R16
00194f 940e 0d6b                 	call	screen_tx_shut_down
                                 chk_power_button_ret:
001951 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 ; checks ventilation mode
                                 check_vent_mode:
001952 9100 2f2b                 	lds		R16,vent_mode_new				; new ventilation mode?
001954 3f0f                      	cpi		R16,0xff
001955 f099                      	breq	check_vent_mode_no_new
001956 ef1f                      	ldi		R17,0xff
001957 9310 2f2b                 	sts		vent_mode_new,R17
                                 
001959 e2be                      	ldi		XH,high(vent_mode_data)			; pointer to parameters
00195a e4a4                      	ldi		XL,low(vent_mode_data)
                                 
00195b 3000                      	cpi		R16,0							; stop?
00195c f069                      	breq	check_vent_mode_set
                                 
00195d 3001                      	cpi		R16,1							; vc-cmv?
00195e f411                      	brne	check_vent_mode_no_vc_cmv
00195f dbeb                      	rcall	vc_cmv_copy_set_values
001960 c009                      	rjmp	check_vent_mode_set
                                 check_vent_mode_no_vc_cmv:
                                 
001961 3002                      	cpi		R16,2							; pc-cmv?
001962 f411                      	brne	check_vent_mode_no_pc_cmv
001963 d8a6                      	rcall	pc_cmv_copy_set_values
001964 c005                      	rjmp	check_vent_mode_set
                                 check_vent_mode_no_pc_cmv:
                                 
001965 3003                      	cpi		R16,3							; psv?
001966 f411                      	brne	check_vent_mode_no_psv
001967 dd7a                      	rcall	psv_copy_set_values
001968 c001                      	rjmp	check_vent_mode_set
                                 check_vent_mode_no_psv:
                                 
                                 check_vent_mode_no_new:
001969 c002                      	rjmp	check_vent_mode_check
                                 check_vent_mode_set:
00196a 9300 2f2a                 	sts		vent_mode,R16
                                 check_vent_mode_check:
00196c 9100 2f2a                 	lds		R16,vent_mode
00196e 3000                      	cpi		R16,0
00196f f411                      	brne	check_vent_mode_ok
001970 9498                      	clz
001971 c001                      	rjmp	check_vent_mode_ret
                                 check_vent_mode_ok:
001972 9418                      	sez
                                 check_vent_mode_ret:
001973 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; run one cycle of ventilation mode
                                 run_vent_mode:
001974 e1f9                      	ldi		ZH,high(main_vent_mode_table)
001975 e7ee                      	ldi		ZL,low(main_vent_mode_table)
001976 9100 2f2a                 	lds		R16,vent_mode
001978 3004                      	cpi		R16,(main_vent_mode_table_end-main_vent_mode_table)
001979 f440                      	brsh	run_vent_mode_ret
                                 
00197a 0fe0                      	add		ZL,R16					; points to ventilation mode
00197b e000                      	ldi		R16,0
00197c 1ff0                      	adc		ZH,R16
00197d 9409                      	ijmp
                                 main_vent_mode_table:
00197e c003                      	rjmp	run_vent_mode_ret		; stop mode
00197f cabc                      	rjmp	main_vc_cmv				; volume control continous mandatory ventilation
                                 ;	rjmp	main_vc_cmv_pid				; volume control continous mandatory ventilation
001980 c864                      	rjmp	pc_cmv_process			; pressure control continous mandatory ventilation
001981 cd4e                      	rjmp	main_psv				; pressure support ventilation
                                 main_vent_mode_table_end:
                                 
                                 run_vent_mode_ret:
001982 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 main_test:
001983 e001                      	ldi		R16,1							; inspiracion
001984 9300 2f2c                 	sts		vent_phase,R16
001986 940e 0d24                 	call	screen_tx_event
                                 
001988 e000                      	ldi		R16,0
001989 9300 2d69                 	sts		sensors_volume_value,R16		; clear volume data
00198b 9300 2d6a                 	sts		sensors_volume_value+1,R16
00198d 9300 2d6b                 	sts		sensors_volume_value+2,R16
00198f 9300 2d6c                 	sts		sensors_volume_value+3,R16
                                 
001991 e4cb                      	ldi		YL,low(75)
001992 e0d0                      	ldi		YH,high(75)
001993 ebae                      	ldi		XL,low(stepper_pos_max-50)
001994 e0ba                      	ldi		XH,high(stepper_pos_max-50)
001995 940e 0649                 	call	stepper_close
                                 
001997 e002                      	ldi		R16,2							; hold
001998 9300 2f2c                 	sts		vent_phase,R16
00199a 940e 0d24                 	call	screen_tx_event
00199c ef0f                      	ldi		R16,255
00199d d087                      	rcall	main_delaycs
00199e ef0f                      	ldi		R16,255
00199f d085                      	rcall	main_delaycs
                                 
0019a0 e003                      	ldi		R16,3							; expiration
0019a1 9300 2f2c                 	sts		vent_phase,R16
0019a3 940e 0d24                 	call	screen_tx_event
                                 
0019a5 e8c2                      	ldi		YL,low(-126)
0019a6 efdf                      	ldi		YH,high(-126)
0019a7 e6a4                      	ldi		XL,low(100)
0019a8 e0b0                      	ldi		XH,high(100)
0019a9 940e 0667                 	call	stepper_open
                                 
0019ab ef0f                      	ldi		R16,255
0019ac d078                      	rcall	main_delaycs
0019ad ef0f                      	ldi		R16,255
0019ae d076                      	rcall	main_delaycs
                                 
0019af cdde                      	rjmp	main_task_loop
                                 
                                 
                                 
                                 
                                 
                                 main_test_limits:
0019b0 e0b1                      	ldi		XH,high(400)
0019b1 e9a0                      	ldi		XL,low(400)
0019b2 94f8
0019b3 93a0 2c9e
0019b5 93b0 2c9f
0019b7 9478                      	stepper_write_pos
                                 main_test_limits_loop:
0019b8 d004                      	rcall	test_limits_close
0019b9 d01d                      	rcall	test_limits_close_release
0019ba d036                      	rcall	test_limits_open
0019bb d04f                      	rcall	test_limits_open_release
0019bc cffb                      	rjmp	main_test_limits_loop
                                 
                                 
                                 test_limits_close:
0019bd e0d0                      	ldi		YH,high(10)
0019be e0ca                      	ldi		YL,low(10)
0019bf 93c0 2c9a                 	sts		stepper_speed_sp,YL
0019c1 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
                                 
                                 test_limits_close_loop:
0019c3 940e 00fc                 	task_change
0019c5 9100 0488                 	lds		R16,PORTE_IN
0019c7 fd02                      	sbrc	R16,stepper_sw_close_pin
0019c8 cffa                      	rjmp	test_limits_close_loop
                                 
0019c9 e000                      	ldi		R16,0
0019ca 9300 2c9a                 	sts		stepper_speed_sp,R16
0019cc 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 
0019ce 94f8
0019cf 91a0 2c9e
0019d1 91b0 2c9f
0019d3 9478                      	stepper_read_pos
                                 
0019d4 ef0f                      	ldi		R16,255
0019d5 d04f                      	rcall	main_delaycs
0019d6 9508                      	ret
                                 
                                 
                                 test_limits_close_release:
0019d7 efdf                      	ldi		YH,high(-10)
0019d8 efc6                      	ldi		YL,low(-10)
0019d9 93c0 2c9a                 	sts		stepper_speed_sp,YL
0019db 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
                                 
                                 test_limits_close_release_loop:
0019dd 940e 00fc                 	task_change
0019df 9100 0488                 	lds		R16,PORTE_IN
0019e1 ff02                      	sbrs	R16,stepper_sw_close_pin
0019e2 cffa                      	rjmp	test_limits_close_release_loop
                                 
0019e3 e000                      	ldi		R16,0
0019e4 9300 2c9a                 	sts		stepper_speed_sp,R16
0019e6 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 
0019e8 94f8
0019e9 91a0 2c9e
0019eb 91b0 2c9f
0019ed 9478                      	stepper_read_pos
                                 
0019ee ef0f                      	ldi		R16,255
0019ef d035                      	rcall	main_delaycs
0019f0 9508                      	ret
                                 
                                 
                                 test_limits_open:
0019f1 efdf                      	ldi		YH,high(-10)
0019f2 efc6                      	ldi		YL,low(-10)
0019f3 93c0 2c9a                 	sts		stepper_speed_sp,YL
0019f5 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
                                 
                                 test_limits_open_loop:
0019f7 940e 00fc                 	task_change
0019f9 9100 0488                 	lds		R16,PORTE_IN
0019fb fd01                      	sbrc	R16,stepper_sw_open_pin
0019fc cffa                      	rjmp	test_limits_open_loop
                                 
0019fd e000                      	ldi		R16,0
0019fe 9300 2c9a                 	sts		stepper_speed_sp,R16
001a00 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 
001a02 94f8
001a03 91a0 2c9e
001a05 91b0 2c9f
001a07 9478                      	stepper_read_pos
                                 
001a08 ef0f                      	ldi		R16,255
001a09 d01b                      	rcall	main_delaycs
001a0a 9508                      	ret
                                 
                                 
                                 test_limits_open_release:
001a0b e0d0                      	ldi		YH,high(10)
001a0c e0ca                      	ldi		YL,low(10)
001a0d 93c0 2c9a                 	sts		stepper_speed_sp,YL
001a0f 93d0 2c9b                 	sts		stepper_speed_sp+1,YH
                                 
                                 test_limits_open_release_loop:
001a11 940e 00fc                 	task_change
001a13 9100 0488                 	lds		R16,PORTE_IN
001a15 ff01                      	sbrs	R16,stepper_sw_open_pin
001a16 cffa                      	rjmp	test_limits_open_release_loop
                                 
001a17 e000                      	ldi		R16,0
001a18 9300 2c9a                 	sts		stepper_speed_sp,R16
001a1a 9300 2c9b                 	sts		stepper_speed_sp+1,R16
                                 
001a1c 94f8
001a1d 91a0 2c9e
001a1f 91b0 2c9f
001a21 9478                      	stepper_read_pos
                                 
001a22 ef0f                      	ldi		R16,255
001a23 d001                      	rcall	main_delaycs
001a24 9508                      	ret
                                 
                                 
                                 
                                 main_delaycs:
001a25 9300 2f2f                 	sts		main_tmr_cs,R16
                                 main_delaycs_loop:
                                 ;	task_change
                                 ;	call	screen_check_data_tx
001a27 940e 0622                 	call	screen_chk_tx_data_PFV
                                 
001a29 9100 2f2f                 	lds		R16,main_tmr_cs
001a2b 3000                      	cpi		R16,0
001a2c f7d1                      	brne	main_delaycs_loop
001a2d 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ;	PB0: (OUT-LOW)	stepper pulse
                                 ;	PB1: (OUT-LOW)	stepper dir
                                 ;	PB2: (OUT-HIGH)	stepper enable
                                 main_test_limits_no_tasks:
001a2e 94f8                      	cli
001a2f e004                      	ldi		R16,$04
001a30 9300 0426                 	sts		PORTB_OUTCLR,R16
001a32 d004                      	rcall	test_limits_no_tasks_close
001a33 d00d                      	rcall	test_limits_no_tasks_close_release
001a34 d016                      	rcall	test_limits_no_tasks_open
001a35 d01f                      	rcall	test_limits_no_tasks_open_release
001a36 cff7                      	rjmp	main_test_limits_no_tasks
                                 
                                 
                                 test_limits_no_tasks_close:
001a37 e002                      	ldi		R16,$02
001a38 9300 0425                 	sts		PORTB_OUTSET,R16
                                 test_limits_no_tasks_close_loop:
001a3a d024                      	rcall	pulso_stepper
001a3b 9100 0488                 	lds		R16,PORTE_IN
001a3d fd02                      	sbrc	R16,stepper_sw_close_pin
001a3e cffb                      	rjmp	test_limits_no_tasks_close_loop
001a3f d02d                      	rcall	delay_test_long
001a40 9508                      	ret
                                 	
                                 		
                                 test_limits_no_tasks_close_release:
001a41 e002                      	ldi		R16,$02
001a42 9300 0426                 	sts		PORTB_OUTCLR,R16
                                 test_limits_no_tasks_close_release_loop:
001a44 d01a                      	rcall	pulso_stepper
001a45 9100 0488                 	lds		R16,PORTE_IN
001a47 ff02                      	sbrs	R16,stepper_sw_close_pin
001a48 cffb                      	rjmp	test_limits_no_tasks_close_release_loop
001a49 d023                      	rcall	delay_test_long
001a4a 9508                      	ret
                                 
                                 
                                 test_limits_no_tasks_open:
001a4b e002                      	ldi		R16,$02
001a4c 9300 0426                 	sts		PORTB_OUTCLR,R16
                                 test_limits_no_tasks_open_loop:
001a4e d010                      	rcall	pulso_stepper
001a4f 9100 0488                 	lds		R16,PORTE_IN
001a51 fd01                      	sbrc	R16,stepper_sw_open_pin
001a52 cffb                      	rjmp	test_limits_no_tasks_open_loop
001a53 d019                      	rcall	delay_test_long
001a54 9508                      	ret
                                 
                                 
                                 test_limits_no_tasks_open_release:
001a55 e002                      	ldi		R16,$02
001a56 9300 0425                 	sts		PORTB_OUTSET,R16
                                 test_limits_no_tasks_open_release_loop:
001a58 d006                      	rcall	pulso_stepper
001a59 9100 0488                 	lds		R16,PORTE_IN
001a5b ff01                      	sbrs	R16,stepper_sw_open_pin
001a5c cffb                      	rjmp	test_limits_no_tasks_open_release_loop
001a5d d00f                      	rcall	delay_test_long
001a5e 9508                      	ret
                                 
                                 
                                 
                                 
                                 pulso_stepper:
001a5f e001                      	ldi		R16,$01
001a60 9300 0425                 	sts		PORTB_OUTSET,R16
001a62 d005                      	rcall	delay_test
001a63 e001                      	ldi		R16,$01
001a64 9300 0426                 	sts		PORTB_OUTCLR,R16
001a66 d001                      	rcall	delay_test
001a67 9508                      	ret
                                 
                                 
                                 
                                 delay_test:
001a68 e1b7                      	ldi		XH,high(6000)
001a69 e7a0                      	ldi		XL,low(6000)
                                 delay_test_loop:
001a6a 9711                      	sbiw	XL,1
001a6b f7f1                      	brne	delay_test_loop
001a6c 9508                      	ret
                                 
                                 delay_test_long:
001a6d e0b0                      	ldi		XH,high(100)
001a6e e6a4                      	ldi		XL,low(100)
                                 delay_test_long_loop:
001a6f efdf                      	ldi		YH,high(65535)
001a70 efcf                      	ldi		YL,low(65535)
                                 delay_test_long_loop2:
001a71 9721                      	sbiw	YL,1
001a72 f7f1                      	brne	delay_test_long_loop2
001a73 9711                      	sbiw	XL,1
001a74 f7d1                      	brne	delay_test_long_loop
001a75 9508                      	ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :  81 y  :  31 z  :  61 r0 : 145 r1 : 121 r2 :  62 r3 :  38 r4 :  26 
r5 :  17 r6 :  12 r7 :  11 r8 :  12 r9 :   7 r10:  67 r11:  80 r12:  66 
r13:  65 r14:  16 r15:  23 r16:1436 r17: 317 r18: 183 r19: 106 r20:  59 
r21:  62 r22:  32 r23:  35 r24:  16 r25:   0 r26: 329 r27: 315 r28: 134 
r29: 147 r30: 109 r31: 107 
Registers used: 34 out of 35 (97.1%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   : 108 add   : 114 adiw  :  10 and   :   5 
andi  :  19 asr   :   2 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :  20 break :   0 breq  :  60 brge  :  13 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  45 brlt  :  17 brmi  :   0 
brne  : 160 brpl  :   0 brsh  :  36 brtc  :   0 brts  :   0 brvc  :   1 
brvs  :   0 bset  :   0 bst   :   0 call  :  93 cbi   :   0 cbr   :   4 
clc   :   3 clh   :   0 cli   :  21 cln   :   0 clr   :  75 cls   :   0 
clt   :   0 clv   :   0 clz   :  12 com   :  14 cp    :  46 cpc   :  27 
cpi   : 189 cpse  :   0 dec   :  31 des   :   0 eor   :   1 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :   6 inc   :  31 
jmp   :   3 ld    :  78 ldd   :   5 ldi   : 558 lds   : 566 lpm   :  53 
lsl   :  31 lsr   :  46 mov   : 140 movw  :   7 mul   :  78 muls  :   3 
mulsu :   6 neg   :   8 nop   :   4 or    :  25 ori   :   8 out   :  13 
pop   :  70 push  :  66 rcall : 313 ret   : 192 reti  :   4 rjmp  : 142 
rol   :  25 ror   :  19 sbc   :  55 sbci  :  16 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :  10 sbr   :   0 sbrc  :  39 sbrs  :  32 sec   :   2 
seh   :   0 sei   :  20 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :  13 sleep :   0 spm   :   0 st    :  22 std   :  17 
sts   : 705 sub   :  49 subi  :  38 swap  :   9 tst   :   0 wdr   :   0 

Instructions used: 70 out of 114 (61.4%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0034ec  12042   1394  13436   49152  27.3%
[.dseg] 0x002800 0x002f3a      0   1850   1850    6144  30.1%
[.eseg] 0x000000 0x000096      0    150    150     256  58.6%

Assembly complete, 0 errors, 0 warnings
